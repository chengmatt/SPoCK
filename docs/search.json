[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"process-models-and-equations","dir":"Articles","previous_headings":"","what":"Process Models and Equations","title":"Description of Model Equations","text":"SPoRC assumes annual time-step, following processes applied order: Recruitment tag releases initially occur (tag releases occur tagging data used), Markovian movement individuals occurs, Total mortality, chronic tag loss (applicable), ageing processes take place, aforementioned processes applied four main population partitions, include region (rr), year (yy), age (aa +a_+, latter indicates plus group), sex (ss). Although SPoRC can accommodate spatial process, equations described vignette can collapse generalized single region (.e., r=1r = 1).","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"recruitment-processes","dir":"Articles","previous_headings":"Process Models and Equations","what":"Recruitment Processes","title":"Description of Model Equations","text":"Recruitment processes occur beginning year can described either mean recruitment Beverton-Holt stock recruitment relationship. Annual recruitment generated mean recruitment relationship governed following equation: Recr,y,s=μRecexp(ϵr,yRec−σRec22by)ψsζr Rec_{r,y,s} = \\mu^{Rec}\\exp\\left(\\epsilon_{r,y}^{Rec}-\\frac{\\sigma^2_{Rec}}{2}b_y\\right)\\psi_s\\zeta_r Recr,y,sRec_{r,y,s} represents recruitment across regions, years, sexes. μRec\\mu^{Rec} represents mean recruitment parameter, ϵr,yRec\\epsilon_{r,y}^{Rec} recruitment deviations constrained normal distribution. byb_y represents values determined recruitment bias correction ramp, ψs\\psi_s recruitment sex ratio, ζr\\zeta_r recruitment apportionment parameters. Recruitment parameterized Beverton-Holt relationship assuming localized density-dependence can expressed : Recr,y,s=4R0ζrhrSSBr,y−RecLag(1−hr)SSB0r+5(hr−1)SSBr,y−RecLagexp(ϵr,yRec−σRec22by)ψs Rec_{r,y,s} = \\frac{4R0\\zeta_rh_rSSB_{r,y-\\text{RecLag}}}{(1-h_r)SSB0_r+5(h_r-1)SSB_{r,y-\\text{RecLag}}}\\exp\\left(\\epsilon_{r,y}^{Rec}-\\frac{\\sigma^2_{Rec}}{2}b_y\\right)\\psi_s R0R0 virgin unfished recruitment, hrh_r steepness parameter representing fraction R0ζrR0\\zeta_r produced 20% SSB0rSSB0_r. steepness parameter constrained values 0.2 1 estimated bounded logit space: hr=0.2+(1−0.2)exp(hr′)1+exp(hr′) h_r = 0.2 + (1 - 0.2) \\frac{\\exp(h^{'}_r)}{1 + \\exp(h^{'}_r)} hr′h^{'}_r steepness parameter bounded logit space. SSB0rSSB0_r represents unfished spawning stock biomass computed spawning biomass per recruit multiplied R0ζrR0\\zeta_r RecLagRecLag represents delay spawning recruits enter population. RecLag>yRecLag > y, model utilizes SSB0rSSB0_r instead SSB(r,y−RecLag)SSB_(r,y-RecLag) compute deterministic recruitment. SSB(r,y)SSB_(r,y) spawning stock biomass, computed : SSBr,y=∑aa+Nr,y,,s=1Wr,y,,s=1spawnMatr,y,,s=1 SSB_{r,y} = \\sum_a^{+} N_{r,y,,s=1}W_{r,y,,s=1}^\\text{spawn}Mat_{r,y,,s=1} Nr,y,,s=1N_{r,y,,s=1} represents numbers age across regions years females (s=1s = 1), Wr,y,,s=1spawnW_{r,y,,s=1}^\\text{spawn} values weight age spawning females, Matr,y,,s=1Mat_{r,y,,s=1} values maturity age. single-sex model, SSBr,ySSB_{r,y} simply computed : SSBr,y=∑aa+Nr,y,,s=1Wr,y,,s=1spawn⋅0.5SSB_{r,y} = \\sum_a^{+} N_{r,y,,s=1}W_{r,y,,s=1}^\\text{spawn} \\cdot 0.5. spatial model, regional recruitment apportionment parameters ζr\\zeta_r derived using multinomial logit transformation. also additional options can specified recruitment processes spatial model. particular, users can also specify whether recruitment occurs globally instead locally. case, Beverton-Holt relatinoship rewritten : Recr,y,s=4R0h∑rSSBr,y−RecLag(1−h)SSB0+5(h−1)∑rSSBr,y−RecLagexp(ϵyRec−σRec22by)ψsζr Rec_{r,y,s} = \\frac{4R0h\\sum_rSSB_{r,y-\\text{RecLag}}}{(1-h)SSB0+5(h-1)\\sum_rSSB_{r,y-\\text{RecLag}}}\\exp\\left(\\epsilon_{y}^{Rec}-\\frac{\\sigma^2_{Rec}}{2}b_y\\right)\\psi_s\\zeta_r SSBSSB summed across regions, recruitment apportionment parameters applied overall deterministic recruitment relationship (opposed R0R0 numerator), recruitment deviations estimated globally.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"population-projection","dir":"Articles","previous_headings":"Process Models and Equations","what":"Population Projection","title":"Description of Model Equations","text":"Following recruitment processes, population can projected forward. Movement processes first occur: 𝐍y,,s=(𝐍y,,s)T𝐌y,,s \\boldsymbol{N}{_{y,,s}} = (\\boldsymbol{N}{_{y,,s}})^T \\boldsymbol{M}{_{y,,s}} 𝐌y,,s\\boldsymbol{M}{_{y,,s}} first-order Markov matrix representing movement. single-region case, movement occurs (.e., 𝐌y,,s\\boldsymbol{M}{_{y,,s}} identity matrix). Movement given year, age, sex combination constrained multinomial logit transformation: Mk,j,y,,s=exp(ωk,j,y,,s)∑k=1Jexp(ωk,j,y,,s),ωj,1,y,,s=0 M_{k,j,y,,s} = \\frac{\\exp(\\omega_{k,j,y,,s})}{\\sum_{k=1}^J\\exp(\\omega_{k,j,y,,s})}, \\omega_{j,1,y,,s} = 0 ωk,j,y,,s\\omega_{k,j,y,,s} movement parameters multinomial logit space. Given movement parameters must sum 1 across rows, nr−1n_r - 1 movement parameters estiamted given year, age, sex combination. population undergoes movement, individuals experience mortality ageing processes following exponential mortality model: Nr,y+1,+1,s=Nr,y,,sexp(−Zr,y,,s),1≤<+Nr,y+1,,s=Nr,y,−1,sexp(−Zr,y,−1,s)+Nr,y,,sexp(−Zr,y,,s),=+ \\begin{aligned} N_{r,y+1,+1,s} = N_{r,y,,s}\\exp(-Z_{r,y,,s}), \\quad \\text{} 1 \\leq < a_+ \\\\ N_{r,y+1,,s} = N_{r,y,-1,s}\\exp(-Z_{r,y,-1,s}) + N_{r,y,,s}\\exp(-Z_{r,y,,s}), \\quad \\text{} = a_+ \\end{aligned} , Zr,y,,sZ_{r,y,,s} denotes total instantaneous mortality: Zr,y,,s=Natmortr,y,,s+∑fFmortr,y,fSelr,y,,s,fFsh Z_{r,y,,s} = Natmort_{r,y,,s} + \\sum_{f} Fmort_{r,y,f} Sel_{r,y,,s,f}^{Fsh} Natmortr,y,,sNatmort_{r,y,,s} instantaneous natural mortality rate, Fmortr,y,fFmort_{r,y,f} annual instantaneous fishing mortality rate fishery fleet ff, Selr,y,,s,fFshSel_{r,y,,s,f}^{Fsh}represents fishery selectivity processes. Fmortr,y,fFmort_{r,y,f} determined : Fmortr,y,f=μr,fFmort⋅exp(ϵr,y,fFishMort) Fmort_{r,y,f} = \\mu^{Fmort}_{r,f} \\cdot exp(\\epsilon_{r,y,f}^{FishMort}) μr,fFmort\\mu^{Fmort}_{r,f} mean fishing mortality parameters given region fleet, ϵr,y,fFishMort\\epsilon_{r,y,f}^{FishMort} deviations mean, constrained normal distribution.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"population-initialization","dir":"Articles","previous_headings":"Process Models and Equations","what":"Population Initialization","title":"Description of Model Equations","text":"Several options available initializing population age structure. first approach, initial population age structure derived iterating population equilibrium: Zr,,sInit=Natmortr,1,,s+Fmort,InitProp⋅μf=1⋅Selr,1,,s,f=1Fsh,<+cumsumZr,,sInit=∑′=1aZr,′,sInit \\begin{aligned} Z_{r,,s}^{\\text{Init}} &= \\text{Natmort}_{r,1,,s} + F_{\\text{mort,InitProp}} \\cdot \\mu_{f=1} \\cdot \\text{Sel}^{\\text{Fsh}}_{r,1,,s,f=1}, \\quad \\text{} < a_+ \\\\ \\text{cumsum}_{Z_{r,,s}^{\\text{Init}}} &= \\sum_{'=1}^{} Z_{r,',s}^{\\text{Init}} \\end{aligned} Zr,,sInitZ_{r,,s}^{Init} initial instantaneous total mortality rate determined sum natural mortality inital fishing mortality rate. initial instantaneous fishing mortality rate user-specified value FmortInitPropFmort_{InitProp}, represents proportion μf=1\\mu_{f=1} apply initial age structure. SPoRC, generally recommended structure associated data inptus fishery fleet 1 represent dominant fishery fleet. cumsumZr,,sInitcumsum_{Z_{r,,s}^{Init}} cumulative sum initial total mortality rate initially applied equilibrium age structure following exponential motality model: Nr,,sInit={R0ψsζr,=1R0exp(−cumsumZr,,sInit)ψsζr,>1 N_{r,,s}^{Init} = \\begin{cases} R0 \\psi_s \\zeta_r, & \\text{} = 1 \\\\ R0 \\exp\\left(-cumsum_{Z_{r,,s}^{Init}}\\right)\\psi_s\\zeta_r, & \\text{} > 1 \\end{cases} mean recruitment dynamics assumed, R0R0 equation can simply replaced μrRec\\mu^{Rec}_{r}. Following determination equilibrium age structure, initial population iterated na⋅5n_a \\cdot 5 times movement first applied, followed mortality ageing processes. general, users might want iterate equilibrium age structure movement processes occur given simple closed form solution derive plus-group population movement occurs. Conversely, users can also specify initial age structure determined geometric series solution: Nr,,sInit={R0exp(−(−1)(Natmortr,1,,s+Fmortinitμf=1Selr,1,,s,f=1Fsh))ψsζr,2≤<+R0exp(−(+−1)(Natmortr,1,,s+FmortInitProp⋅μf=1Selr,1,,s,f=1Fsh))1−exp(−(Natmortr,1,,s+Fmortinitμf=1Selr,1,,s,f=1Fsh))ψsζr,=+ N_{r,,s}^{Init} = \\begin{cases} R0 \\exp\\left(-(-1)(Natmort_{r,1,,s} + Fmort_{init}\\mu_{f=1}Sel^{Fsh}_{r,1,,s,f=1})\\right)\\psi_s\\zeta_r, & \\text{} 2 \\leq < a_+ \\\\ \\frac{R0 \\exp\\left(-(a_+ - 1)(Natmort_{r,1,,s} + Fmort_{InitProp} \\cdot \\mu_{f=1}Sel^{Fsh}_{r,1,,s,f=1})\\right)}{1 - \\exp\\left(-(Natmort_{r,1,,s} + Fmort_{init}\\mu_{f=1}Sel^{Fsh}_{r,1,,s,f=1})\\right)}\\psi_s\\zeta_r, & \\text{} = a_+ \\end{cases} approach generally appropriate movement occur among regions, given closed form solution can easily derived plus-group. Initial age deviations can applied equilibrium age structure: Nr,,sInit=Nr,,sInitexp(ϵr,aInit) N_{r,,s}^{Init} = N_{r,,s}^{Init} \\exp(\\epsilon_{r,}^{Init}) ϵr,yInit\\epsilon_{r,y}^{Init} initial age deviations constrained normal distribution. Note several options initializing age structure. particular, users can specify equilibrium age structure, deviations assumed 0, stochastic age structure plus group following equilibrium solution, stochastic age structure plus group following equilibrium solution additional deviation applied plus group.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"selforms","dir":"Articles","previous_headings":"Process Models and Equations","what":"Selectivity Processes (Fishery and Survey)","title":"Description of Model Equations","text":"Currently, several options available parameterizing fishery survey selectivity. Firstly, selectivity can specified either age-based length-based. context age-based selectivity, usual calculations occur age vector utilized compute selectivity, given specified functional form. case length-based selectivity, length vector utilized compute selectivity, dot product selectivity--length size-age transition matrix computeed derive selectivity--age: 𝐒𝐞𝐥𝐚=(𝐀r,y,sl)T𝐒𝐞𝐥𝐥 \\boldsymbol{Sel^} = (\\boldsymbol{}^l_{r,y,s})^T \\boldsymbol{Sel^l} derived selectivity--age used subsequent calculations, given model age-based model. Various functional forms can also specified selectivity processes. particular, two forms logistic selectivity can specified. Throughout section, use bb denote genearlized bin. first form : Selb=11+exp[−k(b−b50)] Sel_{b} = \\frac{1}{1 + \\exp[-k(b - b^{50})]} kk regulates slope/steepness logistic curve b50b^{50} bin--50% selection. second logistic form expressed : Selb=11+19(b50−bb95) Sel_{b} = \\frac{1}{1 + 19^{\\left(\\frac{b^{50} - b}{b^{95}}\\right)}} , ab50ab^{50} bin--50% selection b95b^{95} bin--95% selection. Selectivity can also parameterized gamma dome-shaped function: p=0.5[(bs,fmax)2+4γs,f2−bs,fmax]Selb=(bbs,fmax)(bs,fmaxp)e(bs,fmax−bp) \\begin{aligned} p = 0.5 \\left[ \\sqrt{(b_{s,f}^{\\text{max}})^2 + 4\\gamma_{s,f}^2} - b_{s,f}^{\\text{max}} \\right] \\\\ Sel_{b} = \\left( \\frac{b}{b_{s,f}^{\\text{max}}} \\right)^{\\left(\\frac{b_{s,f}^{\\text{max}}}{p}\\right)} e^{\\left( \\frac{b_{s,f}^{\\text{max}} - b}{p} \\right)} \\end{aligned} pp derived power parameter, γ\\gamma shape parameter describes steepness descending limb, bmaxb^{max} estimated parameter describing bin--maximum selection. dome-shaped functions also available. particular, includes power function: Selb=1bϕ Sel_{b} = \\frac{1}{b^{\\phi}} ϕ\\phi power parameter determining descending limb (larger values steeper). function available includes 6 parameter double normal selectivity form. define parametric selectivity function using flexible compound form. Parameters transformed input vector p̂1\\hat{p}_1 p̂6\\hat{p}_6 define shape. p1=min(b)+[max(b)−min(b)]⋅11+exp(−p̂1)Peak bin — beginning plateaup2=p1+1+0.99+maxx−p1−11+exp(−p̂2)Width plateau, smoothly approaches maximum binp3=exp(p̂3),p4=exp(p̂4)Ascending descending widths (log scale)p5=11+exp(−p̂5),p6=11+exp(−p̂6)Selectivity first last bins (logistic scale)\\begin{align*} p_1 &= \\text{min}(b) + [\\text{max}(b) - \\text{min}(b)] \\cdot \\frac{1}{1 + \\text{exp}(-\\hat{p}_1)} && \\text{Peak bin — beginning plateau} \\\\ p_2 &= p_1 + 1 + \\frac{0.99 + \\text{max}_x - p_1 - 1}{1 + \\exp(-\\hat{p}_2)}  && \\text{Width plateau, smoothly approaches maximum bin} \\\\ p_3 &= \\exp(\\hat{p}_3), \\quad  p_4 = \\exp(\\hat{p}_4)  && \\text{Ascending descending widths (log scale)} \\\\ p_5 &= \\frac{1}{1 + \\exp(-\\hat{p}_5)}, \\quad  p_6 = \\frac{1}{1 + \\exp(-\\hat{p}_6)}  && \\text{Selectivity first last bins (logistic scale)} \\end{align*} , low bins, selectivity follows ascending curve; intermediate bins, plateaus around 1; higher bins, transitions smoothly descending curve. asc(b)=exp(−(−p1)2p3)Gaussian rise centered p1ascscaled(b)=p5+(1−p5)⋅asc(b)Rescales minimum p5\\begin{align*} \\text{asc}(b) &= \\exp\\left( -\\frac{(- p_1)^2}{p_3} \\right)  && \\text{Gaussian rise centered } p_1 \\\\ \\text{asc}_{\\text{scaled}}(b) &= p_5 + (1 - p_5) \\cdot \\text{asc}(b)  && \\text{Rescales minimum } p_5 \\end{align*} desc(b)=exp(−(−p2)2p4)Gaussian fall centered p2stj=exp(−(40−p2)2p4)Reference value rescaling descdescscaled(b)=1+(p6−1)⋅desc(b)−1stj−1Descending scaled reach p6 =40\\begin{align*} \\text{desc}(b) &= \\exp\\left( -\\frac{(- p_2)^2}{p_4} \\right)  && \\text{Gaussian fall centered } p_2 \\\\ \\text{stj} &= \\exp\\left( -\\frac{(40 - p_2)^2}{p_4} \\right)  && \\text{Reference value rescaling } \\text{desc} \\\\ \\text{desc}_{\\text{scaled}}(b) &= 1 + (p_6 - 1) \\cdot \\frac{\\text{desc}(b) - 1}{\\text{stj} - 1}  && \\text{Descending scaled reach } p_6 \\text{ } = 40 \\end{align*} join1(b)=11+exp(−20⋅−p11+|−p1|)Logistic transition asc plateaujoin2(b)=11+exp(−20⋅−p21+|−p2|)Logistic transition plateau desc\\begin{align*} \\text{join}_1(b) &= \\frac{1}{1 + \\exp\\left( -20 \\cdot \\frac{- p_1}{1 + |- p_1|} \\right)}  && \\text{Logistic transition asc plateau} \\\\ \\text{join}_2(b) &= \\frac{1}{1 + \\exp\\left( -20 \\cdot \\frac{- p_2}{1 + |- p_2|} \\right)}  && \\text{Logistic transition plateau desc} \\end{align*} Sel(b)=ascscaled(b)⋅(1−join1(b))+join1(b)⋅[1⋅(1−join2(b))+descscaled(b)⋅join2(b)]\\begin{align*} \\text{Sel}(b) &= \\text{asc}_{\\text{scaled}}(b) \\cdot (1 - \\text{join}_1(b)) \\\\ &\\quad + \\text{join}_1(b) \\cdot \\left[1 \\cdot (1 - \\text{join}_2(b)) + \\text{desc}_{\\text{scaled}}(b) \\cdot \\text{join}_2(b)\\right] \\end{align*} addition various functional forms can specified describe selectivity processes, several parameterizations time-varying processes can specified. simplest form, time-varying selectivity can specified time blocks, new selectivity parameters estimated arbitrary number user-specified periods. Several options also available specifying continuous time-varying selectivity, deviations restricted vary parametrically (.e., deviations applied parameters given selectivity form) semi-parametrically (.e., deviations applied values selectivity form). example, logistic selectivity specified deviations parametric, following expression invoked: Sely,b=11+exp[−ky(b−by50)]ky=kexp(ϵy,1Sel)by50=b50exp(ϵy,2Sel) \\begin{aligned} Sel_{y,b} = \\frac{1}{1 + \\exp[-k_{y}(b - b_{y}^{50})]} \\\\ k_{y} = k \\exp(\\epsilon_{y,1}^{Sel}) \\\\ b_{y}^{50} = b^{50} \\exp(\\epsilon_{y,2}^{Sel})  \\end{aligned} parameters logistic form allowed vary time. contrast, case semi-parametric deviations logistic selectivity, following expression used: Sely,b=11+exp[−k(b−b50)]exp(ϵy,bSel)Sely,b=Sely,bmean(𝐒𝐞𝐥) \\begin{aligned} Sel_{y,b} = \\frac{1}{1 + \\exp[-k(b - b^{50})]} \\exp(\\epsilon_{y,b}^{Sel}) \\\\ Sel_{y,b} = \\frac{Sel_{y,b}}{mean(\\boldsymbol{Sel})} \\end{aligned} deviations placed parametric form selectivity values log mean standardized aid interpretability. Note age-based selectivity specified continuous deviations estimated, deviations placed ages . contrast, length-based selectivity specified continuous deviations estimated, deviations placed lengths . details options available, see selectivity process error section.","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishery-observation-model","dir":"Articles","previous_headings":"Observation Models and Equations","what":"Fishery Observation Model","title":"Description of Model Equations","text":"fishery observation model describes expected catch--age, catch--length, catch (units biomass), fishery indices. Expected catch--age (Cr,y,,s,faC^a_{r,y,,s,f}) calculated using Baranov’s catch equation: Cr,y,,s,fa=Fmortr,y,fSelr,y,,s,fFshZr,y,,sNr,y,,s[1−exp(−Zr,y,,s)] C^a_{r,y,,s,f} = \\frac{Fmort_{r,y,f}Sel^{Fsh}_{r,y,,s,f}}{Z_{r,y,,s}} N_{r,y,,s} \\left[1-\\exp(-Z_{r,y,,s})\\right] Catch--length (Cr,y,l,s,flC^l_{r,y,l,s,f}) can derived using catch--age (Cr,y,,s,faC^a_{r,y,,s,f}) size-age transition matrix (𝐀r,y,sl\\boldsymbol{}^l_{r,y,s}): Cr,y,l,s,fl=(𝐀r,y,sl)T𝐂𝐚r,y,s,f C^l_{r,y,l,s,f} = (\\boldsymbol{}^l_{r,y,s})^T \\boldsymbol{C^}_{r,y,s,f} 𝐀r,y,sl\\boldsymbol{}^l_{r,y,s} data input derived external assessment model required users fitting length composition data, matrix represents probability length bin, given age. Expected catch (Catchr,y,f\\text{Catch}_{r,y,f}) derived simply taking summation expected catch--age across ages sexes, multiplied respective weights--age fishery: Catchr,y,f=∑aa+∑snsCr,y,,s,faWr,y,,sfish \\text{Catch}_{r,y,f} = \\sum_a^{a_+} \\sum_s^{n_s} C^a_{r,y,,s,f} W_{r,y,,s}^\\text{fish} Fishery indices (FshIdxr,y,f\\text{FshIdx}_{r,y,f}) can specified either abundance-based (first equation ) biomass-based (second equation ): FshIdxr,y,f=qr,y,fFsh∑aa+∑snsNr,y,,sexp(−Zr,y,,s0.5)Selr,y,,s,fFshFshIdxr,y,f=qr,y,fFsh∑aa+∑snsNr,y,,sexp(−Zr,y,,s0.5)Selr,y,,s,fFshWr,y,,sfish \\begin{aligned} \\text{FshIdx}_{r,y,f} = q^{Fsh}_{r,y,f} \\sum_a^{a_+} \\sum_s^{n_s} N_{r,y,,s} \\exp(-Z_{r,y,,s}0.5) Sel_{r,y,,s,f}^{Fsh} \\\\ \\text{FshIdx}_{r,y,f} = q^{Fsh}_{r,y,f} \\sum_a^{a_+} \\sum_s^{n_s} N_{r,y,,s} \\exp(-Z_{r,y,,s}0.5) Sel_{r,y,,s,f}^{Fsh} W_{r,y,,s}^\\text{fish} \\end{aligned} qr,y,fFshq^{Fsh}_{r,y,f} catchability coefficient given fishery value 0.5 represents fraction year fishery index computed . Currently, fishery catchability coefficients can vary time time blocks.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"survey-observation-model","dir":"Articles","previous_headings":"Observation Models and Equations","what":"Survey Observation Model","title":"Description of Model Equations","text":"survey observation model describes expected survey catch--age, survey catch--length, survey indices. Expected survey catch--age (Ir,y,,s,sfaI^a_{r,y,,s,sf}) calculated using following equation: Ir,y,,s,sfa=Nr,y,,sexp(−Zr,y,,s0.5)Selr,y,,s,sfSrv ^a_{r,y,,s,sf} = N_{r,y,,s} \\exp(-Z_{r,y,,s}0.5) Sel_{r,y,,s,sf}^{Srv} Selr,y,,s,sfSrvSel_{r,y,,s,sf}^{Srv} survey selectivity pattern. Expected survey catch--length (Ir,y,l,s,sflI^l_{r,y,l,s,sf}) can derived : Ir,y,l,s,sfl=(𝐀r,y,sl)T𝐈𝐚r,y,s,f ^l_{r,y,l,s,sf} = (\\boldsymbol{}^l_{r,y,s})^T \\boldsymbol{^}_{r,y,s,f} , survey indices (SrvIdxr,y,sf\\text{SrvIdx}_{r,y,sf}) can computed either abundance-based (first equation ), biomass-based (second equation ; weight--age can survey-specific): SrvIdxr,y,sf=qr,y,sfSrv∑aa+∑snsIr,y,,s,sfaSrvIdxr,y,sf=qr,y,sfSrv∑aa+∑snsIr,y,,s,sfaWr,y,,ssrv \\begin{aligned} \\text{SrvIdx}_{r,y,sf} = q^{Srv}_{r,y,sf} \\sum_a^{a_+} \\sum_s^{n_s} ^a_{r,y,,s,sf} \\\\  \\text{SrvIdx}_{r,y,sf} = q^{Srv}_{r,y,sf} \\sum_a^{a_+} \\sum_s^{n_s} ^a_{r,y,,s,sf} W_{r,y,,s}^\\text{srv} \\end{aligned} qr,y,sfSrvq^{Srv}_{r,y,sf} survey catchability coefficient. Currently, several options available parameterizing survey catchability. include time-blocks, unique value estimated defined period. Additionally, users can also input environmental covariates, parameterized follows: qr,y,sfSrv=q̂r,y,sfSrv⋅exp(∑kβk⋅Xk,r,y,sf) q^{Srv}_{r,y,sf} = \\widehat{q}^{Srv}_{r,y,sf} \\cdot exp(\\sum_k \\beta_k \\cdot X_{k,r,y,sf}) kk represents multi-dimensional index vector can accommodate various effect types (fixed effects, interactions, polynomials), XX covariate effect , βk\\beta_k regression coefficients given covariate, q̂r,y,sfSrv\\hat{q}^{Srv}_{r,y,sf} mean catchability parameter.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"tagging-observation-model","dir":"Articles","previous_headings":"Observation Models and Equations","what":"Tagging Observation Model","title":"Description of Model Equations","text":"Tag cohorts (Tr,y,,skT^k_{r,y,,s}) dimensioned regions, years, ages, sexes, index kk denotes unique tag cohort (release region release year combination). Tag cohorts tracked user-specific maximum duration (maximum tag liberty; nLn_L), calculations tag cohort longer computed. done help computation time. Additionally, tag cohorts also option undergo fraction mortality year release, given cohort released middle year, mortality processes discounted. mortality discounting specified, movement occur year release. general, process dynamics tagged cohort mimics specified overall population. Immediately following release, tag cohorts decremented initial tag-induced mortality rate: Tr,y,,sk=Tr,y,,skexp(−τ) T^k_{r,y,,s} = T^k_{r,y,,s} \\exp(-\\tau) τ\\tau initial tag-induced mortality rate, can either estimated freely fixed user-specified value. practice, parameter often cofounded mortality processes needs fixed. tagged cohorts released beginning calendar year, Markovian movement occurs (movement occur otherwise): 𝐓y,,sk=(𝐓y,,sk)T𝐌y,,s \\boldsymbol{T}^k_{y,,s} = (\\boldsymbol{T}^k_{y,,s})^T \\boldsymbol{M}_{y,,s} Mortality ageing tagged cohort occurs: Tr,y+1,+1,sk=Tr,y,,skexp(−Zr,y,,sTag),1≤<+Tr,y+1,,sk=Tr,y,−1,skexp(−Zr,y,−1,sTag)+Tr,y,,skexp(−Zr,y,,sTag),=+ \\begin{aligned} T^k_{r,y+1,+1,s} = T^k_{r,y,,s}\\exp(-Z^{Tag}_{r,y,,s}), \\quad \\text{} 1 \\leq < a_+ \\\\ T^k_{r,y+1,,s} =T^k_{r,y,-1,s}\\exp(-Z^{Tag}_{r,y,-1,s}) + T^k_{r,y,,s}\\exp(-Z^{Tag}_{r,y,,s}), \\quad \\text{} = a_+ \\end{aligned} tagged cohorts follow exponential mortality model, accumulation individuals plus-group. Total mortality tagged cohort can specified : Zr,y,,sTag=(κ+NatMortr,y,,sTag+FishMortr,y,,sTag) Z^{Tag}_{r,y,,s} = (\\kappa + NatMort^{Tag}_{r,y,,s} + FishMort^{Tag}_{r,y,,s}) κ\\kappa parameter describing chronic tag loss, can estimated model. However, parameter fixed practice, given confounding mortality processes. Natural mortality tagged individuals can derived several ways: Natural mortality applied tagged cohorts averaged across ages sexes, Natural mortality applied tagged cohorts averaged across sexes, age-specific, Natural mortality applied tagged cohorts averaged across ages, sex-specific, Natural mortality age-sex-specific: NatMortr,y,,sTag=∑∑sNatMortr,y,,snansNatMortr,y,,sTag=∑sNatMortr,y,,snsNatMortr,y,,sTag=∑aNatMortr,y,,snaNatMortr,y,,sTag=NatMortr,y,,s \\begin{aligned} NatMort^{Tag}_{r,y,,s} = \\frac{\\sum_a\\sum_s NatMort_{r,y,,s}}{n_an_s} \\\\ NatMort^{Tag}_{r,y,,s} = \\frac{\\sum_s NatMort_{r,y,,s}}{n_s} \\\\  NatMort^{Tag}_{r,y,,s} = \\frac{\\sum_a NatMort_{r,y,,s}}{n_a} \\\\  NatMort^{Tag}_{r,y,,s} = NatMort_{r,y,,s} \\end{aligned} different calculations natural mortality applied tagged cohorts might used observed tagging data age-sex-specific calculations observed expected values consistent nature tag recapture data (e.g., tagging data age-sex-specific, one might use option 1). Similarly, fishing mortality experienced tagged cohorts can also specified multitude ways: Fishing mortality age sex fleet 1 applied ages sexes uniform selectivity, Fishing mortality age sex fleet 1 multiplied sex-averaged selectivity values, Fishing mortality age sex fleet 1 multiplied sex-specific selectivity values, Fishing mortality age sex derived taking weighted sum annual fishing mortality across fleets sex-averaged selectivity values, Fishing mortality age sex derived taking weighted sum annual fishing mortality across fleets sex-specific selectivity values: FishMortr,y,,sTag=Fmortr,y,f=1FishMortr,y,,sTag=Fmortr,y,f=1⋅∑sSelr,y,,s,f=1FshnsFishMortr,y,,sTag=Fmortr,y,f=1⋅Selr,y,,s,f=1FshFishMortr,y,,sTag=∑fnfFmortr,y,fFishMortr,y,,sTag=∑f=1[Fmortr,y,f⋅∑sSelr,y,,s,fFshns]FishMortr,y,,sTag=∑f=1[Fmortr,y,f⋅Selr,y,,s,fFsh] \\begin{aligned} FishMort^{Tag}_{r,y,,s} = Fmort_{r,y,f=1} \\\\ FishMort^{Tag}_{r,y,,s} = Fmort_{r,y,f=1} \\cdot \\frac{\\sum_s Sel_{r,y,,s,f=1}^{Fsh}}{n_s} \\\\ FishMort^{Tag}_{r,y,,s} = Fmort_{r,y,f=1} \\cdot Sel_{r,y,,s,f=1}^{Fsh} \\\\ FishMort^{Tag}_{r,y,,s} = \\sum_f^{n_f} Fmort_{r,y,f} \\\\ FishMort^{Tag}_{r,y,,s} = \\sum_{f=1} \\left[Fmort_{r,y,f} \\cdot \\frac{\\sum_s Sel_{r,y,,s,f}^{Fsh}}{n_s} \\right] \\\\ FishMort^{Tag}_{r,y,,s} = \\sum_{f=1} \\left[Fmort_{r,y,f} \\cdot Sel_{r,y,,s,f}^{Fsh} \\right]  \\end{aligned} , users might specify different options depending nature observed recapture data. instance, sex-specific information available, one might specify option 2 4 (sex-averaged selectivity values). derive expected number recaptures, modified version Baranov’s catch equation used: Recapr,y,,sk=βr,yFishMortr,y,,sTagZr,y,,sTagTr,y,,sk[1−exp(−Zr,y,,sTag)] \\text{Recap}^k_{r,y,,s} = \\beta_{r,y} \\frac{FishMort^{Tag}_{r,y,,s}}{Z^{Tag}_{r,y,,s}} T^k_{r,y,,s} \\left[1-\\exp(-Z^{Tag}_{r,y,,s})\\right] βr,y\\beta_{r,y} represents tag reporting rate parameter can vary across space time. Currently, time-variation βr,y\\beta_{r,y} can specified time-block. Additionally, βr,y\\beta_{r,y} estimated logit variable: βr,y=exp(βr,y′)1+exp(βr,y′) \\beta_{r,y} = \\frac{\\exp(\\beta^{'}_{r,y})}{1 + \\exp(\\beta^{'}_{r,y})} βr,y′\\beta^{'}_{r,y} represents tag reporting parameter logit space.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"observation-likelihoods","dir":"Articles","previous_headings":"Observation Models and Equations","what":"Observation Likelihoods","title":"Description of Model Equations","text":"Currently, generalized assessment model capability fit variety data sources, include: fishery catches, fishery indices, fishery age compositions, fishery length compositions, survey indices, survey age compositions, survey length compositions, tagging data data sources fit using statistical likelihood, likelihood component summed together compute joint negative log likelihood. Therefore, joint negative log likelihood represents function minimized.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishery-catches","dir":"Articles","previous_headings":"Observation Models and Equations > Observation Likelihoods","what":"Fishery Catches","title":"Description of Model Equations","text":"Fishery catches can fit using lognormal likelihood, given following: L(log(ObsCatchr,y,f))=λObsCatch12πσObsCatchexp(−[log(ObsCatchr,y,f)−log(Catchr,y,f)]22σ2ObsCatch) L(log(\\text{ObsCatch}_{r,y,f})) = \\lambda_{\\text{ObsCatch}} \\frac{1}{\\sqrt{2\\pi} \\sigma^{\\text{ObsCatch}}} \\exp(-\\frac{[log(\\text{ObsCatch}_{r,y,f}) - log(\\text{Catch}_{r,y,f})]^2}{2\\sigma^{2^{\\text{ObsCatch}}}}) ObsCatchr,y,f\\text{ObsCatch}_{r,y,f} represent observed catches σ2ObsCatch\\sigma^{2^{\\text{ObsCatch}}} standard deviation catch. general, σ2ObsCatch\\sigma^{2^{\\text{ObsCatch}}} estimable fixed small value (e.g., 1e-03) catch assumed known, default SPoRC. Users able easily modify value parameter list something 1e-03 desired. λObsCatch\\lambda_{\\text{ObsCatch}} case represents likelihood weight apply catch data (generally recommended use set 1). case spatially-aggregated catches available period time, model option switch aggregated likelihood defined periods: L(log(ObsCatchy,f))=λObsCatch12πσObsCatchexp(−[log(ObsCatchy,f)−log(∑rCatchr,y,f)]22σ2ObsCatch) L(log(\\text{ObsCatch}_{y,f})) = \\lambda_{\\text{ObsCatch}} \\frac{1}{\\sqrt{2\\pi} \\sigma^{\\text{ObsCatch}}} \\exp(-\\frac{[log(\\text{ObsCatch}_{y,f}) - log(\\sum_r \\text{Catch}_{r,y,f})]^2}{2\\sigma^{2^{\\text{ObsCatch}}}}) lognormal likelihood still assumed, expected catches summed across regions derive spatially-aggregated catch.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishery-and-survey-indices","dir":"Articles","previous_headings":"Observation Models and Equations > Observation Likelihoods","what":"Fishery and Survey Indices","title":"Description of Model Equations","text":"Fishery indices can fit assuming lognormal likelihood: L(log(ObsFshIdxr,y,f))=λObsFshIdx12πσObsFshIdxexp(−[log(ObsFshIdxr,y,f)−log(FshIdxr,y,f)]22σ2ObsFshIdx) L(log(\\text{ObsFshIdx}_{r,y,f})) = \\lambda_{\\text{ObsFshIdx}} \\frac{1}{\\sqrt{2\\pi} \\sigma^{\\text{ObsFshIdx}}} \\exp(-\\frac{[log(\\text{ObsFshIdx}_{r,y,f}) - log(\\text{FshIdx}_{r,y,f})]^2}{2\\sigma^{2^{\\text{ObsFshIdx}}}}) ObsFshIdxr,y,f\\text{ObsFshIdx}_{r,y,f} observed fishery indices σ2ObsFshIdx\\sigma^{2^{\\text{ObsFshIdx}}} describes variance fishery index (can estimated theoretically known). λObsFshIdx\\lambda_{\\text{ObsFshIdx}} represents likelihood weight applied fishery indices (ideally used set value 1 allow model objectively weight data sources using specified variance). Similarly, survey indices fit assuming lognormal likelihod: L(log(ObsSrvIdxr,y,sf))=λObsSrvIdx12πσObsSrvIdxexp(−[log(ObsSrvIdxr,y,sf)−log(SrvIdxr,y,sf)]22σ2ObsSrvIdx) L(log(\\text{ObsSrvIdx}_{r,y,sf})) = \\lambda_{\\text{ObsSrvIdx}} \\frac{1}{\\sqrt{2\\pi} \\sigma^{\\text{ObsSrvIdx}}} \\exp(-\\frac{[log(\\text{ObsSrvIdx}_{r,y,sf}) - log(\\text{SrvIdx}_{r,y,sf})]^2}{2\\sigma^{2^{\\text{ObsSrvIdx}}}}) ObsSrvIdxr,y,sf\\text{ObsSrvIdx}_{r,y,sf} observed survey indices σ2ObsSrvIdx\\sigma^{2^{\\text{ObsSrvIdx}}} describes variance survey index (can estimated theoretically known). λObsSrvIdx\\lambda_{\\text{ObsSrvIdx}} represents likelihood weight applied survey indices (ideally used set value 1 allow model objectively weight data sources using specified variance).","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishery-and-survey-compositions","dir":"Articles","previous_headings":"Observation Models and Equations > Observation Likelihoods","what":"Fishery and Survey Compositions","title":"Description of Model Equations","text":"present, total 3 multivariate likelihoods available use fit composition data. include multinomial, Dirichlet-multinomial, logistic-normal likelihoods. case multinomial likelihood, following expression invoked: L((ObsCompositionDatar,y,f)=λObsCompositionData⋅ISS⋅∏b=1nbEbOb L((\\text{ObsCompositionData}_{r,y,f}) = \\lambda_{\\text{ObsCompositionData}} \\cdot ISS \\cdot \\prod_{b = 1}^{n_b} E_b^{O_b}   ISSISS input sample size determines initial weight apply given composition dataset, λObsCompositionData\\lambda_{\\text{ObsCompositionData}} weight apply input sample size form iterative re-weighting process (e.g., Francis). EbE_b describes expected values given bin bb, ObO_b describes observed values. Dirichlet-multinomial likelihood (linear parameterization) assumed, following expression used: L(ObsCompositionDatar,y,f)=λObsCompositionData⋅Γ(ISS+1)∏bISS⋅Ob+1Γ(θ⋅ISS)Γ(ISS+θ⋅ISS)∏b=1nbΓ(ISS⋅Ob+θ⋅ISS⋅Eb)θ⋅ISS⋅Eb L(\\text{ObsCompositionData}_{r,y,f}) = \\lambda_{\\text{ObsCompositionData}} \\cdot \\frac{\\Gamma(ISS + 1)}{\\prod_b ISS \\cdot O_b + 1} \\frac{\\Gamma(\\theta \\cdot ISS)}{\\Gamma(ISS + \\theta \\cdot ISS)} \\prod_{b = 1}^{n_b} \\frac{\\Gamma(ISS \\cdot O_b + \\theta \\cdot ISS \\cdot E_b)}{\\theta \\cdot ISS \\cdot E_b} θ\\theta represents overdispersion parameter input sample size can adjusted obtain effective sample size (ESSESS): ESS=11+θ+ISSθ1+θ ESS = \\frac{1}{1 + \\theta} + ISS \\frac{\\theta}{1 + \\theta} Thus, θ\\theta large (θ>>ISS\\theta >> ISS), ESS−>ISSESS -> ISS, θ\\theta small (θ<<ISS\\theta << ISS) θ\\theta approximate ratio ESSESS ISSISS. Lastly, logistic-normal likelihood can also invoked, several covariance structures can parameterized. ’s simplest form, iid covariance can specified: 𝚺=𝐈⋅θ2 \\boldsymbol{\\Sigma} = \\boldsymbol{} \\cdot \\theta^2 𝚺\\boldsymbol{\\Sigma} covariance structure scaled θ2\\theta^2 allow overdispersion inter-annual variation weighting. 𝐈\\boldsymbol{} identity matrix dimensioned nb−1⋅nb−1n_b - 1 \\cdot n_b - 1. first-order autoregressive process can also specified across ages: 𝚺=𝐑𝐚⋅θ2 \\boldsymbol{\\Sigma} = \\boldsymbol{R_a} \\cdot \\theta^2 𝐑𝐚\\boldsymbol{R_a} matrix representing first-order autoregressive process. Two-dimensional autoregression can also specified across ages sexes: 𝚺=𝐑𝐚⊗𝐑𝐬⋅θ2 \\boldsymbol{\\Sigma} = \\boldsymbol{R_a} \\otimes \\boldsymbol{R_s} \\cdot \\theta^2 𝐑𝐬\\boldsymbol{R_s} case constant correlation matrix sex. Following specification covariance matrix, logistic transformation conducted observed expected compositions, multivariate normal likelihood invoked logistic random variables: Ob′=log(O−nb)−log(Onb)Eb′=log(E−nb)−log(Enb)L(ObsCompositionDatar,y,f)=λObsCompositionData⋅2π−k/2det(𝚺)−1/2exp[−12(Ob′−Eb′)T𝚺−1(Ob′−Eb′)] \\begin{aligned} O^{'}_b = log(O_{-n_b}) - log(O_{n_b}) \\\\ E^{'}_b = log(E_{-n_b}) - log(E_{n_b}) \\\\ L(\\text{ObsCompositionData}_{r,y,f}) = \\lambda_{\\text{ObsCompositionData}} \\cdot 2\\pi^{-k/2} \\text{det}(\\boldsymbol{\\Sigma})^{-1/2} \\exp\\left[-\\frac{1}{2} (O^{'}_b - E^{'}_b)^T \\boldsymbol{\\Sigma}^{-1}(O^{'}_b - E^{'}_b)\\right] \\end{aligned} Ob′O^{'}_b Eb′E^{'}_b observed expected compositions logistic additive transformation.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"structuring-observed-and-expected-compositions","dir":"Articles","previous_headings":"Observation Models and Equations > Observation Likelihoods > Fishery and Survey Compositions","what":"Structuring Observed and Expected Compositions","title":"Description of Model Equations","text":"Four options can used structuring age length compositions. : Aggregated age length compositions across regions sexes, ‘Split’ age length compositions region sex (.e., implicit information region sex-ratios), ‘Split’ age length compositions region, coupled ‘Joint’ compositions across sexes (.e., implicit information sex-ratios, information regional-ratios), first option (termed ‘Aggregated’), observed expected age length compositions within given year fleet (survey fishery) aggregated across sexes regions. simplicity, observed age length compositions denoted ,b,sO_{r,b,s} expected age length compositions denoted Er,b,sE_{r,b,s}. , bb represents either age length bins. Note observed compositions need aggregated prior modelling process (need normalized, normalized within modeling process). Expected compositions first normalized dividing sum given region /sex proportions sum 1 within given region given sex. Following , average Er,b,sE_{r,b,s} across regions sexes taken. age compositions ageing error associated , expected age compositions multiplied ageing-error matrix derive compositions fit . Note non-square (e.g., rectangular) ageing-error matrix can provided reduce number modelled ages align number observed composition ages. approach common many rockfish species Alaska, model includes greater number ages represented observed compositions. allows accurate representation population dynamics (modelling ages), even though age estimates older fish often unreliable. process described equations : Ob=Ob∑bObEb=1ns⋅nr∑=1ns⋅nrEr,b,s∑bEr,b,s𝐄=𝐄𝐀𝐠𝐞𝐄𝐫𝐫𝐨𝐫𝐎={Ob|b=1,…,nb}𝐄={Eb|b=1,…,nb} \\begin{aligned} O_b = \\frac{O_b}{\\sum_b O_b} \\\\ E_b = \\frac{1}{n_s \\cdot n_r} \\sum_{= 1}^{n_s \\cdot n_r} \\frac{E_{r,b,s}}{\\sum_b E_{r,b,s}} \\\\ \\boldsymbol{E} = \\boldsymbol{E} \\textbf{AgeError} \\\\ \\boldsymbol{O} = \\left\\{ O_b \\;\\middle|\\; b = 1, \\ldots, n_b \\right\\} \\\\ \\boldsymbol{E} = \\left\\{ E_b \\;\\middle|\\; b = 1, \\ldots, n_b \\right\\} \\end{aligned} second option (termed ‘SplitRegionSplitSex’), observed expected compositions given year fleet normalized sum 1 within given sex region. age compositions, ageing-error matrix can applied given region sex. process mathematically described following equation: ,b,s=,b,s∑bOr,b,sEr,b,s=Er,b,s∑bEr,b,s𝐄r,s=𝐄r,s𝐀𝐠𝐞𝐄𝐫𝐫𝐨𝐫𝐎r,s={,b,s|b=1,…,nb}𝐄r,s={Er,b,s|b=1,…,nb} \\begin{aligned} O_{r,b,s} = \\frac{O_{r,b,s}}{\\sum_b O_{r,b,s}} \\\\ E_{r,b,s} = \\frac{E_{r,b,s}}{\\sum_b E_{r,b,s}} \\\\ \\boldsymbol{E}_{r,s} = \\boldsymbol{E}_{r,s} \\textbf{AgeError} \\\\ \\boldsymbol{O}_{r,s} = \\left\\{ O_{r,b,s} \\;\\middle|\\; b = 1, \\ldots, n_b \\right\\} \\\\ \\boldsymbol{E}_{r,s} = \\left\\{ E_{r,b,s} \\;\\middle|\\; b = 1, \\ldots, n_b \\right\\}  \\end{aligned} third option (termed ‘SplitRegionJointSex’), observed expected compositions given year fleet normalized sum 1 within given region, jointly across sexes. age compositions, ageing-error matrix can extended accommodate dimensioned nbns⋅nbnsn_bn_s \\cdot n_bn_s, given following equations: ,b,s=,b,s∑b,sOr,b,sEr,b,s=Er,b,s∑b,sEr,b,s𝐄r=(𝐄r)T(𝐈⊗𝐀𝐠𝐞𝐄𝐫𝐫𝐨𝐫)𝐎r={,b,s|b=1,…,nb;s=1,2}𝐄r={Er,b,s|b=1,…,nb;s=1,2} \\begin{aligned} O_{r,b,s} = \\frac{O_{r,b,s}}{\\sum_{b,s} O_{r,b,s}} \\\\ E_{r,b,s} = \\frac{E_{r,b,s}}{\\sum_{b,s} E_{r,b,s}} \\\\ \\boldsymbol{E}_{r} = (\\boldsymbol{E}_r)^T (\\textbf{} \\otimes \\textbf{AgeError}) \\\\ \\boldsymbol{O}_r = \\left\\{ O_{r,b,s} \\;\\middle|\\; b = 1,\\ldots,n_b;\\; s = 1,2 \\right\\} \\\\ \\boldsymbol{E}_r = \\left\\{ E_{r,b,s} \\;\\middle|\\; b = 1,\\ldots,n_b;\\; s = 1,2 \\right\\}  \\end{aligned}","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"tagging","dir":"Articles","previous_headings":"Observation Models and Equations > Observation Likelihoods","what":"Tagging","title":"Description of Model Equations","text":"generalized assessment model option fit tagging data, tracks tag cohort across regions, ages, sexes. However, many cases, age sex information may available given species. Thus, tagging data include age sex information, user must specify tagged individuals occupy first age class first sex category starting point. Users also specify tagging data fit via pooling across ages sexes using move_age_tag_pool move_sex_tag_pool data inputs scenario information available distinguish age-sex-specific tag recaptures. Given tagging data highly multi-dimensional, use data can greatly increase computational demand model. Therefore, partially reduce demands, model allows pooling data across age sex partitions. process groups observations expected values respective age blocks. recommended age-varying movement estimated age-blocks, pooling tag data align age-blocks. Moreover, important note tag recoveries fit pooling observations expected values, likelihood values alternative pooling parameterizations directly comparable. Additionally, central tenant using tagging data tagged individuals representative overall population individuals need well-mixed. address well-mixed assumption, model allows specification mixing period, specifies time--liberty tags fit . example, individuals well-mixed followed release, mixing period specified value 1. contrast, individuals well-mixed 2 years, mixing period specified value 2. Therefore, model requires entire history given tag cohort input (starting initial release recapture year). Currently, several tag likelihoods can utilized describe tag recapture data. options : 1) Poisson likelihood, 2) Negative Binomial likelihood, 3) Multinomial likelihood, assuming release conditioned dynamics, 4) Multinomial likelihood, assuming recapture conditioned dynamics Poisson likelihood tag recaptures given following expression: L(ObsRecapr,y,,s)=exp(−Recapr,y,,sk)(Recapr,y,,sk)ObsRecapr,y,,sObsRecapr,y,,s! L(\\text{ObsRecap}_{r,y,,s}) = \\frac{\\exp(-\\text{Recap}^k_{r,y,,s})(\\text{Recap}^k_{r,y,,s})^{\\text{ObsRecap}_{r,y,,s}}}{\\text{ObsRecap}_{r,y,,s}!} Recapr,y,,sk\\text{Recap}^k_{r,y,,s} observed tag recaptures. pooling specified, observed recoveries fit summing observed expected tag recoveries across respective age sex groups. model, likelihood specified log space, factorial term denominator specified gamma function, allowing recoveries fit non-integer terms (case age-length key used convert observed lengths ages). negative binomial likelihood tag recaptures given expression: L(ObsRecapr,y,,sk)=Γ(ObsRecapr,y,,s+η)Γ(η)Γ(ObsRecapr,y,,s+1)(Recapr,y,,sRecapr,y,,s+η)ObsRecapr,y,,s(ηRecapr,y,,sk+η)η L(\\text{ObsRecap}^k_{r,y,,s}) = \\frac{\\Gamma(\\text{ObsRecap}_{r,y,,s} + \\eta)}{\\Gamma(\\eta)\\Gamma(\\text{ObsRecap}_{r,y,,s} + 1)} \\left(\\frac{\\text{Recap}_{r,y,,s}}{\\text{Recap}_{r,y,,s} + \\eta}\\right)^{\\text{ObsRecap}_{r,y,,s}} \\left(\\frac{\\eta}{\\text{Recap}_{r,y,,s}^k + \\eta}\\right)^\\eta η\\eta represents overdispersion parameter tagging data. multinomial release conditioned likelihood tag recoveries fits recaptured non-recaptured states. Proportions observed (PObsRecapr,y,,sk\\text{PObsRecap}^k_{r,y,,s}) expected recaptured (PRecapr,y,,sk\\text{PRecap}^k_{r,y,,s}) individuals given : PRecapr,y,,sk=Recapr,y,,skInitTagkPObsRecapr,y,,sk=ObsRecapr,y,,skInitTagK \\begin{aligned} \\text{PRecap}^k_{r,y,,s} = \\frac{\\text{Recap}^k_{r,y,,s}}{\\text{InitTag}^k} \\\\  \\text{PObsRecap}^k_{r,y,,s} = \\frac{\\text{ObsRecap}^k_{r,y,,s}}{\\text{InitTag}^K}  \\end{aligned} InitTagk\\text{InitTag}^k total tags released given tag cohort given release region year. Non-recaptured states can written : PNonRecapk=1−∑r∑y∑∑sPRecapr,y,,skPObsNonRecapk=1−∑r∑y∑∑sPObsNonRecapr,y,,sk \\begin{aligned} \\text{PNonRecap}^k = 1 - \\sum_r \\sum_y \\sum_a \\sum_s \\text{PRecap}^k_{r,y,,s} \\\\  \\text{PObsNonRecap}^k = 1 - \\sum_r \\sum_y \\sum_a \\sum_s \\text{PObsNonRecap}^k_{r,y,,s} \\end{aligned} PNonRecapk\\text{PNonRecap}^k PObsNonRecapk\\text{PObsNonRecap}^k expected observed non-recapture proportions, respectively. Rewriting recaptured non-recaptured states observed expected values gives: 𝐄Taggingk={𝐏𝐑𝐞𝐜𝐚𝐩k,PNonRecapk}𝐎Taggingk={𝐏𝐎𝐛𝐬𝐑𝐞𝐜𝐚𝐩k,PObsNonRecapk} \\begin{aligned} \\boldsymbol{E}^k_{\\text{Tagging}} = \\{\\textbf{PRecap}^k, \\text{PNonRecap}^k \\} \\\\ \\boldsymbol{O}^k_{\\text{Tagging}} = \\{\\textbf{PObsRecap}^k, \\text{PObsNonRecap}^k \\} \\end{aligned} Following , standard multinomial likelihood aforementioned vectors can written : L(ObsRecapr,y,,sk)=InitTagk∏(Ei,Taggingk)Oi,Taggingk L(\\text{ObsRecap}^k_{r,y,,s}) = \\text{InitTag}^k \\prod_i (E^k_{,\\text{Tagging}})^{O^k_{,\\text{Tagging}}} ii indexes given element Ei,TaggingkE^k_{,\\text{Tagging}} Oi,TaggingkO^k_{,\\text{Tagging}}. multinomial recapture conditioned likelihood tag recoveries assumes tag shedding, tag induced mortality, tag reporting rates spatially-invariant, given terms cancel denominator. Thus, terms need specified estimated assuming likelihood. following expression used transform observed expected recaptured individuals proportions: PRecapr,y,,sk=Recapr,y,,sk∑r∑∑sRecapr,y,,skPObsRecapr,y,,sk=ObsRecapr,y,,sk∑r∑∑sObsRecapr,y,,skTotRecapyk=∑r∑∑sObsRecapr,y,,sk \\begin{aligned} \\text{PRecap}^k_{r,y,,s} = \\frac{\\text{Recap}^k_{r,y,,s}}{\\sum_r\\sum_a\\sum_s \\text{Recap}^k_{r,y,,s}} \\\\ \\text{PObsRecap}^k_{r,y,,s} = \\frac{\\text{ObsRecap}^k_{r,y,,s}}{\\sum_r\\sum_a\\sum_s \\text{ObsRecap}^k_{r,y,,s}} \\\\ \\text{TotRecap}_y^k = \\sum_r\\sum_a\\sum_s \\text{ObsRecap}^k_{r,y,,s}  \\end{aligned} recapture probabilities normalized sum recaptures given year TotRecapyk\\text{TotRecap}_y^k total number observed recaptures within given year. multinomial likelihood expressed : L(ObsRecapr,y,,sk)=TotRecapyk∏(PRecapr,y,,sk)PObsRecapr,y,,sk L(\\text{ObsRecap}^k_{r,y,,s}) = \\text{TotRecap}_y^k \\prod_i (\\text{PRecap}^k_{r,y,,s})^{\\text{PObsRecap}^k_{r,y,,s}}","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"priors","dir":"Articles","previous_headings":"Observation Models and Equations","what":"Priors","title":"Description of Model Equations","text":"Several priors available help inform estimation parameters. particular, priors available natural mortality, catchability, steepness, movement, tag reporting rates.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"natural-mortality","dir":"Articles","previous_headings":"Observation Models and Equations > Priors","what":"Natural Mortality","title":"Description of Model Equations","text":"natural mortality, lognormal prior can invoked: P(log(NatMorts=1)=12πσNatMortPriorexp(−[log(NatMorts=1)−log(Natmorts=1Prior)]22σ2NatMortPrior) P(log(NatMort_{s = 1}) = \\frac{1}{\\sqrt{2\\pi} \\sigma^{\\text{NatMortPrior}}} \\exp(-\\frac{[log(NatMort_{s = 1}) - log(Natmort_{s = 1}^{\\text{Prior}})]^2}{2\\sigma^{2^{\\text{NatMortPrior}}}}) lognormal prior invoked first sex (female sex-structured), σ2NatMortPrior\\sigma^{2^{\\text{NatMortPrior}}} represents variance prior, Natmorts=1PriorNatmort_{s = 1}^{\\text{Prior}} represents prior value .","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishery-and-survey-catchability","dir":"Articles","previous_headings":"Observation Models and Equations > Priors","what":"Fishery and Survey Catchability","title":"Description of Model Equations","text":"fishery survey catchability, lognormal prior can similarly used: P(log(qr,y,f))=12πσr,y,fqPriorexp(−[log(qr,y,f)−log(qr,y,fPrior)]22σr,y,f2qPrior) P(log(q_{r,y,f})) = \\frac{1}{\\sqrt{2\\pi} \\sigma_{r,y,f}^{\\text{qPrior}}} \\exp(-\\frac{[log(q_{r,y,f}) - log(q_{r,y,f}^{\\text{Prior}})]^2}{2\\sigma^{2^{\\text{qPrior}}}_{r,y,f}}) σ2qPrior\\sigma^{2^{\\text{qPrior}}} represents variance prior, qr,y,fqPriorq_{r,y,f}^{\\text{qPrior}} represents prior value .","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"steepness","dir":"Articles","previous_headings":"Observation Models and Equations > Priors","what":"Steepness","title":"Description of Model Equations","text":"Beverton-Holt stock recruitment relationship assumed, priors steepness can imposed. Currently, scaled beta prior (bounded 0.2 1) can invoked: =(hrPriorMu−0.21−0.2)(hrPriorSD1−0.2)2b=[1−(hrPriorMu−0.21−0.2)][(hrPriorSD1−0.2)2]P(hr)=Γ()Γ(b)Γ(+b)hra−1(1−hr)b−1 \\begin{aligned} = \\left(\\frac{h^{\\text{PriorMu}}_r - 0.2}{1 - 0.2}\\right) \\left(\\frac{h^{\\text{PriorSD}}_r }{1 - 0.2}\\right)^2 \\\\  b = \\left[1 - \\left(\\frac{h^{\\text{PriorMu}}_r - 0.2}{1 - 0.2}\\right)\\right] \\left[\\left(\\frac{h^{\\text{PriorSD}}_r }{1 - 0.2}\\right)^2\\right] \\\\  P(h_r) = \\frac{\\Gamma()\\Gamma(b)}{\\Gamma(+b)}h^{-1}_r(1-h_r)^{b-1} \\end{aligned} hrPriorMuh^{\\text{PriorMu}}_r represents prior mean steepness value given region (bounded 0.2 1) hrPriorSDh^{\\text{PriorSD}}_r standard deviation priors. aa bb shape parameters beta distribution.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"movement","dir":"Articles","previous_headings":"Observation Models and Equations > Priors","what":"Movement","title":"Description of Model Equations","text":"Priors movement parameters can also invoked, priors imposed rows movement matrix (opposed multinomial logit parameters). Dirichlet prior can invoked: P(Mk,y,,s)=Γ(∑j=1nrαj,y,,s)∏j=1nrΓ(αj,y,,s)∏j=1nrMk,j,y,,sαj,y,,s−1 P(M_{k,y,,s}) = \\frac{\\Gamma(\\sum_{j=1}^{n_r} \\alpha_{j,y,,s})}{\\prod_{j=1}^{n_r}\\Gamma(\\alpha_{j,y,,s})} \\prod_{j=1}^{n_r}M_{k,j,y,,s}^{\\alpha_{j,y,,s}-1} jj indexes movement towards given region αj,y,,s\\alpha_{j,y,,s} Dirichlet prior parameters. priors flexibility specified movement individuals towards region j year, age, sex partition. user specify uniform prior, values αj,y,,s\\alpha_{j,y,,s} values. Increasing values αj,y,,s\\alpha_{j,y,,s} increases concentration (.e., weight prior).","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"tag-reporting-rates","dir":"Articles","previous_headings":"Observation Models and Equations > Priors","what":"Tag Reporting Rates","title":"Description of Model Equations","text":"Two types priors can specified facilitating estimation tag reporting rates. particular, first type prior includes symmetric beta parameterization, given following: P(βr,y)=(βr,y+1e−4)βPriorScale(1−βr,y+1e−4)βPriorScale P(\\beta_{r,y}) = (\\beta_{r,y} + 1e-4)^{\\beta^{\\text{PriorScale}} } (1 - \\beta_{r,y} + 1e-4)^{\\beta^{\\text{PriorScale}}} βPriorScale\\beta^{\\text{PriorScale}} determines scale tag reporting parameter controls strongly penalize estimates approach bounds (0,1)(0,1). Larger values βPriorScale\\beta^{\\text{PriorScale}} result larger penalties. contrast, standard beta distribution can also specified, shape parameters aa bb. given following expression: =βPriorMu(βPriorSD)2b=[1−βPriorMu(βPriorSD)2]P(βr,y)=Γ()Γ(b)Γ(+b)βr,ya−1(1−βr,y)b−1 \\begin{aligned} = \\frac{\\beta^{\\text{PriorMu}}}{\\left(\\beta^{\\text{PriorSD}}\\right)^2} \\\\ b = \\left[\\frac{1 - \\beta^{\\text{PriorMu}}}{\\left(\\beta^{\\text{PriorSD}}\\right)^2}\\right] \\\\ P(\\beta_{r,y}) = \\frac{\\Gamma()\\Gamma(b)}{\\Gamma(+b)} \\, \\beta_{r,y}^{-1} \\left(1 - \\beta_{r,y}\\right)^{b-1} \\end{aligned} βPriorMu\\beta^{\\text{PriorMu}} defines mean distribution, βPriorSD\\beta^{\\text{PriorSD}} defines standard deviation beta distribution. Currently, tag reporting rate priors region year-specific (.e., value applied across regions years).","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"initpen","dir":"Articles","previous_headings":"Observation Models and Equations > Penalties (Process Error)","what":"Initial Age Deviations","title":"Description of Model Equations","text":"Estimation initial age deviations constrained normal distribution: ϵr,yInit∼N(0,σInit2) \\epsilon_{r,y}^{Init} \\sim N\\left(0,\\sigma^2_{Init}\\right) mean 0 variance σInit2\\sigma^2_{Init}. SPoRC, can either estimated penalized likelihood framework, variance parameter fixed known value ϵr,yInit\\epsilon_{r,y}^{Init} estimated fixed-effects. Conversely, random effects framework can also used ϵr,yInit\\epsilon_{r,y}^{Init} treated random effects integrated using Laplace approximation.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"recruitmentpen","dir":"Articles","previous_headings":"Observation Models and Equations > Penalties (Process Error)","what":"Recruitment","title":"Description of Model Equations","text":"Similarly, estimation recruitment deviations constrained normal distribution: ϵr,yRec∼N(0,σRec2) \\epsilon_{r,y}^{Rec} \\sim N\\left(0,\\sigma^2_{Rec}\\right) mean 0 variance σRec2\\sigma^2_{Rec}. , recruitment deviations can either estimated penalized likelihood framework, variance parameter fixed known value ϵr,yRec\\epsilon_{r,y}^{Rec} estimated fixed-effects. Conversely, ϵr,yRec\\epsilon_{r,y}^{Rec} can also treated random effects integrated using Laplace approximation.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"fishmortpen","dir":"Articles","previous_headings":"Observation Models and Equations > Penalties (Process Error)","what":"Fishing Mortality","title":"Description of Model Equations","text":"Fishing mortality deviations also constrained normal distribution: ϵr,y,fFmort∼N(0,σFmort2) \\epsilon_{r,y,f}^{Fmort} \\sim N\\left(0,\\sigma^2_{Fmort}\\right) σFmort2\\sigma^2_{Fmort} fixed arbitrary value ensure observed catches fit adequately. Given values observed catch generally known negligible error, value specified σFmort2\\sigma^2_{Fmort} inconsequential. generally necessary constrain fishing mortality deviations ensure parameters identifiable. Currently, σFmort2\\sigma^2_{Fmort} can specified either random effects penalized likelihood. penalized likelihood framework, value fixed 1, although can easily modified user.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"selpen","dir":"Articles","previous_headings":"Observation Models and Equations > Penalties (Process Error)","what":"Selectivity (Fishery and Survey)","title":"Description of Model Equations","text":"Several options can specified parameterize continuous time-varying selectivity. forms, users can specify deviations occur penalized likelihood framework, random effects framework. simplest form represents iid deviations selectivity parameter ii given functional form: ϵr,y,,s,fSel∼N(0,σi,Sel2) \\epsilon_{r,y,,s,f}^{Sel} \\sim N\\left(0,\\sigma^2_{,Sel}\\right)  σi,Sel2\\sigma^2_{,Sel} variance selectivity parameter ii (e.g., a50a^{50}). Using form, selectivity assumed vary across time parametric manner. Parametric selectivity deviations can also specified assuming random walk process: ϵr,y,,s,fSel{∼N(0,25),y=1∼N(ϵr,y−1,,s,fSel,σi,Sel2)y>1  \\begin{aligned} \\epsilon_{r,y,,s,f}^{Sel} \\begin{cases} \\sim N\\left(0,25\\right), & \\text{} y = 1 \\\\ \\sim N\\left(\\epsilon_{r,y-1,,s,f}^{Sel},\\sigma^2_{,Sel}\\right) & \\text{} y > 1 \\end{cases} \\end{aligned} first parameter deviation initialized broad distribution (essentially fixed effect parameter), subsequent deviations dependent previous time point, constrained estimable variance given selectivity parameter (σi,Sel2\\sigma^2_{,Sel}). iid random walk deviations, smoothness penalty applied onto selectivity values induce temporal stability: Pyear smoothness=∑s=1S∑y=2Y∑b=1B(log(Sely,b,s)−log(Sely−1,b,s))2 P_{\\text{year smoothness}} = \\sum_{s=1}^S\\sum_{y=2}^{Y} \\sum_{b=1}^{B} (log(Sel_{y,b,s}) - log(Sel_{y-1,b,s}))^2 Semi-parametric deviations can also specified, deviations can occur across years, bins (age length), cohorts. semi-parametric deviations, curvature penalty applied selectivity values across bins across years regularity: Pbin curvature=∑s=1S∑y=1Y∑b=2b−1(log(Sely,b+1,s)−2log(Sely,b,s)−log(Sely,b−1,s))2Pyear curvature=∑s=1S∑y=2Y−1∑b=1B(log(Sely+1,b,s)−2log(Sely,b,s)−log(Sely−1,b,s))2 \\begin{aligned} P_{\\text{bin curvature}} = \\sum_{s=1}^S\\sum_{y=1}^{Y} \\sum_{b=2}^{b-1} (log(Sel_{y,b+1,s}) - 2log(Sel_{y,b,s}) - log(Sel_{y,b-1,s}))^2 \\\\ P_{\\text{year curvature}} = \\sum_{s=1}^S\\sum_{y=2}^{Y-1} \\sum_{b=1}^{B} (log(Sel_{y+1,b,s}) - 2log(Sel_{y,b,s}) - log(Sel_{y-1,b,s}))^2 \\\\ \\end{aligned} Two options can specified allow deviations across dimensions ages, years, cohorts (note possible age-based selectivity specified), include marginal stationary conditional non-stationary variance option. primary difference two marginal variance version closed form solution 𝛀\\boldsymbol{\\Omega} (see equations ) needs iteratively solved, conditional variance version closed form solution. following equations describe conditional variance version: 𝛜r,s,fSel∼MVN(0,𝐐) \\boldsymbol{\\epsilon}_{r,s,f}^{Sel} \\sim \\text{MVN}(0,\\textbf{Q}) process error arises multivariate normal distribution precision matrix (QQ; inverse covariance). , QQ constructed : 𝐐=(𝐈−(𝐁)T)𝛀(𝐈−𝐁)diag(𝛀)=σSel−2 \\begin{aligned} \\textbf{Q} = (\\textbf{} - (\\textbf{B})^T) \\boldsymbol{\\Omega} (\\textbf{} - \\textbf{B}) \\\\ \\text{diag}(\\boldsymbol{\\Omega}) = \\sigma_{Sel}^{-2} \\end{aligned} 𝐈\\textbf{} identity matrix 𝛀\\boldsymbol{\\Omega} diagonal matrix determines variance multivariate normal process. 𝐁\\textbf{B} square matrix representing partial effect 𝛜r,s,fSel\\boldsymbol{\\epsilon}_{r,s,f}^{Sel} preceeding ages /years, governing partial correlation coefficients ages, years, cohorts. demonstrate formulation 𝐁\\textbf{B}, simplified example provided rows representing ages aϵ{1,2}\\epsilon \\{1,2\\} columns representing years tϵ{1,2}t \\epsilon \\{1,2\\}. example, 𝐁\\textbf{B} 4x44 x 4 matrix, rows columns represent combinations age year. instance, B1,2B_{1,2} captures correlation within year age 1 year 1, age 2 year 1, whereas B4,1B_{4,1} constructs correlation within cohort age 1 year 1, age 2 year 2: 𝐁=[1000ρy000ρa000ρcρaρy0] \\begin{aligned} \\mathbf{B} = \\begin{bmatrix}  1 & 0 & 0 & 0 \\\\ \\rho_y & 0 & 0 & 0 \\\\ \\rho_a & 0 & 0 & 0 \\\\ \\rho_c & \\rho_a & \\rho_y & 0 \\end{bmatrix} \\end{aligned} , ρy\\rho_y, ρa\\rho_a, ρc\\rho_c parameters describing partial autocorrelation among years within given age, among ages within given year, years within cohort, respectively. Lastly, semi-parametric deviations can also specified vary across years bins (.e., two-dimensional manner; option can utilized age-length-based selectivity). Similar process described , selectivity deviations constrained precision matrix QQ, following multivarite normal process: 𝛜r,s,fSel∼MVN(0,𝐐−1)𝐐−1=σSel2(1−ρy)2(1−ρb)2𝐑y⊗𝐑b \\begin{aligned} \\boldsymbol{\\epsilon}_{r,s,f}^{Sel} \\sim \\text{MVN}(0,\\textbf{Q}^{-1}) \\\\ \\textbf{Q}^{-1} = \\frac{\\sigma^2_{Sel}}{(1-\\rho_y)^2(1-\\rho_b)^2}\\textbf{R}_y \\otimes \\textbf{R}_b \\\\  \\end{aligned} determined Kronecker product first-order autoregressive process across bins 𝐑b\\textbf{R}_b across years 𝐑y\\textbf{R}_y.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/c_model_equations.html","id":"movepen","dir":"Articles","previous_headings":"Observation Models and Equations > Penalties (Process Error)","what":"Movement Deviations","title":"Description of Model Equations","text":"Continuous movement deviations can also estimated random effects penalized likelihood framework. Currently, iid deviations allowed, deviations placed upon fixed-effects movement parameters logit space: ωk,−1,y,,s=ωk,−1,s+ϵk,j,y,,sMoveϵk,−1,y,,sMove∼N(0,σk,,s2) \\begin{aligned} \\omega_{k,-1,y,,s} = \\omega_{k,-1,s} + \\epsilon^{\\text{Move}}_{k,j,y,,s} \\\\ \\epsilon^{\\text{Move}}_{k,-1,y,,s} \\sim N(0,\\sigma^2_{k,,s}) \\end{aligned} ϵk,−1,y,,sMove\\epsilon^{\\text{Move}}_{k,-1,y,,s} movement deviatons logit space. sum 1 constraint, movement deviations estimated nr−1n_r - 1. Deviations arise normal distribution process variation constrained σk,,s2\\sigma^2_{k,,s}. Thus, process variance can distinct origin region age (although parameterizations share parameters across origin region, ages, sexes also allowed). Similarly, process deviations can invoked across years, ages, years ages, years, ages, sexes, etc. flexibility maintained given computational demand estimating random effects movement.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-model-dimensions","dir":"Articles","previous_headings":"","what":"Setup Model Dimensions","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"initially set model , input list containing data list, parameter list, mapping list needs constructed. aided function Setup_Mod_Dim, users specify vector years, ages, lengths. Additionally, users need specify number regions modelled (n_regions), number sexes modelled (n_sexes), number fishery fleets (n_fish_fleets), number survey fleets (n_srv_fleets)","code":"input_list <- Setup_Mod_Dim(years = 1:length(sgl_rg_sable_data$years), # vector of years                              # (corresponds to year 1960 - 2024)                             ages = 1:length(sgl_rg_sable_data$ages), # vector of ages                             lens = seq(41,99,2), # number of lengths                             n_regions = 1, # number of regions                             n_sexes = sgl_rg_sable_data$n_sexes, # number of sexes == 1,                             # female, == 2 male                             n_fish_fleets = sgl_rg_sable_data$n_fish_fleets, # number of fishery                             # fleet == 1, fixed gear, == 2 trawl gear                             n_srv_fleets = sgl_rg_sable_data$n_srv_fleets, # number of survey fleets                             verbose = FALSE                             )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-recruitment-dynamics","dir":"Articles","previous_headings":"","what":"Setup Recruitment Dynamics","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"Following initialization input_list, can pass created object next function (Setup_Mod_Rec) parameterize recruitment dynamics. case Alaska sablefish, recruitment parameterized : Mean Recruitment, stock recruitment relationship assumed, recruitment bias ramp used, following methods Methot Taylor 2011 (do_bias_ramp = 1), Two values sigmaR used, first value represents early period sigmaR, fixed 0.4, second value represents late period sigmaR, freely estimated (although fixed). Recruitment deviations estimated penalized likelihood framework, Recruitment deviations estimated years, except terminal year, Recruitment sex-ratios fixed 0.5 sex, Initial age structure derived assuming geometric series (init_age_strc = 1; alternative iterating age structure equilibrium init_age_strc = 0), 10% fraction mean fishing mortality rate assumed initalizing age structure.","code":"input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             do_rec_bias_ramp = 1, # do bias ramp                              # (0 == don't do bias ramp, 1 == do bias ramp)                             # breakpoints for bias ramp                              # (1 == no bias ramp - 1960 - 1980,                              # 2 == ascending limb of bias ramp - 1980 - 1990,                             # 3 == full bias correction - 1990 - 2022, == 4                              # no bias correction - terminal year of                              # recruitment estimate)                             bias_year = c(length(1960:1979),                                           length(1960:1989),                                            (length(1960:2023) - 5),                                            length(1960:2024) - 2) + 1,                             sigmaR_switch = as.integer(length(1960:1975)),                              # when to switch from early to late sigmaR                             dont_est_recdev_last = 1,                              # don't estimate last recruitment deviate                             ln_sigmaR = log(c(0.4, 1.2)),                             rec_model = \"mean_rec\", # recruitment model                             sigmaR_spec = \"fix_early_est_late\",                              # fix early sigmaR, estiamte late sigmaR                             sexratio = as.vector(c(0.5, 0.5)),                              # recruitment sex ratio                             init_age_strc = 1, # how to derive inital age strc                             init_F_prop = 0.1 # fraction of mean F from                              # dominant fleet to apply to initial age strc                             )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-biological-dynamics","dir":"Articles","previous_headings":"","what":"Setup Biological Dynamics","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"Passing input_list updated previous helper function, can parameterize biological dynamics model. Setup_Mod_Biologicals requires data inputs weight--age (WAA) maturity--age (MatAA), dimensioned n_regions, n_years, n_ages, n_sexes. Optional model inputs include single ageing-error matrix AgeingError, dimensioned n_ages, n_ages. can left NULL ageing-error matrix available, model assume identity matrix ageing-error age-composition data. Additionally, size-age transition matrix can supplied length data fit fit_lengths = 1, dimensioned n_regions, n_years, n_lens, n_ages, n_sexes. natural mortality often poorly estimated, Alaska sablefish utilizes priors natural mortality, can specifed using Use_M_prior = 1 argument conjunction M_prior argument. M_prior argument expects vector length 2, first value represents mean prior value second value represents standard deviation prior (lognormal). M_spec argument specifies natural mortality estimated, several options included. case, estimating log natural mortality females, fixing natural mortlaity offset parameter males (accidentally jittered original assessment). Starting values fixed parameters can specified using ..., parameter name supplied, values provided parameter name represent starting value.","code":"input_list <- Setup_Mod_Biologicals(input_list = input_list,                                                                          # Data inputs                                     WAA = sgl_rg_sable_data$WAA,                                      # weight-at-age                                     MatAA = sgl_rg_sable_data$MatAA,                                      # maturity at age                                     AgeingError = as.matrix(sgl_rg_sable_data$age_error),                                     # ageing error                                     SizeAgeTrans = sgl_rg_sable_data$SizeAgeTrans,                                      # size age transition matrix                                                                          # Model options                                     fit_lengths = 1,                                      # fitting length compositions                                     Use_M_prior = 1,                                      # use natural mortality prior                                     M_prior = c(0.1, 0.1),                                     # mean and sd for M prior                                     M_spec = \"est_ln_M_only\",                                     ln_M = log(0.1143034), # starting value for M                                     M_offset = -0.00819813327864                                      # starting value /                                      # fixing Male M offset (accidently jittered                                      # from original assessment)                                     )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-movement-and-tagging-dynamics","dir":"Articles","previous_headings":"","what":"Setup Movement and Tagging Dynamics","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"Given Alaska sablefish assessment single region model, movement dynamics specified. However, users still need define movement dynamics parameterized. case, following code chunk specifies movement estimated (use_fixed_movement = 1), movement identity matrix (Fixed_Movement = NA), recruits move (do_recruits_move = 0). Specification tagging dynamics follow similar fashion since single-region model. necessary updating input_list setting UseTagging argument value 0.","code":"input_list <- Setup_Mod_Movement(input_list = input_list,                                  use_fixed_movement = 1, # don't est move                                  Fixed_Movement = NA, # use identity move                                  do_recruits_move = 0 # recruits don't move                                  ) input_list <- Setup_Mod_Tagging(input_list = input_list,                                 UseTagging = 0                                 )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-catch-and-fishing-mortality","dir":"Articles","previous_headings":"","what":"Setup Catch and Fishing Mortality","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"Following parameterization biological dynamics, fishery dynamics can specified set using Setup_Mod_Catch_and_F function. , input_list gets updated previous helper functions. Users need supply function array observed catches ObsCatch, dimensioned n_regions, n_years, n_fish_fleets. Similarly, users also need specify catch type observations Catch_Type argument. argument expects matrix dimensioned n_years n_fish_fleets, really applicable spatial model (values 0 indicate catch aggregated across regions periods fleets, values 1 indicate catch specific region periods fleets). Thus, single region model, values 1 always supplied. function also expects UseCatch argument specified, dimensioned n_regions, n_years, n_fish_fleets. Essentially, users need fill whether catch fit particular partitions. use cases argument scenarios catch observed value 0, helper function automatically turns estimation fishing mortality deviations partitions. Additional model options specified case study include: 1) whether fishing mortality penalties utilized help estimate deviations Use_F_pen = 1, fix standard deviation catches (sigmaC_spec = 'fix'), constants add catch Catch_Constant = c(0.01, 0.8), length n_fish_fleets. Ideally, Catch_Constant argument needed, since necessary fit catch values 0. cases, users can leave argument NULL, function automatically populate Catch_Constant <- rep(0, input_list$data$n_fish_fleets).","code":"input_list <- Setup_Mod_Catch_and_F(input_list = input_list,                                     # Data inputs                                     ObsCatch = sgl_rg_sable_data$ObsCatch,                                     Catch_Type =                                        array(1, dim = c(length(input_list$data$years),                                                         input_list$data$n_fish_fleets)),                                     UseCatch = sgl_rg_sable_data$UseCatch,                                     # Model options                                     Use_F_pen = 1,                                      # whether to use f penalty, == 0 don't use, == 1 use                                     sigmaC_spec = 'fix',                                     Catch_Constant = c(0.01, 0.8)                                     )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-index-and-composition-data-fishery-and-survey","dir":"Articles","previous_headings":"","what":"Setup Index and Composition Data (Fishery and Survey)","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"involved helper functions used set single region model Setup_Mod_FishIdx_and_Comps, Setup_Mod_SrvIdx_and_Comps, Setup_Mod_Fishsel_and_Q, Setup_Mod_Srvsel_and_Q functions. helper functions essentially facilitate parameterization selectivity catchability fishery survey, compositional likelihood types, composition data structured, types indices used (biomass vs. abundance). fishery survey helper functions described following sections essentially equivalent respect data arguments inputs expected, specified independently fisheries surveys. set fishery indices composition data, users need supply arrays observed fishery indices associated standard errors (ObsFishIdx ObsFishIdx_SE), dimensioned n_regions, n_years, n_fish_fleets. fleets data, can input NA UseFishIdx argument (also dimensioned n_regions, n_years, n_fish_fleets) can used ensure data fit . Similarly, users need supply fishery age composition data length composition data. ObsFishAgeComps ObsFishLenComps dimensioned n_regions, n_years, n_bins (n_ages | n_lens), n_sexes, n_fish_fleets. Data inputs also required denote whether composition data used available thos regions, years, fleets. can specified using UseFishAgeComps UseFishLenComps, expects values 0 (don’t fit) 1 (fit), dimensioned n_regions, n_years, n_fish_fleets. Users can optionally supply ISS_FishAgeComps ISS_FishLenComps data inputs specify input sample size composition data, dimensioned n_regions, n_years, n_sexes, n_fish_fleets. specified (.e., left NULL), helper function automatically sum ObsFishAgeComps ObsFishLenComps partitions use sums input sample size. Thus, observed composition data input proportions, model potentially incorrectly assume input sample size 1 data. Alaska sablefish, fishery indices currently utilized fixed-gear fleet (dominant fleet), biomass based, trawl fleet fit fishery indices. can specified using fish_idx_type argument, biom represents biomass indices, none indicates fishery indices available. Multinomial likelihoods also assumed fishery ages, specified FishAgeComps_LikeType. However, fixed-gear fleet fishery age compositions available. Thus, FishAgeComps_LikeType specified c(\"Multinomial\", \"none\"). Fishery length compositions FishLenComps_LikeType available fleets specified Multinomial. Currently, Alaska sablefish sex-structured model age-compositions sex-specific. specified using FishAgeComps_Type = c(\"agg_Year_1-terminal_Fleet_1\", \"none_Year_1-terminal_Fleet_2\"), indicates model data fit aggregated across sexes years fleet 1 (fixed-gear) (.e., Multinomial expected proportions summed across sexes). none_Year_1-terminal_Fleet_2 character indicates anything age compositions trawl fishery, since availiable. fishery length compositions, specified FishLenComps_Type = c(\"spltRspltS_Year_1-terminal_Fleet_1\", \"spltRspltS_Year_1-terminal_Fleet_2\") fleets length composition data sex-specific. , spltRspltS character indicates model data sum 1 sex region, implicit sex-ratios can inferred using composition data model. Lastly, ADMB aggregation quirks specific Alaska sablefish can ignored user (removed later version model). arguments expected survey indices compositions. , 3 survey fleets specified, abundance based survey fleet 1 3, biomass based survey fleet 2. Age compositions aggregated sex survey fleet 1 3, availiable survey fleet 2, length compositions split sex survey fleets. compositions survey fleets assume Mulinomial likelihood.","code":"input_list <- Setup_Mod_FishIdx_and_Comps(input_list = input_list,                                           # data inputs                                           ObsFishIdx = sgl_rg_sable_data$ObsFishIdx,                                           ObsFishIdx_SE = sgl_rg_sable_data$ObsFishIdx_SE,                                           UseFishIdx =  sgl_rg_sable_data$UseFishIdx,                                           ObsFishAgeComps = sgl_rg_sable_data$ObsFishAgeComps,                                           UseFishAgeComps = sgl_rg_sable_data$UseFishAgeComps,                                           ISS_FishAgeComps = sgl_rg_sable_data$ISS_FishAgeComps,                                           ObsFishLenComps = sgl_rg_sable_data$ObsFishLenComps,                                           UseFishLenComps = sgl_rg_sable_data$UseFishLenComps,                                           ISS_FishLenComps = sgl_rg_sable_data$ISS_FishLenComps,                                            # Model options                                           fish_idx_type =                                              c(\"biom\", \"none\"),                                            # biomass indices for fishery fleet 1 and 2                                           FishAgeComps_LikeType =                                              c(\"Multinomial\", \"none\"),                                            # age comp likelihoods for fishery fleet 1 and 2                                           FishLenComps_LikeType =                                              c(\"Multinomial\", \"Multinomial\"),                                            # length comp likelihoods for fishery fleet 1 and 2                                           FishAgeComps_Type =                                               c(\"agg_Year_1-terminal_Fleet_1\",                                               \"none_Year_1-terminal_Fleet_2\"),                                            # age comp structure for fishery fleet 1 and 2                                           FishLenComps_Type =                                               c(\"spltRspltS_Year_1-terminal_Fleet_1\",                                               \"spltRspltS_Year_1-terminal_Fleet_2\"),                                             # length comp structure for fishery fleet 1 and 2                                           FishAge_comp_agg_type = c(0,NA),                                            # ADMB aggregation quirks, ideally get rid of this                                           FishLen_comp_agg_type = c(1,1)                                            # ADMB aggregation quirks, ideally get rid of this                                           ) input_list <- Setup_Mod_SrvIdx_and_Comps(input_list = input_list,                                          # data inputs                                          ObsSrvIdx = sgl_rg_sable_data$ObsSrvIdx,                                          ObsSrvIdx_SE = sgl_rg_sable_data$ObsSrvIdx_SE,                                          UseSrvIdx =  sgl_rg_sable_data$UseSrvIdx,                                          ObsSrvAgeComps = sgl_rg_sable_data$ObsSrvAgeComps,                                          ISS_SrvAgeComps = sgl_rg_sable_data$ISS_SrvAgeComps,                                          UseSrvAgeComps = sgl_rg_sable_data$UseSrvAgeComps,                                          ObsSrvLenComps = sgl_rg_sable_data$ObsSrvLenComps,                                          UseSrvLenComps = sgl_rg_sable_data$UseSrvLenComps,                                          ISS_SrvLenComps = sgl_rg_sable_data$ISS_SrvLenComps,                                           # Model options                                          srv_idx_type = c(\"abd\", \"biom\", \"abd\"),                                          # abundance and biomass for survey fleet 1, 2, and 3                                          SrvAgeComps_LikeType =                                             c(\"Multinomial\", \"none\", \"Multinomial\"),                                           # survey age composition likelihood for survey fleet                                           # 1, 2, and 3                                          SrvLenComps_LikeType =                                             c(\"Multinomial\", \"Multinomial\", \"Multinomial\"),                                           #  survey length composition likelihood for survey fleet                                           # 1, 2, and 3                                          SrvAgeComps_Type = c(\"agg_Year_1-terminal_Fleet_1\",                                                               \"none_Year_1-terminal_Fleet_2\",                                                               \"agg_Year_1-terminal_Fleet_3\"),                                           # survey age comp type                                          SrvLenComps_Type = c(\"spltRspltS_Year_1-terminal_Fleet_1\",                                                               \"spltRspltS_Year_1-terminal_Fleet_2\",                                                               \"spltRspltS_Year_1-terminal_Fleet_3\"),                                           # survey length comp type                                          SrvAge_comp_agg_type = c(1,NA,1),                                           # ADMB aggregation quirks, ideally get rid of this                                          SrvLen_comp_agg_type = c(0,0,0)                                          # ADMB aggregation quirks, ideally get rid of this )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-selectivity-and-catchability-fishery-and-survey","dir":"Articles","previous_headings":"","what":"Setup Selectivity and Catchability (Fishery and Survey)","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"Specifying fishery/survey selectivity catchability options (function arguments fishery survey) can bit involved well. SPoRC, several selectivity options, include: Whether continuous time-varying selectivity processes (cont_tv_fish_sel cont_tv_srv_sel). sablefish, continuous time-varying selectivity used specified none_Fleet_x, Whether selectivity blocks (fish_sel_blocks srv_sel_blocks). Sablefish assumes 3 time-blocks fixed-gear fleet time-invariant selectivity trawl fishery. general, time-blocks can specified Block_v_Year_x-y_Fleet_z, Block_v represents block number, Year_x-y represents year range (x-y) block number applies , Fleet_z represents fleet time-block . time-blocks specified, can left none_Fleet_z, type parametric selectivity form specify different fleets (fish_sel_model srv_sel_model). Sablefish assumes logist1 fixed-gear fleet (logistic specified a50 k), gamma dome-shaped selectivity trawl fleet, number catchability blocks specified (fish_q_blocks srv_q_blocks). specified identical manner selectivity blocks (point 2), fishery survey selectivity parameters estimated (fish_fixed_sel_pars). case sablefish, first specifying selectivity parameters (time-blocks sexes) estimated. However, nuanced parameter sharing across sexes time-blocks used sablefish help stabilize model (last part code chunk), easily generalized. Thus, users can manually extract map list updated input_list object modify parameters fixed shared, Lastly, fishery survey catchability estimated (fish_q_spec srv_q_spec). fishery, catchability estimated regions (est_all, since single-region model) fixed-gear fleet, specified fix trawl fishery (since indices available). , arguments expected setting survey selectivity, similarly nuanced parameter fixing sharing help facilitate model stability.","code":"input_list <- Setup_Mod_Fishsel_and_Q(input_list = input_list,                                                                              # Model options                                       cont_tv_fish_sel = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       # fishery selectivity, whether continuous time-varying                                        # fishery selectivity blocks                                       fish_sel_blocks =                                          c(\"Block_1_Year_1-35_Fleet_1\",                                            # block 1, fishery ll selex                                           \"Block_2_Year_36-56_Fleet_1\",                                            # block 2 fishery ll selex                                           \"Block_3_Year_57-terminal_Fleet_1\",                                             # block 3 fishery ll selex                                           \"none_Fleet_2\"),                                            # no blocks for trawl fishery                                        # fishery selectivity form                                       fish_sel_model =                                          c(\"logist1_Fleet_1\",                                            \"gamma_Fleet_2\"),                                        # fishery catchability blocks                                       fish_q_blocks =                                          c(\"Block_1_Year_1-35_Fleet_1\",                                            # block 1, fishery ll selex                                           \"Block_2_Year_36-56_Fleet_1\",                                            # block 2 fishery ll selex                                           \"Block_3_Year_57-terminal_Fleet_1\",                                             # block 3 fishery ll selex                                           \"none_Fleet_2\"),                                           # no blocks for trawl fishery                                        # whether to estimate all fixed effects                                        # for fishery selectivity and later modify                                       # to fix and share parameters                                        fish_fixed_sel_pars_spec =                                          c(\"est_all\", \"est_all\"),                                        # whether to estimate all fixed effects                                        # for fishery catchability                                       fish_q_spec =                                          c(\"est_all\", \"fix\")                                        # estimate fishery q for fleet 1, not for fleet 2                                       )  # additional mapping for fishery selectivity # sharing delta across sexes from early domestic fishery (first time block) input_list$map$ln_fish_fixed_sel_pars <- factor(c(1:7, 2, 8:11, rep(12:13,3), rep(c(14,13),3))) input_list <- Setup_Mod_Srvsel_and_Q(input_list = input_list,                                       # Model options                                      # survey selectivity, whether continuous time-varying                                      cont_tv_srv_sel =                                        c(\"none_Fleet_1\",                                           \"none_Fleet_2\",                                           \"none_Fleet_3\"),                                       # survey selectivity blocks                                      srv_sel_blocks =                                         c(\"Block_1_Year_1-56_Fleet_1\",                                           # block 1 for domestic ll survey                                          \"Block_2_Year_57-terminal_Fleet_1\",                                           # block 2 for domestic ll survey                                          \"none_Fleet_2\",                                          \"none_Fleet_3\"                                          ), # no blocks for trawl and jp survey                                       # survey selectivity form                                      srv_sel_model =                                         c(\"logist1_Fleet_1\",                                          \"exponential_Fleet_2\",                                           \"logist1_Fleet_3\"),                                       # survey catchability blocks                                      srv_q_blocks =                                         c(\"none_Fleet_1\",                                           \"none_Fleet_2\",                                           \"none_Fleet_3\"),                                       # whether to estiamte all fixed effects                                       # for survey selectivity and later                                      # modify to fix/share parameters                                      srv_fixed_sel_pars_spec =                                         c(\"est_all\",                                           \"est_all\",                                           \"est_all\"),                                       # whether to estiamte all                                       # fixed effects for survey catchability                                      srv_q_spec =                                         c(\"est_all\",                                           \"est_all\",                                           \"est_all\")                                      )  # ll survey, share delta female (index 2) across time blocks and to the coop jp ll survey delta # ll survey, share delta male (index 5) across time blocks and to the coop jp ll survey delta # coop jp survey does not estimate parameters and shares deltas with longline survey # single time block with trawl survey and only one parameter hence,  # only one parameter estimated across blocks (indices 7 and 8) input_list$map$ln_srv_fixed_sel_pars <-    factor(c(1:3, 2, 4:6, 5,rep(7,4),             rep(8, 4), rep(c(NA,2), 2), rep(c(NA, 5), 2)))  # Coop JP Survey (Logistic) Single time block (these estimates are fixed!) input_list$par$ln_srv_fixed_sel_pars[1,,,1,3] <- c(0.980660760456, 0.9295241) input_list$par$ln_srv_fixed_sel_pars[1,,,2,3] <- c(1.22224502478, 0.8821623)"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"setup-model-weighting","dir":"Articles","previous_headings":"","what":"Setup Model Weighting","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"last helper function needs utilized setup run model Setup_Mod_Weighting function. function helps specify different data sources weighted whether ADMB (likelihoods = 0) TMB-style likelihoods used (likelihoods = 1). general, ADMB-style likelihoods used, data sources weighted combination λ\\lambda (weights entiree data source likelihood, e.g., λ*CatchnLL\\lambda*Catch_{nLL}) specified “observed” standard errors / input sample sizes . context composition data, λ\\lambda values determined using Francis reweighting right-weight data. Francis-reweighting used, values 1 can input weights data. Moreover, using ADMB-style likelihoods, standard errors indices expected (.e.,ObsFishIdx_SE ObsSrvIdx_SE): (2*(SEr,y,f/ObsIdxr,y,f)2(2 * (SE_{r,y,f}/ ObsIdx_{r,y,f})^2. Fitting catch data using ADMB-style likelihoods assumes sum squares calculation observed predicted catch, following large λ\\lambda value applied overall catch data source ensure data closely fit . context TMB-style likelihoods (likelihoods = 1), data sources ideally weighted using σ\\sigma values, conjunction λ\\lambda values. Thus, users can leave arguments Wt_Catch, Wt_FishIdx, Wt_SrvIdx, Wt_Rec, Wt_F blank (NULL), get automatically filled 1. Francis-reweighting conducted using TMB-style likelihoods, process described , users need fill weights determined Francis-reweighitng. , users can specify value 1. Thus, contrast ADMB-style likelihoods, indices weighted : (2*SEr,y,f)2(2 * SE_{r,y,f})^2. Moreover, recommended fit catch data high λ\\lambda value using TMB-style likelihoods (.e., Wt_Catch set 1) users weight catch data using sigmaC_spec ln_sigmaC arguments Setup_Mod_Catch_and_F function. single region pollock vignette demonstrates use TMB-style likelihoods. Finally, sablefish_ADMB specific Alaska sablefish specifies order operations size-age transition matrices, well indices calculated (e.g., using mid-year mortality vs ). following iterations package, option likely removed.","code":"# set up data weighting stuff Wt_FishAgeComps <- array(NA, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                       input_list$data$n_fish_fleets))  # weights for fishery age comps Wt_FishAgeComps[1,,1,1] <- 0.826107286513784 # Weight for fixed gear age comps  # Fishery length comps Wt_FishLenComps <- array(NA, dim = c(input_list$data$n_regions,                                       length(input_list$data$years),                                       input_list$data$n_sexes,                                       input_list$data$n_fish_fleets))  Wt_FishLenComps[1,,1,1] <- 4.1837057381917  # Weight for fixed gear len comps females Wt_FishLenComps[1,,2,1] <- 4.26969350917589  # Weight for fixed gear len comps males Wt_FishLenComps[1,,1,2] <- 0.316485920691651 # Weight for trawl gear len comps females Wt_FishLenComps[1,,2,2] <- 0.229396580680981  # Weight for trawl gear len comps males  # survey age comps Wt_SrvAgeComps <- array(NA, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                      input_list$data$n_srv_fleets))  # weights for survey age comps Wt_SrvAgeComps[1,,1,1] <- 3.79224544725927  # Weight for domestic survey ll gear age comps Wt_SrvAgeComps[1,,1,3] <- 1.31681114024037 # Weight for coop jp survey ll gear age comps  # Survey length comps Wt_SrvLenComps <- array(0, dim = c(input_list$data$n_regions,                                     length(input_list$data$years),                                     input_list$data$n_sexes,                                     input_list$data$n_srv_fleets))  Wt_SrvLenComps[1,,1,1] <- 1.43792019016567  # Weight for domestic ll survey len comps females Wt_SrvLenComps[1,,2,1] <- 1.07053763450712 # Weight for domestic ll survey len comps males Wt_SrvLenComps[1,,1,2] <- 0.670883273592302  # Weight for domestic trawl survey len comps females Wt_SrvLenComps[1,,2,2] <- 0.465207132450763 # Weight for domestic trawl survey len comps males Wt_SrvLenComps[1,,1,3] <- 1.27772810174693 # Weight for coop jp ll survey len comps females Wt_SrvLenComps[1,,2,3] <- 0.857519546948587  # Weight for coop jp ll survey len comps males  input_list <- Setup_Mod_Weighting(input_list = input_list,                                   sablefish_ADMB = 1,                                   likelihoods = 0,                                   Wt_Catch = 50,                                   Wt_FishIdx = 0.448,                                   Wt_SrvIdx = 0.448,                                   Wt_Rec = 1.5,                                   Wt_F = 0.1,                                   Wt_Tagging = 0,                                   Wt_FishAgeComps = Wt_FishAgeComps,                                   Wt_FishLenComps = Wt_FishLenComps,                                   Wt_SrvAgeComps = Wt_SrvAgeComps,                                   Wt_SrvLenComps = Wt_SrvLenComps                                   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/e_single_region_sablefish_case_study.html","id":"fit-model-and-plot","dir":"Articles","previous_headings":"","what":"Fit Model and Plot","title":"Setting up a Single Region Model (Alaska Sablefish)","text":"finally done setup! Now, can run model. aided fit_model function, expects data, mapping, parameters list uses MakeADFUN function internally. lists can extracted input_list constructed. users want utilize integrate random effects using Laplace Approximation, can supply character vector random argument. instance, wanted integrate recruitment deviations , set: random = c(\"ln_RecDevs\"). newton_loops argument indicates whether user wants take additional newton steps ensure model achieved local minimum, uses Hessian gradients compute (thus, serves additional check model convergence). report file extracted internally fit_model standard errors can extracted using RTMB::sdreport function. Finally, can compare outputs ADMB RTMB. brevity, show comparisons spawning biomass recruitment two models.","code":"# extract out lists updated with helper functions data <- input_list$data parameters <- input_list$par mapping <- input_list$map  # Fit model sabie_rtmb_model <- fit_model(data,                               parameters,                               mapping,                               random = NULL,                               newton_loops = 3,                               silent = TRUE                               )  # Get standard error report sabie_rtmb_model$sd_rep <- RTMB::sdreport(sabie_rtmb_model) # Get recruitment time-series rec_series <- data.frame(Par = \"Recruitment\",                          Year = 1960:2024,                          RTMB = t(sabie_rtmb_model$rep$Rec),                          ADMB = sgl_rg_sable_data$admb_recr)  # Get SSB time-series ssb_series <- data.frame(Par = \"SSB\",                          Year = 1960:2024,                          RTMB = t(sabie_rtmb_model$rep$SSB),                          ADMB = sgl_rg_sable_data$admb_spbiom)  ts_df <- rbind(ssb_series,rec_series) # bind together ggplot(ts_df, aes(x = Year, y = ((RTMB - ADMB) / ADMB))) +   geom_line(size = 2) +   geom_hline(yintercept = 0, lty = 2, size = 1.3) +   facet_wrap(~Par, scales = \"free_y\") +   labs(y = \"Relative difference (%)\")  +   SPoRC::theme_sablefish() ggplot() +   geom_line(ts_df, mapping = aes(x = Year, y = RTMB, color = 'RTMB'), size = 1.3, lty = 1) +   geom_line(ts_df, mapping = aes(x = Year, y = ADMB, color = 'ADMB'), size = 1.3, lty = 2) +   facet_wrap(~Par, scales = \"free_y\") +   scale_color_manual(values = c('RTMB' = 'black', 'ADMB' = 'red')) +   labs(x = \"Year\", color = 'Model', y = \"Value\") +   SPoRC::theme_sablefish()"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-model-dimensions","dir":"Articles","previous_headings":"","what":"Setup Model Dimensions","title":"Setting up a Single Region Model (BSAI Pollock)","text":"initially set model , input list containing data list, parameter list, mapping list needs constructed. aided function Setup_Mod_Dim, users specify vector years, ages, lengths. Additionally, users need specify number regions modelled (n_regions), number sexes modeled (n_sexes), number fishery fleets (n_fish_fleets), number survey fleets (n_srv_fleets)","code":"input_list <- Setup_Mod_Dim(     years = sgl_rg_ebswp_data$years,     # vector of years     ages = sgl_rg_ebswp_data$ages,     # vector of ages     lens = NA,     # number of lengths     n_regions = 1,     # number of regions     n_sexes = 1,     # number of sexes     n_fish_fleets = 1,     # number of fishery fleets     n_srv_fleets = 3 # number of survey fleets   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-recruitment-dynamics","dir":"Articles","previous_headings":"","what":"Setup Recruitment Dynamics","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Following initialization input_list, can pass created object next function (Setup_Mod_Rec) parameterize recruitment dynamics. case Bering Sea Pollock, recruitment parameterized : Beverton-Holt Recruitment, steepness fixed 2024 assessment estiamted value, Recruitment deviations estimated penalized likelihood framework, Recruitment deviations estimated years, Initial age deviations ln_sigmaR = 2, later deviations (year 1) ln_sigmaR = 1. done mimic current assessment, different mean parameter estimated early age deviations later recruitment deviations. Initial age structure derived assuming geometric series (init_age_strc = 1; alternative iterating age structure equilibrium init_age_strc = 0), Individuals assumed spawn March (t_spawn = 0.25)","code":"inv_steepness <- function(s) qlogis((s - 0.2) / 0.8)    input_list <- Setup_Mod_Rec(     input_list = input_list,      # Model options     do_rec_bias_ramp = 0,     # do bias ramp (0 == don't do bias ramp, 1 == do bias ramp)     sigmaR_switch = 1,     # when to switch from early to late sigmaR (switch in first year)     ln_sigmaR = log(c(2, 1)),     # Starting values for early and late sigmaR     rec_model = \"bh_rec\",     # recruitment model     steepness_h = inv_steepness(0.623013),     h_spec = \"fix\",     # fixing steepness     sigmaR_spec = \"fix\",     # fix early sigmaR and late sigmaR     sexratio = as.vector(c(1.0)),     # recruitment sex ratio     init_age_strc = 1,     ln_global_R0 = 10,     t_spawn = 0.25     # starting value for r0   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-biological-dynamics","dir":"Articles","previous_headings":"","what":"Setup Biological Dynamics","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Passing input_list updated previous helper function, can parameterize biological dynamics model. Setup_Mod_Biologicals requires data inputs weight--age (WAA) maturity--age (MatAA), dimensioned n_regions, n_years, n_ages, n_sexes. case Bering Sea pollock, natural mortality age-specific fixed. Thus, natural mortality array constructed passed function, also dimensioned n_regions, n_years, n_ages, n_sexes.","code":"# Setup a fixed natural mortality array for use   fix_natmort <- array(0, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), 1))   fix_natmort[,,1,] <- 0.9 # age 1 M   fix_natmort[,,2,] <- 0.45 # age 2 M   fix_natmort[,,-c(1,2),] <- 0.3 # age 3+ M      input_list <- Setup_Mod_Biologicals(     input_list = input_list,      # Data inputs     WAA = sgl_rg_ebswp_data$WAA,     MatAA = sgl_rg_ebswp_data$MatAA,      # Model options     # mean and sd for M prior     fit_lengths = 0,     # don't fit length compositions     M_spec = \"fix\",     # fixing natural mortality     Fixed_natmort = fix_natmort   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-movement-and-tagging","dir":"Articles","previous_headings":"","what":"Setup Movement and Tagging","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Given vignette demonstrates single-region model, movement dynamics specified. However, users still need define movement dynamics parameterized. case, following code chunk specifies movement estimated (use_fixed_movement = 1), movement identity matrix (Fixed_Movement = NA), recruits move (do_recruits_move = 0). Specification tagging dynamics follow similar fashion since single-region model. necessary updating input_list setting UseTagging argument value 0.","code":"# setup movement   input_list <- Setup_Mod_Movement(     input_list = input_list,     use_fixed_movement = 1,     Fixed_Movement = NA,     do_recruits_move = 0   )  # setup tagging   input_list <- Setup_Mod_Tagging(     input_list = input_list,      UseTagging = 0)"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-catch-and-fishing-mortality","dir":"Articles","previous_headings":"","what":"Setup Catch and Fishing Mortality","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Following parameterization biological dynamics, fishery dynamics can specified set using Setup_Mod_Catch_and_F function. , input_list gets updated previous helper functions. Users need supply function array observed catches ObsCatch, dimensioned n_regions, n_years, n_fish_fleets. Similarly, users also need specify catch type observations Catch_Type argument. argument expects matrix dimensioned n_years n_fish_fleets, really applicable spatial model (values 0 indicate catch aggregated across regions periods fleets, values 1 indicate catch specific region periods fleets). Thus, single region model, values 1 always supplied. function also expects UseCatch argument specified, dimensioned n_regions, n_years, n_fish_fleets. Essentially, users need fill whether catch fit particular partitions. use cases argument scenarios catch observed value 0, helper function automatically turns estimation fishing mortality deviations partitions. Additional model options specified case study include whether fishing mortality penalties utilized help estimate deviations Use_F_pen = 1, ln_sigmaC values fix .","code":"input_list <- Setup_Mod_Catch_and_F(     input_list = input_list,      # Data inputs     ObsCatch = sgl_rg_ebswp_data$ObsCatch,     Catch_Type = sgl_rg_ebswp_data$Catch_Type,     UseCatch = sgl_rg_ebswp_data$UseCatch,      # Model options     Use_F_pen = 1,     # whether to use f penalty, == 0 don't use, == 1 use     sigmaC_spec = \"fix\",     # fixing catch standard deviation     ln_sigmaC = matrix(log(0.05), 1, 1)     # starting / fixed value for catch standard deviation   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-fishery-indices-and-compositions","dir":"Articles","previous_headings":"","what":"Setup Fishery Indices and Compositions","title":"Setting up a Single Region Model (BSAI Pollock)","text":"set fishery indices composition data, supply arrays fishery indices associated standard errors (ObsFishIdx ObsFishIdx_SE), dimensioned n_regions, n_years, n_fish_fleets. Additionally, supply fishery age composition data length composition data. ObsFishAgeComps ObsFishLenComps dimensioned n_regions, n_years, n_bins (n_ages | n_lens), n_sexes, n_fish_fleets. Bering Sea pollock model fit length composition data, ObsFishLenComps specified NA UseFishLenComps specified 0s. Additionally, specify fishery index biomass-based, multinomial likelihoods utilized age composition data, fishery age compositions aggregatted across regions sexes (single-region single-sex model).","code":"input_list <- Setup_Mod_FishIdx_and_Comps(     input_list = input_list,     # data inputs     ObsFishIdx = sgl_rg_ebswp_data$ObsFishIdx,     ObsFishIdx_SE = sgl_rg_ebswp_data$ObsFishIdx_SE,     UseFishIdx = sgl_rg_ebswp_data$UseFishIdx,     ObsFishAgeComps = sgl_rg_ebswp_data$ObsFishAgeComps,     UseFishAgeComps = sgl_rg_ebswp_data$UseFishAgeComps,     ISS_FishAgeComps = sgl_rg_ebswp_data$ISS_FishAgeComps,     ObsFishLenComps = array(NA_real_, dim = c(1, length(input_list$data$years), length(input_list$data$lens), 1, 1)),     UseFishLenComps = array(0, dim = c(1, length(input_list$data$years), 1)),      # Model options     fish_idx_type = c(\"biom\"),     # indices for fishery     FishAgeComps_LikeType = c(\"Multinomial\"),     # age comp likelihoods for fishery fleet     FishLenComps_LikeType = c(\"none\"),     # length comp likelihoods for fishery     FishAgeComps_Type = c(\"agg_Year_1-terminal_Fleet_1\"),     # age comp structure for fishery     FishLenComps_Type = c(\"none_Year_1-terminal_Fleet_1\"),     # length comp structure for fishery     FishAge_comp_agg_type = c(1),     # ADMB aggregation quirks, ideally get rid of this     FishLen_comp_agg_type = c(0)     # ADMB aggregation quirks, ideally get rid of this   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-survey-indices-and-compositions","dir":"Articles","previous_headings":"","what":"Setup Survey Indices and Compositions","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Setting survey indices compositions follows similar fashion. , supply arrays survey indices associated standard errors (ObsSrvIdx ObsSrvIdx_SE), dimensioned n_regions, n_years, n_srv_fleets. case, modelling three survey fleets, fleet 1 bottom trawl survey, fleet 2 acoustic trawl survey, fleet 3 acoustic vessel opportunity survey. also input survey age composition data length composition data. ObsSrvAgeComps ObsSrvLenComps dimensioned n_regions, n_years, n_bins (n_ages | n_lens), n_sexes, n_srv_fleets. three survey indices biomass-based multinomial likelihoods used fit age-compositions fleets 1 2. However, acoustic vessel oppurtunity survey composition data, fit (hence specified none).","code":"# Setup survey indices and compositions   input_list <- Setup_Mod_SrvIdx_and_Comps(     input_list = input_list,      # data inputs     ObsSrvIdx = sgl_rg_ebswp_data$ObsSrvIdx,     ObsSrvIdx_SE = sgl_rg_ebswp_data$ObsSrvIdx_SE,     UseSrvIdx = sgl_rg_ebswp_data$UseSrvIdx,     ObsSrvAgeComps = sgl_rg_ebswp_data$ObsSrvAgeComps,     ISS_SrvAgeComps = sgl_rg_ebswp_data$ISS_SrvAgeComps,     UseSrvAgeComps = sgl_rg_ebswp_data$UseSrvAgeComps,     ObsSrvLenComps = array(NA_real_, dim = c(1, length(input_list$data$years), length(input_list$data$lens), 1, 3)),     UseSrvLenComps = array(0, dim = c(1, length(input_list$data$years), 3)),     ISS_SrvLenComps = NULL,      # Model options     srv_idx_type = c(\"biom\", \"biom\", \"biom\"),     # abundance and biomass for survey fleet 1, 2, and 3     SrvAgeComps_LikeType = c(\"Multinomial\", \"Multinomial\", \"none\"),     # survey age composition likelihood for survey fleet 1, 2, and 3     SrvLenComps_LikeType = c(\"none\", \"none\", \"none\"),     #  survey length composition likelihood for survey fleet 1, 2, and 3     SrvAgeComps_Type = c(       \"agg_Year_1-terminal_Fleet_1\",       \"agg_Year_1-terminal_Fleet_2\",       \"none_Year_1-terminal_Fleet_3\"     ),     # survey age comp type      SrvLenComps_Type = c(       \"none_Year_1-terminal_Fleet_1\",       \"none_Year_1-terminal_Fleet_2\",       \"none_Year_1-terminal_Fleet_3\"     ),     # survey length comp type      SrvAge_comp_agg_type = c(1, 1, 1),     # ADMB aggregation quirks, ideally get rid of this     SrvLen_comp_agg_type = c(0, 0, 0)     # ADMB aggregation quirks, ideally get rid of this   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setting-up-fishery-selectivity-and-catchability","dir":"Articles","previous_headings":"","what":"Setting up Fishery Selectivity and Catchability","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Fishery selectivity specified vary semi-parametrically pollock model, 2dar1 option specified. , estiamte selectivity deviations penalized framework fix variance values priori fishsel_pe_pars_spec = \"fix\". Moreover, estiamte fishery selectivity deviations dimensions, specify correlations set 0 (corr_opt_semipar = \"corr_zero_y_a_c\"). Thus, semi-parametric deviations collapse simple iid formulation. Additionally, specify underlying selectivity form fishery logistic function. Lastly, single catchability term estimated fit early fishery index utilized model (fish_q_spec = c(\"est_all\")). Fit Model section, demonstrate variance parameters can fixed allow estimation penalized likelihood framework.","code":"# Setup fishery selectivity and catchability   input_list <- Setup_Mod_Fishsel_and_Q(      input_list = input_list,      # Model options     # fishery selectivity, whether continuous time-varying     cont_tv_fish_sel = c(\"2dar1_Fleet_1\"),     fishsel_pe_pars_spec = \"fix\", # doing penalized likelihood for selex devs     fish_sel_devs_spec = \"est_all\", # estimating all sel devs     corr_opt_semipar = \"corr_zero_y_a_c\", # making sure 2d correaltions are 0, collapses to a simple iid case     # fishery selectivity blocks     fish_sel_blocks = c(\"none_Fleet_1\"),     # fishery selectivity form     fish_sel_model = c(\"logist1_Fleet_1\"),     # fishery catchability blocks     fish_q_blocks = c(\"none_Fleet_1\"),     # whether to estiamte all fixed effects for fishery selectivity     fish_fixed_sel_pars = c(\"est_all\"),     # whether to estiamte all fixed effects for fishery catchability     fish_q_spec = c(\"est_all\")   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setting-up-survey-selectivity-and-catchability","dir":"Articles","previous_headings":"","what":"Setting up Survey Selectivity and Catchability","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Survey selectivity setup similar way. , specify first survey fleet iid parametric deviations selectivity form, second survey fleet 2dar1 semi-parametric deviations. Selectivity survey fleet 3 estimated age composition data available. Therefore, selectivity survey fleet 2 3 shared. , specify selectivity deviations estimated penalized likelihood framework argument srvsel_pe_pars_spec = c(\"fix\", \"fix\", \"fix\") specify set 2dar1 correlations 0, semi-parametric deviations collapse iid formulation (corr_opt_semipar = c(NA, \"corr_zero_y_a_c\", \"corr_zero_y_a_c\")).","code":"# Setup survey selectivity and catchability   input_list <- Setup_Mod_Srvsel_and_Q(     input_list = input_list,      # Model options     # survey selectivity, whether continuous time-varying     cont_tv_srv_sel = c(\"iid_Fleet_1\", \"2dar1_Fleet_2\", \"2dar1_Fleet_3\"),     srvsel_pe_pars_spec = c(\"fix\", \"fix\", \"fix\"), # penalize survey selex devs     srv_sel_devs_spec = c(\"est_all\", \"est_all\", \"none\"), # estimating all srv selex devs     corr_opt_semipar = c(NA, \"corr_zero_y_a_c\", \"corr_zero_y_a_c\"), # setting corelations at 0, so 2dar1 collapses to simple iid semi-parametric devs      # survey selectivity blocks     srv_sel_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\", \"none_Fleet_3\"),     # survey selectivity form     srv_sel_model = c(       \"logist1_Fleet_1\",       \"logist1_Fleet_2\",       \"logist1_Fleet_3\"     ),     # survey catchability blocks     srv_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\", \"none_Fleet_3\"),     # whether to estiamte all fixed effects for survey selectivity     srv_fixed_sel_pars_spec = c(\"est_all\", \"est_all\", \"est_all\"),     # whether to estiamte all fixed effects for survey catchability     srv_q_spec = c(\"est_all\", \"est_all\", \"est_all\")   )    # note that AVO (fleet 3) does not have any comp data, and needs to share selectivity with ATS (fleet 2)   input_list$map$ln_srv_fixed_sel_pars <- factor(c(1, 2, 3, 4, 3, 4))    # share ATS and AVO selex devs   map_srvsel_devs[,,,,3] <- map_srvsel_devs[,,,,2]   input_list$map$ln_srvsel_devs <- factor(map_srvsel_devs)"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"setup-model-weighting","dir":"Articles","previous_headings":"","what":"Setup Model Weighting","title":"Setting up a Single Region Model (BSAI Pollock)","text":"set data weighted λ\\lambda model. , λ\\lambda values set 1 TMB likelihoods utilized. Thus, data sources weighted either using specified input sample sizes (composition data) specified variances (catch abundance indices).","code":"input_list <- Setup_Mod_Weighting(   input_list = input_list,   sablefish_ADMB = 0,   likelihoods = 1, # using TMB likelihoods   Wt_Catch = 1,   Wt_FishIdx = 1,   Wt_SrvIdx = 1,   Wt_Rec = 1,   Wt_F = 1,   Wt_Tagging = 0,   Wt_FishAgeComps = array(1, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                      input_list$data$n_srv_fleets)),   Wt_FishLenComps = array(1, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                      input_list$data$n_srv_fleets)),   Wt_SrvAgeComps = array(1, dim = c(input_list$data$n_regions,                                     length(input_list$data$years),                                     input_list$data$n_sexes,                                     input_list$data$n_srv_fleets)),   Wt_SrvLenComps = array(1, dim = c(input_list$data$n_regions,                                     length(input_list$data$years),                                     input_list$data$n_sexes,                                     input_list$data$n_srv_fleets)) )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_bsai_pollock_case_study.html","id":"fit-model-and-plot","dir":"Articles","previous_headings":"","what":"Fit Model and Plot","title":"Setting up a Single Region Model (BSAI Pollock)","text":"Next, can extract elements created input_list object. specify values fix selectivity variances . first case, fishery selectivity variance fixed value 0.075 second case, bottom trawl survey a50 k selectivity variances logistic function fixed 0.075 Lastly, acoustic trawl vessel opportunity surveys specified variance 0.15. details dimensionality fishsel_pe_pars srvsel_pe_pars, please refer Description Model Parameters page. Next, can extract parameter estimates recruitment spawning biomass compare 2024 pollock model. general, see trends recruitment spawning stock biomass align relatively well. However, slight discrepancies estimates, likely due factors discussed start vignette.  Lastly, can also inspect estimates fishery selectivity SPoRC. , show relative selectivity estimates ages 3 - 11 (panels). Note selectivity model can exceed 1, normalize values figure improve interpretability","code":"# extract out lists updated with helper functions data <- input_list$data parameters <- input_list$par mapping <- input_list$map  # selex sigma to fix at, given penalized likelihood parameters$fishsel_pe_pars[,4,,] <- log(0.075) # fishery selex variance parameters$srvsel_pe_pars[,1:2,,1] <- log(0.075) # survey BTS - a50 and delta variance parameters$srvsel_pe_pars[,4,,2] <- log(0.15) # survey ATS and ato variance  # Fit model ebswp_rtmb_model <- fit_model(data,                               parameters,                               mapping,                               random = NULL,                               newton_loops = 3,                               silent = TRUE                               )  # Get standard error report ebswp_rtmb_model$sd_rep <- RTMB::sdreport(ebswp_rtmb_model) # Get recruitment rec_series <- reshape2::melt((ebswp_rtmb_model$rep$Rec)) %>%   mutate(se = ebswp_rtmb_model$sdrep$sd[names(ebswp_rtmb_model$sdrep$value) == 'Rec']) rec_series$Par <- \"Recruitment\"  # Get SSB time-series ssb_series <- reshape2::melt((ebswp_rtmb_model$rep$SSB)) %>%   mutate(se = ebswp_rtmb_model$sdrep$sd[names(ebswp_rtmb_model$sdrep$value) == 'SSB']) ssb_series$Par <- \"Spawning Biomass\"  # bind together ts_df <- rbind(ssb_series,rec_series) %>%   dplyr::rename(Region = Var1, Year = Var2) %>%   dplyr::mutate(Year = Year + 1963, type = 'SPoRC')  # Get actual assessment results ssb_ass <- data.frame(   Region = 1,   Year = 1964:2024,   value = sgl_rg_ebswp_data$SSB[,2],   se = sgl_rg_ebswp_data$SSB[,3],   Par = 'Spawning Biomass',   type = '2024 Pollock Assessment' )  # recruitment rec_ass <- data.frame(   Region = 1,   Year = 1964:2024,   value = sgl_rg_ebswp_data$R[,2],   se = sgl_rg_ebswp_data$R[,3],   Par = 'Recruitment',   type = '2024 Pollock Assessment' )  # bind ts_df <- ts_df %>% bind_rows(ssb_ass, rec_ass) ggplot(ts_df, aes(x = Year, y = value, ymin = value - (1.96 * se),                   ymax = value + (1.96 * se), color = type, fill = type)) +   geom_point(size = 3) +   geom_line() +   facet_wrap(~Par, scales = 'free') +   geom_ribbon(alpha = 0.3, color = NA) +   ggthemes::scale_color_colorblind() +   ggthemes::scale_fill_colorblind() +   labs(y = \"Value\")  +   theme_bw(base_size = 13) +   ylim(0, NA) +   labs(x = 'Year', y = 'Value', color = 'Type', fill = 'Type') reshape2::melt(ebswp_rtmb_model$rep$fish_sel) %>%   mutate(value = value/max(value)) %>%   rename(Region = Var1, Year = Var2, Age = Var3, Sex = Var4, Fleet = Var5) %>%   filter(Age %in% 3:11) %>%   ggplot(aes(x = Year + 1963, y = value)) +   geom_point() +   geom_line() +   facet_wrap(~Age) +   theme_bw(base_size = 15) +   labs(x = 'Year', y = 'Relative Selectivity')"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-model-dimensions","dir":"Articles","previous_headings":"","what":"Setup Model Dimensions","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"initially set model , input list containing data list, parameter list, mapping list needs constructed. aided function Setup_Mod_Dim, users specify vector years, ages, lengths. Additionally, users need specify number regions modelled (n_regions), number sexes modeled (n_sexes), number fishery fleets (n_fish_fleets), number survey fleets (n_srv_fleets)","code":"input_list <- Setup_Mod_Dim(     years = sgl_rg_ebswp_data$years,     # vector of years     ages = sgl_rg_ebswp_data$ages,     # vector of ages     lens = NA,     # number of lengths     n_regions = 1,     # number of regions     n_sexes = 1,     # number of sexes     n_fish_fleets = 1,     # number of fishery fleets     n_srv_fleets = 3 # number of survey fleets   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-recruitment-dynamics","dir":"Articles","previous_headings":"","what":"Setup Recruitment Dynamics","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Following initialization input_list, can pass created object next function (Setup_Mod_Rec) parameterize recruitment dynamics. case Bering Sea Pollock, recruitment parameterized : Beverton-Holt Recruitment, steepness fixed 2024 assessment estiamted value, Recruitment deviations estimated penalized likelihood framework, Recruitment deviations estimated years, Initial age deviations estimated ages, including plus group, Initial age structure derived assuming geometric series (init_age_strc = 1; alternative iterating age structure equilibrium init_age_strc = 0), Individuals assumed spawn March (t_spawn = 0.25)","code":"inv_steepness <- function(s) qlogis((s - 0.2) / 0.8)    input_list <- Setup_Mod_Rec(     input_list = input_list,      # Model options     do_rec_bias_ramp = 0,     # do bias ramp (0 == don't do bias ramp, 1 == do bias ramp)     sigmaR_switch = 1,     # when to switch from early to late sigmaR (switch in first year)     ln_sigmaR = log(c(1, 1)),     # Starting values for early and late sigmaR     rec_model = \"bh_rec\",     # recruitment model     steepness_h = inv_steepness(0.623013),     h_spec = \"fix\",     # fixing steepness     sigmaR_spec = \"fix\",     # fix early sigmaR and late sigmaR     sexratio = as.vector(c(1.0)),     # recruitment sex ratio     init_age_strc = 1,     ln_global_R0 = 10,     t_spawn = 0.25,     equil_init_age_strc = 2     # starting value for r0   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-biological-dynamics","dir":"Articles","previous_headings":"","what":"Setup Biological Dynamics","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Passing input_list updated previous helper function, can parameterize biological dynamics model. Setup_Mod_Biologicals requires data inputs weight--age (WAA) maturity--age (MatAA), dimensioned n_regions, n_years, n_ages, n_sexes. case Bering Sea pollock, natural mortality age-specific fixed. Thus, natural mortality array constructed passed function, also dimensioned n_regions, n_years, n_ages, n_sexes.","code":"# Setup a fixed natural mortality array for use   fix_natmort <- array(0, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), 1))   fix_natmort[,,1,] <- 0.9 # age 1 M   fix_natmort[,,2,] <- 0.45 # age 2 M   fix_natmort[,,-c(1,2),] <- 0.3 # age 3+ M      input_list <- Setup_Mod_Biologicals(     input_list = input_list,      # Data inputs     WAA = sgl_rg_ebswp_data$WAA,     MatAA = sgl_rg_ebswp_data$MatAA,      # Model options     # mean and sd for M prior     fit_lengths = 0,     # don't fit length compositions     M_spec = \"fix\",     # fixing natural mortality     Fixed_natmort = fix_natmort   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-movement-and-tagging","dir":"Articles","previous_headings":"","what":"Setup Movement and Tagging","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Given vignette demonstrates single-region model, movement dynamics specified. However, users still need define movement dynamics parameterized. case, following code chunk specifies movement estimated (use_fixed_movement = 1), movement identity matrix (Fixed_Movement = NA), recruits move (do_recruits_move = 0). Specification tagging dynamics follow similar fashion since single-region model. necessary updating input_list setting UseTagging argument value 0.","code":"# setup movement   input_list <- Setup_Mod_Movement(     input_list = input_list,     use_fixed_movement = 1,     Fixed_Movement = NA,     do_recruits_move = 0   )  # setup tagging   input_list <- Setup_Mod_Tagging(     input_list = input_list,      UseTagging = 0)"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-catch-and-fishing-mortality","dir":"Articles","previous_headings":"","what":"Setup Catch and Fishing Mortality","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Following parameterization biological dynamics, fishery dynamics can specified set using Setup_Mod_Catch_and_F function. , input_list gets updated previous helper functions. Users need supply function array observed catches ObsCatch, dimensioned n_regions, n_years, n_fish_fleets. Similarly, users also need specify catch type observations Catch_Type argument. argument expects matrix dimensioned n_years n_fish_fleets, really applicable spatial model (values 0 indicate catch aggregated across regions periods fleets, values 1 indicate catch specific region periods fleets). Thus, single region model, values 1 always supplied. function also expects UseCatch argument specified, dimensioned n_regions, n_years, n_fish_fleets. Essentially, users need fill whether catch fit particular partitions. use cases argument scenarios catch observed value 0, helper function automatically turns estimation fishing mortality deviations partitions. Additional model options specified case study include whether fishing mortality penalties utilized help estimate deviations Use_F_pen = 1, ln_sigmaC values fix .","code":"input_list <- Setup_Mod_Catch_and_F(     input_list = input_list,      # Data inputs     ObsCatch = sgl_rg_ebswp_data$ObsCatch,     Catch_Type = sgl_rg_ebswp_data$Catch_Type,     UseCatch = sgl_rg_ebswp_data$UseCatch,      # Model options     Use_F_pen = 1,     # whether to use f penalty, == 0 don't use, == 1 use     sigmaC_spec = \"fix\",     # fixing catch standard deviation     ln_sigmaC = matrix(log(0.05), 1, 1)     # starting / fixed value for catch standard deviation   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-fishery-indices-and-compositions","dir":"Articles","previous_headings":"","what":"Setup Fishery Indices and Compositions","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"set fishery indices composition data, supply arrays fishery indices associated standard errors (ObsFishIdx ObsFishIdx_SE), dimensioned n_regions, n_years, n_fish_fleets. Additionally, supply fishery age composition data length composition data. ObsFishAgeComps ObsFishLenComps dimensioned n_regions, n_years, n_bins (n_ages | n_lens), n_sexes, n_fish_fleets. Bering Sea pollock model fit length composition data, ObsFishLenComps specified NA UseFishLenComps specified 0s. Additionally, specify fishery index biomass-based, multinomial likelihoods utilized age composition data, fishery age compositions aggregatted across regions sexes (single-region single-sex model).","code":"input_list <- Setup_Mod_FishIdx_and_Comps(     input_list = input_list,     # data inputs     ObsFishIdx = sgl_rg_ebswp_data$ObsFishIdx,     ObsFishIdx_SE = sgl_rg_ebswp_data$ObsFishIdx_SE,     UseFishIdx = sgl_rg_ebswp_data$UseFishIdx,     ObsFishAgeComps = sgl_rg_ebswp_data$ObsFishAgeComps,     UseFishAgeComps = sgl_rg_ebswp_data$UseFishAgeComps,     ISS_FishAgeComps = sgl_rg_ebswp_data$ISS_FishAgeComps,     ObsFishLenComps = array(NA_real_, dim = c(1, length(input_list$data$years), length(input_list$data$lens), 1, 1)),     UseFishLenComps = array(0, dim = c(1, length(input_list$data$years), 1)),      # Model options     fish_idx_type = c(\"biom\"),     # indices for fishery     FishAgeComps_LikeType = c(\"Multinomial\"),     # age comp likelihoods for fishery fleet     FishLenComps_LikeType = c(\"none\"),     # length comp likelihoods for fishery     FishAgeComps_Type = c(\"agg_Year_1-terminal_Fleet_1\"),     # age comp structure for fishery     FishLenComps_Type = c(\"none_Year_1-terminal_Fleet_1\"),     # length comp structure for fishery     FishAge_comp_agg_type = c(1),     # ADMB aggregation quirks, ideally get rid of this     FishLen_comp_agg_type = c(0)     # ADMB aggregation quirks, ideally get rid of this   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-survey-indices-and-compositions","dir":"Articles","previous_headings":"","what":"Setup Survey Indices and Compositions","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Setting survey indices compositions follows similar fashion. , supply arrays survey indices associated standard errors (ObsSrvIdx ObsSrvIdx_SE), dimensioned n_regions, n_years, n_srv_fleets. case, modelling three survey fleets, fleet 1 bottom trawl survey, fleet 2 acoustic trawl survey, fleet 3 acoustic vessel opportunity survey. also input survey age composition data length composition data. ObsSrvAgeComps ObsSrvLenComps dimensioned n_regions, n_years, n_bins (n_ages | n_lens), n_sexes, n_srv_fleets. three survey indices biomass-based multinomial likelihoods used fit age-compositions fleets 1 2. However, acoustic vessel oppurtunity survey composition data, fit (hence specified none).","code":"# Setup survey indices and compositions   input_list <- Setup_Mod_SrvIdx_and_Comps(     input_list = input_list,      # data inputs     ObsSrvIdx = sgl_rg_ebswp_data$ObsSrvIdx,     ObsSrvIdx_SE = sgl_rg_ebswp_data$ObsSrvIdx_SE,     UseSrvIdx = sgl_rg_ebswp_data$UseSrvIdx,     ObsSrvAgeComps = sgl_rg_ebswp_data$ObsSrvAgeComps,     ISS_SrvAgeComps = sgl_rg_ebswp_data$ISS_SrvAgeComps,     UseSrvAgeComps = sgl_rg_ebswp_data$UseSrvAgeComps,     ObsSrvLenComps = array(NA_real_, dim = c(1, length(input_list$data$years), length(input_list$data$lens), 1, 3)),     UseSrvLenComps = array(0, dim = c(1, length(input_list$data$years), 3)),     ISS_SrvLenComps = NULL,      # Model options     srv_idx_type = c(\"biom\", \"biom\", \"biom\"),     # abundance and biomass for survey fleet 1, 2, and 3     SrvAgeComps_LikeType = c(\"Multinomial\", \"Multinomial\", \"none\"),     # survey age composition likelihood for survey fleet 1, 2, and 3     SrvLenComps_LikeType = c(\"none\", \"none\", \"none\"),     #  survey length composition likelihood for survey fleet 1, 2, and 3     SrvAgeComps_Type = c(       \"agg_Year_1-terminal_Fleet_1\",       \"agg_Year_1-terminal_Fleet_2\",       \"none_Year_1-terminal_Fleet_3\"     ),     # survey age comp type      SrvLenComps_Type = c(       \"none_Year_1-terminal_Fleet_1\",       \"none_Year_1-terminal_Fleet_2\",       \"none_Year_1-terminal_Fleet_3\"     ),     # survey length comp type      SrvAge_comp_agg_type = c(1, 1, 1),     # ADMB aggregation quirks, ideally get rid of this     SrvLen_comp_agg_type = c(0, 0, 0)     # ADMB aggregation quirks, ideally get rid of this   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setting-up-fishery-selectivity-and-catchability","dir":"Articles","previous_headings":"","what":"Setting up Fishery Selectivity and Catchability","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Fishery selectivity specified vary semi-parametrically pollock model, 2dar1 option specified. , estiamte selectivity deviations penalized framework fix variance values priori fishsel_pe_pars_spec = \"fix\". Moreover, estiamte fishery selectivity deviations dimensions, specify correlations set 0 (corr_opt_semipar = \"corr_zero_y_a_c\"). Thus, semi-parametric deviations collapse simple iid formulation. Additionally, specify underlying selectivity form fishery logistic function. Lastly, single catchability term estimated fit early fishery index utilized model (fish_q_spec = c(\"est_all\")). Fit Model section, demonstrate variance parameters can fixed allow estimation penalized likelihood framework.","code":"# Setup fishery selectivity and catchability   input_list <- Setup_Mod_Fishsel_and_Q(      input_list = input_list,      # Model options     # fishery selectivity, whether continuous time-varying     cont_tv_fish_sel = c(\"2dar1_Fleet_1\"),     fishsel_pe_pars_spec = \"fix\", # doing penalized likelihood for selex devs     fish_sel_devs_spec = \"est_all\", # estimating all sel devs     corr_opt_semipar = \"corr_zero_y_a_c\", # making sure 2d correaltions are 0, collapses to a simple iid case     # fishery selectivity blocks     fish_sel_blocks = c(\"none_Fleet_1\"),     # fishery selectivity form     fish_sel_model = c(\"logist1_Fleet_1\"),     # fishery catchability blocks     fish_q_blocks = c(\"none_Fleet_1\"),     # whether to estiamte all fixed effects for fishery selectivity     fish_fixed_sel_pars = c(\"est_all\"),     # whether to estiamte all fixed effects for fishery catchability     fish_q_spec = c(\"est_all\")   )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setting-up-survey-selectivity-and-catchability","dir":"Articles","previous_headings":"","what":"Setting up Survey Selectivity and Catchability","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Survey selectivity setup similar way. , specify first survey fleet iid parametric deviations selectivity form, second survey fleet 2dar1 semi-parametric deviations. Selectivity survey fleet 3 estimated age composition data available. Therefore, selectivity survey fleet 2 3 shared. , specify selectivity deviations estimated penalized likelihood framework argument srvsel_pe_pars_spec = c(\"fix\", \"fix\", \"fix\") specify set 2dar1 correlations 0, semi-parametric deviations collapse iid formulation (corr_opt_semipar = c(NA, \"corr_zero_y_a_c\", \"corr_zero_y_a_c\")).","code":"# Setup survey selectivity and catchability   input_list <- Setup_Mod_Srvsel_and_Q(     input_list = input_list,      # Model options     # survey selectivity, whether continuous time-varying     cont_tv_srv_sel = c(\"iid_Fleet_1\", \"2dar1_Fleet_2\", \"2dar1_Fleet_3\"),     srvsel_pe_pars_spec = c(\"fix\", \"fix\", \"fix\"), # penalize survey selex devs     srv_sel_devs_spec = c(\"est_all\", \"est_all\", \"none\"), # estimating all srv selex devs     corr_opt_semipar = c(NA, \"corr_zero_y_a_c\", \"corr_zero_y_a_c\"), # setting corelations at 0, so 2dar1 collapses to simple iid semi-parametric devs      # survey selectivity blocks     srv_sel_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\", \"none_Fleet_3\"),     # survey selectivity form     srv_sel_model = c(       \"logist1_Fleet_1\",       \"logist1_Fleet_2\",       \"logist1_Fleet_3\"     ),     # survey catchability blocks     srv_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\", \"none_Fleet_3\"),     # whether to estiamte all fixed effects for survey selectivity     srv_fixed_sel_pars_spec = c(\"est_all\", \"est_all\", \"est_all\"),     # whether to estiamte all fixed effects for survey catchability     srv_q_spec = c(\"est_all\", \"est_all\", \"est_all\")   )    # note that AVO (fleet 3) does not have any comp data, and needs to share selectivity with ATS (fleet 2)   input_list$map$ln_srv_fixed_sel_pars <- factor(c(1, 2, 3, 4, 3, 4))    # share ATS and AVO selex devs   map_srvsel_devs[,,,,3] <- map_srvsel_devs[,,,,2]   input_list$map$ln_srvsel_devs <- factor(map_srvsel_devs)"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"setup-model-weighting","dir":"Articles","previous_headings":"","what":"Setup Model Weighting","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"set data weighted λ\\lambda model. , λ\\lambda values set 1 TMB likelihoods utilized. Thus, data sources weighted either using specified input sample sizes (composition data) specified variances (catch abundance indices).","code":"input_list <- Setup_Mod_Weighting(   input_list = input_list,   sablefish_ADMB = 0,   likelihoods = 1, # using TMB likelihoods   Wt_Catch = 1,   Wt_FishIdx = 1,   Wt_SrvIdx = 1,   Wt_Rec = 1,   Wt_F = 1,   Wt_Tagging = 0,   Wt_FishAgeComps = array(1, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                      input_list$data$n_srv_fleets)),   Wt_FishLenComps = array(1, dim = c(input_list$data$n_regions,                                      length(input_list$data$years),                                      input_list$data$n_sexes,                                      input_list$data$n_srv_fleets)),   Wt_SrvAgeComps = array(1, dim = c(input_list$data$n_regions,                                     length(input_list$data$years),                                     input_list$data$n_sexes,                                     input_list$data$n_srv_fleets)),   Wt_SrvLenComps = array(1, dim = c(input_list$data$n_regions,                                     length(input_list$data$years),                                     input_list$data$n_sexes,                                     input_list$data$n_srv_fleets)) )"},{"path":"https://chengmatt.github.io/SPoRC/articles/f_single_region_ebs_pollock_case_study.html","id":"fit-model-and-plot","dir":"Articles","previous_headings":"","what":"Fit Model and Plot","title":"Setting up a Single Region Model (Eastern Bering Sea Pollock)","text":"Next, can extract elements created input_list object. specify values fix selectivity variances . first case, fishery selectivity variance fixed value 0.075 second case, bottom trawl survey a50 k selectivity variances logistic function fixed 0.075 Lastly, acoustic trawl vessel opportunity surveys specified variance 0.15. details dimensionality fishsel_pe_pars srvsel_pe_pars, please refer Description Model Parameters page. Next, can extract parameter estimates recruitment spawning biomass compare 2024 pollock model. general, see trends recruitment spawning stock biomass align relatively well. However, slight discrepancies estimates, likely due factors discussed start vignette.  Lastly, can also inspect estimates fishery selectivity SPoRC. , show relative selectivity estimates ages 3 - 11 (panels). Note selectivity model can exceed 1, normalize values figure improve interpretability","code":"# extract out lists updated with helper functions data <- input_list$data parameters <- input_list$par mapping <- input_list$map  # selex sigma to fix at, given penalized likelihood parameters$fishsel_pe_pars[,4,,] <- log(0.075) # fishery selex variance parameters$srvsel_pe_pars[,1:2,,1] <- log(0.075) # survey BTS - a50 and delta variance parameters$srvsel_pe_pars[,4,,2] <- log(0.15) # survey ATS and ato variance  # Fit model ebswp_rtmb_model <- fit_model(data,                               parameters,                               mapping,                               random = NULL,                               newton_loops = 3,                               silent = TRUE                               )  # Get standard error report ebswp_rtmb_model$sd_rep <- RTMB::sdreport(ebswp_rtmb_model) # Get recruitment rec_series <- reshape2::melt((ebswp_rtmb_model$rep$Rec)) %>%   mutate(se = ebswp_rtmb_model$sdrep$sd[names(ebswp_rtmb_model$sdrep$value) == 'Rec']) rec_series$Par <- \"Recruitment\"  # Get SSB time-series ssb_series <- reshape2::melt((ebswp_rtmb_model$rep$SSB)) %>%   mutate(se = ebswp_rtmb_model$sdrep$sd[names(ebswp_rtmb_model$sdrep$value) == 'SSB']) ssb_series$Par <- \"Spawning Biomass\"  # bind together ts_df <- rbind(ssb_series,rec_series) %>%   dplyr::rename(Region = Var1, Year = Var2) %>%   dplyr::mutate(Year = Year + 1963, type = 'SPoRC')  # Get actual assessment results ssb_ass <- data.frame(   Region = 1,   Year = 1964:2024,   value = sgl_rg_ebswp_data$SSB[,2],   se = sgl_rg_ebswp_data$SSB[,3],   Par = 'Spawning Biomass',   type = '2024 Pollock Assessment' )  # recruitment rec_ass <- data.frame(   Region = 1,   Year = 1964:2024,   value = sgl_rg_ebswp_data$R[,2],   se = sgl_rg_ebswp_data$R[,3],   Par = 'Recruitment',   type = '2024 Pollock Assessment' )  # bind ts_df <- ts_df %>% bind_rows(ssb_ass, rec_ass) ggplot(ts_df, aes(x = Year, y = value, ymin = value - (1.96 * se),                   ymax = value + (1.96 * se), color = type, fill = type)) +   geom_point(size = 3) +   geom_line() +   facet_wrap(~Par, scales = 'free') +   geom_ribbon(alpha = 0.3, color = NA) +   ggthemes::scale_color_colorblind() +   ggthemes::scale_fill_colorblind() +   labs(y = \"Value\")  +   theme_bw(base_size = 13) +   ylim(0, NA) +   labs(x = 'Year', y = 'Value', color = 'Type', fill = 'Type') reshape2::melt(ebswp_rtmb_model$rep$fish_sel) %>%   mutate(value = value/max(value)) %>%   rename(Region = Var1, Year = Var2, Age = Var3, Sex = Var4, Fleet = Var5) %>%   filter(Age %in% 3:11) %>%   ggplot(aes(x = Year + 1963, y = value)) +   geom_point() +   geom_line() +   facet_wrap(~Age) +   theme_bw(base_size = 15) +   labs(x = 'Year', y = 'Relative Selectivity')"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-model-dimensions","dir":"Articles","previous_headings":"","what":"Setup Model Dimensions","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"initially set model , input list containing data list, parameter list, mapping list needs constructed. aided function Setup_Mod_Dim, users specify vector years, ages, lengths. Additionally, users need specify number regions modeled (n_regions), number sexes modelled (n_sexes), number fishery fleets (n_fish_fleets), number survey fleets (n_srv_fleets)","code":"# Initialize model dimensions and data list input_list <- Setup_Mod_Dim(years = 1:length(mlt_rg_sable_data$years),                             # vector of years (1 - 62)                             ages = 1:length(mlt_rg_sable_data$ages),                             # vector of ages (1 - 30)                             lens = mlt_rg_sable_data$lens,                             # number of lengths (41 - 99)                             n_regions = mlt_rg_sable_data$n_regions,                             # number of regions (5)                             n_sexes = mlt_rg_sable_data$n_sexes,                             # number of sexes (2)                             n_fish_fleets = mlt_rg_sable_data$n_fish_fleets,                             # number of fishery fleet (2)                             n_srv_fleets = mlt_rg_sable_data$n_srv_fleets,                             # number of survey fleets (2)                             verbose = TRUE )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-recruitment-dynamics","dir":"Articles","previous_headings":"","what":"Setup Recruitment Dynamics","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"Following initialization input_list, can pass created object next function (Setup_Mod_Rec) parameterize recruitment dynamics. case spatial model Alaska sablefish, recruitment parameterized : Mean Recruitment, stock recruitment relationship assumed, recruitment bias ramp used (do_bias_ramp = 1), Two values sigmaR used, first value represents early period sigmaR, fixed 0.4, second value represents late period sigmaR, fixed value 1.2. Recruitment deviations estimated penalized likelihood framework, Recruitment deviations estimated years regions, except terminal year, Recruitment sex-ratios fixed 0.5 sex, Initial age structure derived iterating age structure equilibrium, Initial age deviations shared across regions facilitate model convergence","code":"# Setup recruitment stuff (using defaults for other stuff) input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             do_rec_bias_ramp = 0, # not using bias ramp                             sigmaR_switch = 16, # switch to using late sigma in year 16                             dont_est_recdev_last = 1, # don't estimate last rec dev                             sexratio = c(0.5, 0.5), # fix sex ratio at 0.5                              # Model options                             rec_model = \"mean_rec\", # recruitment model                             sigmaR_spec = \"fix\", # fixing                             InitDevs_spec = \"est_shared_r\",                             # initial deviations are shared across regions,                             # but recruitment deviations are region specific                             ln_sigmaR = log(c(0.4, 1.2)),                             # values to fix sigmaR at, or starting values                             ln_global_R0 = log(20),                             # starting value for global R0                             R0_prop = array(c(0.2, 0.2, 0.2, 0.2),                                             dim = c(input_list$data$n_regions - 1))                             # starting value for R0 proportions in multinomial logit space )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-biological-dynamics","dir":"Articles","previous_headings":"","what":"Setup Biological Dynamics","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"Passing input_list updated previous helper function, can parameterize biological dynamics model. Setup_Mod_Biologicals requires data inputs weight--age (WAA) maturity--age (MatAA), dimensioned n_regions, n_years, n_ages, n_sexes. Optional model inputs include single ageing-error matrix AgeingError, dimensioned n_ages, n_ages, size-age transition matrix, whichn dimensioned n_regions, n_years, n_lens, n_ages, n_sexes. case, supplying ageing error matrix size-age transition matrix, given spatial sablefish model incorporates ageing error also fits length composition data (fit_lengths = 1). Given spatial models heavily parameterized natural mortality often poorly estimated, fixing natural mortality M_spec = \"fix\" value 0.104884, specified sex-invariant.","code":"# Setup biological stuff (using defaults for other stuff) input_list <- Setup_Mod_Biologicals(input_list = input_list,                                     WAA = mlt_rg_sable_data$WAA, # weight at age                                     MatAA = mlt_rg_sable_data$MatAA, # maturity at age                                     AgeingError = mlt_rg_sable_data$AgeingError,                                     # ageing error matrix                                     fit_lengths = 1, # fitting lengths                                     SizeAgeTrans = mlt_rg_sable_data$SizeAgeTrans,                                     # size age transition matrix                                     M_spec = \"fix\", # fix natural mortality                                     Fixed_natmort = array(0.104884, dim = c(mlt_rg_sable_data$n_regions,                                                                             length(mlt_rg_sable_data$years),                                                                             length(mlt_rg_sable_data$ages),                                                                             mlt_rg_sable_data$n_sexes))                                     # values to fix natural mortality at )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-movement-and-tagging-dynamics","dir":"Articles","previous_headings":"","what":"Setup Movement and Tagging Dynamics","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"Various options available parameterizing movement dynamics. particular, users can specify number age, year, sex blocks movement. users wish specify blocks aforementioned partitions, list needs supplied detailing blocking structure, number elements list represents number blocks estiamte, elements within list specify range block. instance, spatial model sablefish estimates 3 age blocks, (Movement_ageblk_spec = list(c(1:6), c(7:15), c(16:30))), first element specifies first age block, ranges ages 1 - 6, second element specifies second age block, ranges ages 7 - 15, third element specifies third age block, ranges ages 16 - 30. year sex blocks specified application. Thus, Movement_yearblk_spec Movement_sexblk_spec set \"constant\". Additionally, recruits allowed move, given potential severe confounding recruitment movement allowed (do_recruits_move = 0). Fixed movement used case (use_fixed_movement = 0) vague Dirichlet prior movement (Use_Movement_Prior = 1 Movement_prior = 1.5) used penalize movement away extremes (.e, away 0s 1s). Specification tagging dynamics can bit cumbersome given myriad options available. current application, tagging data longline survey utilized UseTagging = 1 maximum tag liberty 15 years specified max_tag_liberty = 15 tag cohort tracking. cut used minimize computational demands, providing reasonable level movement information. Next, need specify data inputs. primarily include: tag_release_indicator, indicates release year release region given tag cohort, Tagged_Fish, contains number tagged fish tag cohort, Obs_Tag_Recap, contains observed tag recaptures Following specification data inputs, can specify several model options. , can specify likelihood type utilized tagging data (Tag_LikeType = \"NegBin\"), specified negative binomial, overdispersion parameter estimated. can also specify tag mixing period (mixing_period = 2), indicates model fit tag recapture data release_year + 1, given tagged individuals fully mixed. Additionally, function also takes time tagging argument t_tagging, specified value 0.5 indicate tagging happens midway year, movement occur tag release year. Users can also specify tagging fishing natural mortality occurs. application, tagging fishing mortality / selectivity specified tag_selex = \"SexSp_AllFleet\", indicates selectivity curve utilized fit tag data sex-specific derived weighting fishery fleet-specific selectivity fishing mortality. option tag_natmort = \"AgeSp_SexSp\" specifies tagged individuals experience age-sex-specific natural mortality. options, users can inspect ?Setup_Mod_Tagging. Next, can specify whether tag reporting rate priors used (Use_TagRep_Prior = 1) type prior used (TagRep_PriorType = 0). , tag reporting priors fact used, symmetric beta prior specified. Given , symmetric beta prior require input mean value tag reporting (TagRep_mu = NA), require input standard deviation (TagRep_sd = 5), larger values penalize extremes . specify move_age_tag_pool move_sex_tag_pool arguments indicate model tagging data fit. case, fitting tag data respective age sex-blocks reduce computational demand. users wish fit tag data individual ages sexes, move_age_tag_pool specified list(1,2,3,4 ..., n_ages) move_sex_tag_pool list(1,2). initial tagging mortality chronic tag shedding often confounded mortality processes difficult estiamte, fix parameters application (Init_Tag_Mort_spec = \"fix\" Tag_Shed_spec = \"fix\"). Lastly, specify estimation tag reporting rates, time-varying (estimated 2 blocks; see input supplied Tag_Reporting_blocks argument) shared across regions (TagRep_spec = \"est_shared_r\").","code":"# setting up movement parameterization input_list <- Setup_Mod_Movement(input_list = input_list,                                  # Model options                                  Movement_ageblk_spec = list(c(1:6), c(7:15), c(16:30)),                                  # estimating movement in 3 age blocks                                  # (ages 1-6, ages 7-15, ages 16-30)                                  Movement_yearblk_spec = \"constant\", # time-invariant movement                                  Movement_sexblk_spec = \"constant\", # sex-invariant movement                                  do_recruits_move = 0, # recruits do not move                                  use_fixed_movement = 0, # estimating movement                                  Use_Movement_Prior = 1, # priors used for movement                                  Movement_prior = 1.5                                  # vague prior to penalize movement away from the extremes                                  ) # setting up tagging parameterization input_list <- Setup_Mod_Tagging(input_list = input_list,                                 UseTagging = 1, # using tagging data                                 max_tag_liberty = 15, # maximum number of years to track a cohort                                  # Data Inputs                                 tag_release_indicator = mlt_rg_sable_data$tag_release_indicator,                                 # tag release indicator (first col = tag region,                                 # second col = tag year),                                 # total number of rows = number of tagged cohorts                                 Tagged_Fish = mlt_rg_sable_data$Tagged_Fish, # Released fish                                 # dimensioned by total number of tagged cohorts, (implicitly                                 # tracks the release year and region), age, and sex                                 Obs_Tag_Recap = mlt_rg_sable_data$Obs_Tag_Recap,                                 # dimensioned by max tag liberty, tagged cohorts, regions,                                 # ages, and sexes                                  # Model options                                 Tag_LikeType = \"NegBin\", # Negative Binomial                                 mixing_period = 2, # Don't fit tagging until release year + 1                                 t_tagging = 0.5, # tagging happens midway through the year,                                 # movement does not occur within that year                                 tag_selex = \"SexSp_AllFleet\", # tagging recapture selectivity                                 # is a weighted average of fishery selectivity of two fleets                                 tag_natmort = \"AgeSp_SexSp\", # tagging natural mortality is                                 # age and sex-specific                                 Use_TagRep_Prior = 1, # tag reporting rate priors are used                                 TagRep_PriorType = 0, # symmetric beta is used                                 # for tag reporting prior                                 TagRep_mu = NA, # Tag reporting mean                                 TagRep_sd = 5, # tag reporting sd controlling symmetric beta                                 move_age_tag_pool = list(c(1:6), c(7:15), c(16:30)), # whether or                                 # not to pool tagging data when fitting (for computational cost)                                 move_sex_tag_pool = list(c(1:2)), # whether or not to pool                                 # sex-specific data when fitting                                 Init_Tag_Mort_spec = \"fix\", # fixing initial tag mortality                                 Tag_Shed_spec = \"fix\", # fixing chronic shedding                                 TagRep_spec = \"est_shared_r\", # tag reporting rates are                                 # not region specific                                 # Time blocks for tag reporting rates                                 Tag_Reporting_blocks = c(                                   paste(\"Block_1_Year_1-35_Region_\",                                         c(1:input_list$data$n_regions), sep = ''),                                   paste(\"Block_2_Year_36-terminal_Region_\",                                         c(1:input_list$data$n_regions), sep = '')                                 ),                                  # Specify starting values or fixing values                                 ln_Init_Tag_Mort = log(0.1), # fixing initial tag mortality                                 ln_Tag_Shed = log(0.02),  # fixing tag shedding                                 ln_tag_theta = log(0.5),                                 # starting value for tagging overdispersion                                 Tag_Reporting_Pars = array(log(0.2 / (1-0.2)),                                                            dim = c(input_list$data$n_regions, 3))                                 # starting values for tag reporting pars  )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-catch-and-fishing-mortality","dir":"Articles","previous_headings":"","what":"Setup Catch and Fishing Mortality","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"general, specifying catch fishing mortality relatively straightforward. Users need supply several data inputs, include array observed catches ObsCatch, catch type (Catch_Type), indicates gave region-specific region-aggregated catch, UseCatch, indicates whether fit catch data given region year. Users can inspect mlt_rg_sable_data data object understand dimensions data inputs, refer Description Model Data Dimensions vignette. Given going using TMB-style likelihoods, also specifying sigma catch fixed (sigmaC_spec = 'fix') value 0.02 fleets regions (ln_sigmaC = array(log(0.02), dim = c(input_list$data$n_regions, input_list$data$n_fish_fleets))).","code":"input_list <- Setup_Mod_Catch_and_F(input_list = input_list,                                     # Data inputs                                     ObsCatch = mlt_rg_sable_data$ObsCatch,                                     Catch_Type = mlt_rg_sable_data$Catch_Type,                                     UseCatch = mlt_rg_sable_data$UseCatch,                                     # Model options                                     Use_F_pen = 1,                                     # whether to use f penalty, == 0 don't use, == 1 use                                     sigmaC_spec = 'fix',                                     ln_sigmaC =                                       array(log(0.02), dim = c(input_list$data$n_regions,                                                                input_list$data$n_fish_fleets)),                                     # fixing catch sd at small value                                     ln_F_mean = array(-2, dim = c(input_list$data$n_regions,                                                                   input_list$data$n_fish_fleets))                                     # some starting values for fishing mortality )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-index-and-composition-data-fishery-and-survey","dir":"Articles","previous_headings":"","what":"Setup Index and Composition Data (Fishery and Survey)","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"Setting fishery (survey) index composition data can similarly bit cumbersome, given number data inputs may required. Users can inspect mlt_rg_sable_data data object understand dimensions data inputs, refer Description Model Data Dimensions vignette. data inputs include following: 1. ObsFishIdx ObsSrvIdx, specifies observed indices 2. ObsFishIdx_SE ObsSrvIdx_SE, specifies standard errors observed indices 3. UseFishIdx UseSrvIdx, indicate whether indices fit 4. ObsFishAgeComps ObsSrvAgeComps contains observed age compositions 5. UseFishAgeComps UseSrvAgeComps indicates whether age compositions fit 6. ISS_FishAgeComps ISS_SrvAgeComps indicates input sample sizes used weight age compositions 7. ObsFishLenComps ObsSrvLenComps contains observed length compositions 8. UseFishLenComps UseSrvLenComps indicates whether length compositions fit 9. ISS_FishLenComps ISS_SrvLenComps indicates input sample sizes used weight length compositions Model options available similar described Setting Single Region Model (Alaska Sablefish) vignette. case fishery indices, fish_idx_type specified none given used. Age composition likelihoods specified FishAgeComps_LikeType = c(\"Multinomial\", \"none\"), indicating first fleet uses Multinomial second fleet age compositions. Fishery length compositions specified Multinomial fleets. respect FishAgeComps_Type FishLenComps_Type, specified spltRjntS availiable indicate compositions sum 1 jointly across sexes, split given region. arguments expected survey indices compositions. , 2 survey fleets specified, abundance based fleets. Age compositions fleets joint sex, split region, length compositions used. compositions survey fleets assume Mulinomial likelihood.","code":"input_list <- Setup_Mod_FishIdx_and_Comps(input_list = input_list,                                           # data inputs                                           ObsFishIdx = mlt_rg_sable_data$ObsFishIdx,                                           ObsFishIdx_SE = mlt_rg_sable_data$ObsFishIdx_SE,                                           UseFishIdx =  mlt_rg_sable_data$UseFishIdx,                                           ObsFishAgeComps = mlt_rg_sable_data$ObsFishAgeComps,                                           UseFishAgeComps = mlt_rg_sable_data$UseFishAgeComps,                                           ISS_FishAgeComps = mlt_rg_sable_data$ISS_FishAgeComps,                                           ObsFishLenComps = mlt_rg_sable_data$ObsFishLenComps,                                           UseFishLenComps = mlt_rg_sable_data$UseFishLenComps,                                           ISS_FishLenComps = mlt_rg_sable_data$ISS_FishLenComps,                                            # Model options                                           fish_idx_type = c(\"none\", \"none\"),                                           # fishery indices not used                                           FishAgeComps_LikeType =                                             c(\"Multinomial\", \"none\"),                                           # age comp likelihoods for fishery fleet 1 and 2                                           FishLenComps_LikeType =                                             c(\"Multinomial\", \"Multinomial\"),                                           # length comp likelihoods for fishery fleet 1 and 2                                           FishAgeComps_Type =                                             c(\"spltRjntS_Year_1-terminal_Fleet_1\",                                               \"none_Year_1-terminal_Fleet_2\"),                                           # age comp structure for fishery fleet 1 and 2                                           FishLenComps_Type =                                             c(\"spltRjntS_Year_1-terminal_Fleet_1\",                                               \"spltRjntS_Year_1-terminal_Fleet_2\"),                                           # length comp structure for fishery fleet 1 and 2                                           FishAge_comp_agg_type = c(NA,NA),                                           # ADMB aggregation quirks, ideally get rid of this                                           FishLen_comp_agg_type = c(NA,NA)                                           # ADMB aggregation quirks, ideally get rid of this ) # Survey Indices and Compositions input_list <- Setup_Mod_SrvIdx_and_Comps(input_list = input_list,                                          # data inputs                                          ObsSrvIdx = mlt_rg_sable_data$ObsSrvIdx,                                          ObsSrvIdx_SE = mlt_rg_sable_data$ObsSrvIdx_SE,                                          UseSrvIdx =  mlt_rg_sable_data$UseSrvIdx,                                          ObsSrvAgeComps = mlt_rg_sable_data$ObsSrvAgeComps,                                          ISS_SrvAgeComps = mlt_rg_sable_data$ISS_SrvAgeComps,                                          UseSrvAgeComps = mlt_rg_sable_data$UseSrvAgeComps,                                          ObsSrvLenComps = mlt_rg_sable_data$ObsSrvLenComps,                                          UseSrvLenComps = mlt_rg_sable_data$UseSrvLenComps,                                          ISS_SrvLenComps = mlt_rg_sable_data$ISS_SrvLenComps,                                           # Model options                                          srv_idx_type = c(\"abd\", \"abd\"),                                          # abundance and biomass for survey fleet 1 and 2                                          SrvAgeComps_LikeType =                                            c(\"Multinomial\", \"Multinomial\"),                                          # survey age composition likelihood for survey fleet                                          # 1, and 2                                          SrvLenComps_LikeType =                                            c(\"none\", \"none\"),                                          #  no length compositions used for survey                                          SrvAgeComps_Type = c(\"spltRjntS_Year_1-terminal_Fleet_1\",                                                               \"spltRjntS_Year_1-terminal_Fleet_2\"),                                          # survey age comp type                                          SrvLenComps_Type = c(\"none_Year_1-terminal_Fleet_1\",                                                               \"none_Year_1-terminal_Fleet_2\"),                                          # survey length comp type                                          SrvAge_comp_agg_type = c(NA, NA),                                          # ADMB aggregation quirks, ideally get rid of this                                          SrvLen_comp_agg_type = c(NA, NA)                                          # ADMB aggregation quirks, ideally get rid of this )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-selectivity-and-catchability-fishery-and-survey","dir":"Articles","previous_headings":"","what":"Setup Selectivity and Catchability (Fishery and Survey)","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"spatial sablefish application, fishery/survey selectivity catchability processes assumed spatially-invariant. Similar single region case, users need specify several selectivity options, include: Whether continuous time-varying selectivity processes (cont_tv_fish_sel cont_tv_srv_sel). case study, continuous time-varying selectivity used specified none_Fleet_x, Whether selectivity blocks (fish_sel_blocks srv_sel_blocks). application assumes 2 time-blocks fixed-gear fleet time-invariant selectivity trawl fishery, type parametric selectivity form specify different fleets (fish_sel_model srv_sel_model). , assume logist1 fixed-gear fleet (logistic specified a50 k), gamma dome-shaped selectivity trawl fleet, number catchability blocks specified (fish_q_blocks srv_q_blocks). Given fishery indices used, fishery catchability blocks estimated (fish_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\")), fishery survey selectivity parameters estimated (fish_fixed_sel_pars). case sablefish, first specifying selectivity parameters (regions, time-blocks, sexes) estimated. However, nuanced parameter sharing across regions, sexes, time-blocks used help stabilize model (last part code chunk), easily generalized. Thus, users can manually extract map list updated input_list object modify parameters fixed shared, Lastly, fishery survey catchability estimated (fish_q_spec srv_q_spec). fishery, catchability estimated fishery indices utilized (fix). , arguments expected setting survey selectivity, similarly nuanced parameter fixing sharing help facilitate model stability.","code":"# Fishery Selectivity and Catchability input_list <- Setup_Mod_Fishsel_and_Q(input_list = input_list,                                        # Model options                                       cont_tv_fish_sel = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       # fishery selectivity, whether continuous time-varying                                        # fishery selectivity blocks                                       fish_sel_blocks =                                         c(\"Block_1_Year_1-56_Fleet_1\",                                           # block 1, fishery ll selex                                           \"Block_2_Year_57-terminal_Fleet_1\",                                           # block 3 fishery ll selex                                           \"none_Fleet_2\"),                                       # no blocks for trawl fishery                                        # fishery selectivity form                                       fish_sel_model =                                         c(\"logist1_Fleet_1\",                                           \"gamma_Fleet_2\"),                                        # fishery catchability blocks                                       fish_q_blocks =                                         c(\"none_Fleet_1\",                                           \"none_Fleet_2\"),                                       # no blocks since q is not estimated                                        # whether to estimate all fixed effects                                       # for fishery selectivity and later modify                                       # to fix and share parameters                                       fish_fixed_sel_pars =                                         c(\"est_all\", \"est_all\"),                                        # whether to estimate all fixed effects                                       # for fishery catchability                                       fish_q_spec =                                         c(\"fix\", \"fix\")                                       # fix fishery q since not used )   # Custom parameter sharing for fishery selectivity map_ln_fish_fixed_sel_pars <- input_list$par$ln_fish_fixed_sel_pars # mapping fishery selectivity  # Fixed gear fleet, unique parameters for each sex (time block 1) map_ln_fish_fixed_sel_pars[,1,1,1,1] <- 1 # a50, female, time block 1, fixed gear map_ln_fish_fixed_sel_pars[,2,1,1,1] <- 2 # delta, female, time block 1, fixed gear # (shared with time block 2 and sex) map_ln_fish_fixed_sel_pars[,1,1,2,1] <- 3 # a50, male, time block 1, fixed gear map_ln_fish_fixed_sel_pars[,2,1,2,1] <- 2 # delta, male, time block 1, fixed gear # (shared with time block 2 and sex)  # time block 2, fixed gear fishery map_ln_fish_fixed_sel_pars[,1,2,1,1] <- 4 # a50, female, time block 2, fixed gear map_ln_fish_fixed_sel_pars[,2,2,1,1] <- 2 # delta, female, time block 2, fixed gear # (shared with time block 1 and sex) map_ln_fish_fixed_sel_pars[,1,2,2,1] <- 5 # a50, male, time block 2, fixed gear map_ln_fish_fixed_sel_pars[,2,2,2,1] <- 2 # delta, male, time block 2, fixed gear # (shared with time block 1 and sex)  # time block 1 and 2, trawl gear fishery map_ln_fish_fixed_sel_pars[,1,1,1,2] <- 6 # amax, female, time block 1, trawl gear map_ln_fish_fixed_sel_pars[,2,1,1,2] <- 7 # delta, female, time block 1, trawl gear # (shared by sex) map_ln_fish_fixed_sel_pars[,1,1,2,2] <- 8 # amax, male, time block 1, trawl gear map_ln_fish_fixed_sel_pars[,2,1,2,2] <- 7 # delta, male, time block 1, trawl gear # (shared by sex) map_ln_fish_fixed_sel_pars[,,2,,2] <- NA # no parameters estimated for time block 2 trawl gear  input_list$map$ln_fish_fixed_sel_pars <- factor(map_ln_fish_fixed_sel_pars) # input into map list input_list$par$ln_fish_fixed_sel_pars[] <- log(5) # some more inforamtive starting values input_list <- Setup_Mod_Srvsel_and_Q(input_list = input_list,                                       # Model options                                      # survey selectivity, whether continuous time-varying                                      cont_tv_srv_sel =                                        c(\"none_Fleet_1\",                                          \"none_Fleet_2\"),                                       # survey selectivity blocks                                      srv_sel_blocks =                                        c(\"none_Fleet_1\",                                          \"none_Fleet_2\"                                        ), # no blocks for jp and domestic survey                                       # survey selectivity form                                      srv_sel_model =                                        c(\"logist1_Fleet_1\",                                          \"logist1_Fleet_2\"),                                       # survey catchability blocks                                      srv_q_blocks =                                        c(\"none_Fleet_1\",                                          \"none_Fleet_2\"),                                       # whether to estiamte all fixed effects                                      # for survey selectivity and later                                      # modify to fix/share parameters                                      srv_fixed_sel_pars_spec =                                        c(\"est_all\",                                          \"est_all\"),                                       # whether to estiamte all                                      # fixed effects for survey catchability                                      # spatially-invariant q                                      srv_q_spec =                                        c(\"est_shared_r\",                                          \"est_shared_r\"),                                       # Starting values for survey catchability                                      ln_srv_q = array(9,                                                       dim = c(input_list$data$n_regions, 1,                                                               input_list$data$n_srv_fleets)) )  # Custom mapping survey selectivity stuff map_ln_srv_fixed_sel_pars <- input_list$par$ln_srv_fixed_sel_pars # set up mapping factor stuff  # Coop survey (japanese) map_ln_srv_fixed_sel_pars[,1,1,1,1] <- 1 # a50, coop survey, time block 1, female map_ln_srv_fixed_sel_pars[,2,1,1,1] <- 2 # delta, coop survey, time block 1, female # (sharing with domestic survey) map_ln_srv_fixed_sel_pars[,1,1,2,1] <- 3 # a50, coop survey, time block 1, male map_ln_srv_fixed_sel_pars[,2,1,2,1] <- 4 # delta, coop survey, time block 1, male # (sharing with domestic survey)  # domestic survey map_ln_srv_fixed_sel_pars[,1,1,1,2] <- 5 # a50, domestic survey, time block 1, female map_ln_srv_fixed_sel_pars[,2,1,1,2] <- 2 # delta, domestic survey, time block 1, female # (sharing with coop survey) map_ln_srv_fixed_sel_pars[,1,1,2,2] <- 6 # a50, domestic survey, time block 1, male map_ln_srv_fixed_sel_pars[,2,1,2,2] <- 4 # delta, domestic survey, time block 1, male # (sharing with coop survey)  input_list$map$ln_srv_fixed_sel_pars <- factor(map_ln_srv_fixed_sel_pars)  # input into map list input_list$par$ln_srv_fixed_sel_pars[] <- log(5) # some more informative starting values"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"setup-model-weighting","dir":"Articles","previous_headings":"","what":"Setup Model Weighting","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"Finally, can specify want model weighting conducted. case, using TMB-style likelihoods (likelihoods = 1) data sources weighted user specified sigmas standard errors. Thus, remaining arguments Wt_Catch, Wt_FishIdx, Wt_SrvIdx, Wt_Rec, Wt_F specified 1. Additionally, Francis re-weighting used case study composition weights similarly specified values 1 (Wt_FishAgeComps, Wt_FishLenComps, Wt_SrvAgeComps, Wt_SrvLenComps).","code":"# set up model weighting stuff input_list <- Setup_Mod_Weighting(input_list = input_list,                                   sablefish_ADMB = 0,                                   # don't use sablefish single region ADMB quirks                                   likelihoods = 1, # using TMB-style likelihoods,                                   # and weight using sigmas, instead of lambdas                                   # and sigmas together                                   Wt_Catch = 1,                                   Wt_FishIdx = 1,                                   Wt_SrvIdx = 1,                                   Wt_Rec = 1,                                   Wt_F = 1,                                   Wt_Tagging = 1,                                   # Composition model weighting                                   Wt_FishAgeComps =                                     array(1, dim = c(input_list$data$n_regions,                                                      length(input_list$data$years),                                                      input_list$data$n_sexes,                                                      input_list$data$n_fish_fleets)),                                   Wt_FishLenComps =                                     array(1, dim = c(input_list$data$n_regions,                                                      length(input_list$data$years),                                                      input_list$data$n_sexes,                                                      input_list$data$n_fish_fleets)),                                   Wt_SrvAgeComps =                                     array(1, dim = c(input_list$data$n_regions,                                                      length(input_list$data$years),                                                      input_list$data$n_sexes,                                                      input_list$data$n_srv_fleets)),                                   Wt_SrvLenComps =                                     array(1, dim = c(input_list$data$n_regions,                                                      length(input_list$data$years),                                                      input_list$data$n_sexes,                                                      input_list$data$n_srv_fleets)) )"},{"path":"https://chengmatt.github.io/SPoRC/articles/g_spatial_sablefish_case_study.html","id":"fit-model-and-plot","dir":"Articles","previous_headings":"","what":"Fit Model and Plot","title":"Setting up a Spatial Model (Alaska Sablefish)","text":"done setup! Now, can run model. aided fit_model function, expects data, mapping, parameters list uses MakeADFUN function internally. lists can extracted input_list constructed. report file extracted internally fit_model standard errors can extracted using RTMB::sdreport function. word caution, take run! Inspecting results spatial model, appears highest spawning biomass occurs CGOA, followed EGOA. Western regions generally demonstrate relatively comparable levels spawning biomass. Additionally, western regions (BS AI) along CGOA appear exhibit highest recruitment levels.","code":"# extract out lists updated with helper functions data <- input_list$data parameters <- input_list$par mapping <- input_list$map  # Fit model sabie_rtmb_model <- fit_model(data,                               parameters,                               mapping,                               random = NULL,                               newton_loops = 5,                               silent = TRUE                               )  # Get standard error report sabie_rtmb_model$sd_rep <- RTMB::sdreport(sabie_rtmb_model) # Get recruitment time-series rec_series <- reshape2::melt((sabie_rtmb_model$rep$Rec)) rec_series$Par <- \"Recruitment\"  # Get SSB time-series ssb_series <- reshape2::melt((sabie_rtmb_model$rep$SSB)) ssb_series$Par <- \"Spawning Biomass\"  ts_df <- rbind(ssb_series,rec_series) # bind together  # Do some data munging here ts_df <- ts_df %>% dplyr::rename(Region = Var1, Year = Var2) %>%    dplyr::mutate(Region = dplyr::case_when(     Region == 1 ~ 'BS',     Region == 2 ~ 'AI',     Region == 3 ~ 'WGOA',     Region == 4 ~ 'CGOA',     Region == 5 ~ 'EGOA'   ),   Region = factor(Region, levels = c(\"BS\", \"AI\", \"WGOA\", \"CGOA\", \"EGOA\")),   Year = Year + 1959)  # plot! ggplot(ts_df, aes(x = Year, y = value, color = Region)) +   geom_line(size = 1.3) +   facet_grid(Par~Region, scales = \"free_y\") +   ggthemes::scale_color_colorblind() +   labs(y = \"Value\")  +   theme_bw(base_size = 13) +   theme(legend.position = 'none')"},{"path":"https://chengmatt.github.io/SPoRC/articles/h_closed_loop_simulations.html","id":"define-operating-model","dir":"Articles","previous_headings":"","what":"Define Operating Model","title":"Run Closed Loop Simulations","text":"can define operating model want condition population . Parameter estimates used purely hypothetical generally represents short-lived species. Operating model simulation can defined following code: can create variety simulation objects store results : Initial values fishing mortality need supplied. case, array Fmort gets populated values according specified fishing mortality patterns, remaining values following feedback_start_yr = 25 left zeros, populated closed-loop simulation. Fishery selectivity dynamics can specified following function: Similarly, survey dynamics can defined, user can define observation error survey, survey catchability, survey selectivity: Recruitment dynamics can defined code chunk , various options available, including whether recruits move, recruitment sex-ratio, recruitment parameters recruitment functional forms, well whether recruitment occurs globally locally (applicable spatial context). , region 1 assumed productive region 2. Biological features population can defined code chunk , ability define natural mortality values, weight--age, maturity--age, patterns biological dynamics. movement dynamics can incredibly complex, designed users supply defined movement “matrix”. matrix needs input sim_list object use. , defining movement individuals move productive region (region 1) less Lastly, observation processes need defined simulation, includes observations tagging data, survey indices, fishery survey age compositions. done following functions: operating model specifications now saved sim_list, can later used within closed-loop simulation. Following operating model specification, can define want estimation model . demonstration purposes, directly mimicking operating model specification (self-test).","code":"# Set up model dimensions sim_list <- Setup_Sim_Dim(n_sims = 5, # number of simulations to conduct                           n_yrs = 50, # number of years                           n_regions = 2, # number of regions                           n_ages = 8, # number of ages                           n_sexes = 1, # number of sexes                           n_fish_fleets = 1, # number of fishery fleets                           n_srv_fleets = 1, # number of survey fleets                           run_feedback = T, # specifies whether to run this as a closed-loop                           feedback_start_yr = 25 # when the closed loop starts                           ) # set up containers sim_list <- Setup_Sim_Containers(sim_list) # Setup fishing mortality sim_list <- Setup_Sim_FishMort(sim_list = sim_list, # simulation list defined from above                                sigmaC = 1e-3, # observation error for catch                                init_F_vals = matrix(0, nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets), # initial F values to impose on initial age structure                                Fmort_pattern = matrix(c('one-way', \"one-way\"), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets), # fishing mortality pattern                                Fmort_start = matrix(c(0.01, 0.01), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets), # start value of fishing mortality                                Fmort_fct = matrix(c(50, 50), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets), # factor to multiply fmort_start by to reach apicial F                                proc_error = FALSE, # whether or not to have fishing mortality process error                                proc_error_sd = 0 # process error on fishing mortality ) sim_list <- Setup_Sim_FishSel(sel_model = matrix(c('logistic', \"logistic\"), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets), # selex model                               # a50, k for logistic shared across regions                               fixed_fish_sel_pars = array(c(3,3,1,1), dim = c(sim_list$n_regions, sim_list$n_sexes, sim_list$n_fish_fleets, 2)),                               sim_list = sim_list # simulation list from previous code chunk ) sim_list <- Setup_Sim_Survey(sim_list = sim_list,                              sigmaSrvIdx = array(0.05, dim = c(sim_list$n_regions, sim_list$n_srv_fleets)), # survey observation error                              base_srv_q = array(1, dim = c(sim_list$n_regions, sim_list$n_srv_fleets)), # base survey catchability value                              srv_q_pattern = matrix(c('constant', \"constant\"), nrow = sim_list$n_regions, ncol = sim_list$n_srv_fleets), # catchability pattern                              sel_model = matrix(c('logistic', \"logistic\"), nrow = sim_list$n_regions, ncol = sim_list$n_srv_fleets), # selectivity model                              # a50, k, for logistic shared across regions                              fixed_srv_sel_pars = array(c(3,3,1,1), dim = c(sim_list$n_regions, sim_list$n_sexes, sim_list$n_srv_fleets, 2)) ) # Setup recruitment stuff sim_list <- Setup_Sim_Rec(   sim_list = sim_list,   do_recruits_move = \"dont_move\", # == 0, recruits don't move , == 1 recruits move   base_rec_sexratio = 1, # single sex   rec_sexratio_vary = \"constant\", # sex ratio type   base_r0 = c(100, 50),   r0_vary = \"constant\", # R0 type   base_h = c(0.8, 0.8), # base steepness values   init_sigmaR = 0.5, # inital deviations variability   sigmaR = 0.5, # sigma R   recruitment_opt = \"bh_rec\", # recruitment option   rec_dd = \"global\", # recruitment deviations density dependence   init_dd = \"global\", # initial age deviations density dependence   rec_lag = 1 # recruitment ssb lag ) sim_list <- Setup_Sim_Biologicals(   sim_list = sim_list,   base_M_value = array(0.5, dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sims)), # base M value   M_pattern = \"constant\", # M pattern   base_WAA_values = array(rep(5 / (1 + exp(-1 * (1:sim_list$n_ages - 5))), each = sim_list$n_regions * sim_list$n_sexes),                           dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes)), # weight-at-age values   base_WAA_fish_values = array(rep(5 / (1 + exp(-1 * (1:sim_list$n_ages - 5))), each = sim_list$n_regions * sim_list$n_sexes),                              dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes, sim_list$n_fish_fleets)), # weight at age fishery   WAA_pattern = \"constant\", # weight-at-age patterns   base_Maturity_AA_values = array(rep(1 / (1 + exp(-2 * (1:sim_list$n_ages - 5))), each = sim_list$n_regions * sim_list$n_sexes),                                   dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes)), # matrutiy at age values   Maturity_AA_pattern = \"constant\" # maturity at age patterns ) ref <- 1 movement_matrix <- array(0, dim = c(sim_list$n_regions, sim_list$n_regions, sim_list$n_yrs, sim_list$n_ages, sim_list$n_sexes, sim_list$n_sims)) # From, To base <- matrix(c(0, 1), sim_list$n_regions, sim_list$n_regions, byrow = TRUE)  # Plug in movement process error for(sim in 1:sim_list$n_sims) {   for(a in 1:sim_list$n_ages) {     for(s in 1:sim_list$n_sexes) {       for(y in 1:sim_list$n_yrs) {         for(r in 1:sim_list$n_regions) {           tmp_move <- base[r,]           tmp_move[-ref] <- tmp_move[-ref]           movement_matrix[r,,y,a,s,sim] <- exp(tmp_move) / sum(exp(tmp_move))         } # end r loop       } # end y loop     } # end s loop   } # end a loop } # end sim loop  sim_list$movement_matrix <- movement_matrix sim_list <- Setup_Sim_Tagging(   sim_list = sim_list,   n_tags = 5000, # number of total tags to release in a year   max_liberty = 30, # maximum number of years to track a cohort   tag_years = seq(1, sim_list$n_yrs, 1), # number of years tagging occurs   t_tagging = 0.5, # time of tagging   base_Tag_Reporting = c(0.2, 0.2), # base tag reporting rates   Tag_Reporting_pattern = \"constant\", # tag reporting rate pattern   Tag_Ind_Mort = 0, # initial tag induced mortality   Tag_Shed = 0 # chronic tag shedding )  # Setup observation processes sim_list <- Setup_Sim_Observation_Proc(   sim_list = sim_list,   Comp_Structure = \"spltR_jntS\", # how compositions should be structured   Comp_Srv_Like = \"Multinomial\", # survey comp likelihood   Comp_Fish_Like = \"Multinomial\", # fishery comp likelihood   ISS_FishAge_Pattern = 'constant', # input sample size pattern (should be constant in closed loop)   FishAgeTheta = NA, # optional parameters for dirichlet-multinomial   SrvAgeTheta = NA, # optional parameters for dirichlet-multinomial   Srv_Like_Pars = NA, # optional parameters for dirichlet-multinomial   base_ISS_FishAge = 500, # base sample size for fishery ages   base_ISS_SrvAge = 500, # base sample size for survey ages   Tag_Like = \"Poisson\", # tag likelihood   Tag_Like_Pars = NA # tag likelihood parameters )"},{"path":"https://chengmatt.github.io/SPoRC/articles/h_closed_loop_simulations.html","id":"define-estimation-model","dir":"Articles","previous_headings":"","what":"Define Estimation Model","title":"Run Closed Loop Simulations","text":"define estimation model, creating skeleton data, parameter, mapping lists using maximum number years simulation (int case, specified 100), get truncated year total number simulation years using Get_Feedback_Data function. Note specifications described , almost data objects specified either 0s NAs. get replaced later , using Get_Feedback_Data function. , first set general model dimensions: can setup modeled recruitment dynamics. , specifying Beverton-Holt stock recruitment function, global density-dependence. Moreover, fixing steepness values specified operating model. Biological values similarly specified values defined operating model following function. , weight--age maturity--age fixed true values, natural mortality freely estimated. also estimate movement, given tagging data simulated. Movement specified constant across ages, years, sexes. Fishery survey data, along associated observation processes need specified. includes catch composition data. Note fishery survey composition data, input sample size provided left NA 0s. almost ! need specify fishery survey selectivity catchability processes. case, single fishery survey fleet operates, selectivity specified logistic fishery survey. Selectivity time-spatially-invariant. Catchability estimated survey (since isn’t fishery index simulated) also time- spatially-invariant. Observation processes tagging data need defined. , assuming Poisson tag likelihood (operating model), constant tag reporting rates freely estimated. Note tag release indicator must defined (indicates tag cohort (rows), tag region (first column), tag release year (second column)). Lastly, can set model weights estimation model following function. , λ\\lambda weights used, thus specified value 1. Now, can create skeleton data, parameters, mapping lists, define estimationg model. dimensions lists get adjusted, get adjusted later . defining operating estimation model, can now setup closed-loop simulation. closed-loop simulation requires harvest control rule defined user. case, using threshold control rule, type rule can defined. Note harvest control rule defined must function arguments x takes spawning biomass input, frp, takes fishery reference point, brp, takes biological reference point. additional arguments specified defaults used. can setup simulation environment (external global) can used store simulation outputs Setup_sim_env function.","code":"# Initialize model dimensions and data list input_list <- Setup_Mod_Dim(years = 1:sim_list$n_yrs, # vector of years                             ages = 1:sim_list$n_ages, # vector of ages                             lens = 1, # number of lengths                             n_regions = sim_list$n_regions, # number of regions                             n_sexes = sim_list$n_sexes, # number of sexes                             n_fish_fleets = sim_list$n_fish_fleets, # number of fishery fleet                             n_srv_fleets = sim_list$n_srv_fleets, # number of survey fleets                             verbose = F # whether or not to return messages                             ) # helper to define steepness starting values inv_steepness <- function(s) qlogis((s - 0.2) / 0.8)  # Setup recruitment stuff (using defaults for other stuff) input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             ln_sigmaR = log(c(0.5, 0.5)), # sigmaR for model                             rec_model = \"bh_rec\", # recruitment model                             sigmaR_spec = \"fix\", # fix sigmaR                             InitDevs_spec = \"est_shared_r\", # estimated global initial deviations                             RecDevs_spec = \"est_shared_r\", # estimate global recruitment deviations                             rec_dd = \"global\", # global recruitment density dependence                             rec_lag = 1, # recruitment ssb lag                             h_spec = \"fix\", # fixing steepness                             steepness_h = inv_steepness(c(0.8, 0.8)) # steepness values in bounded logit space                             ) input_list <- Setup_Mod_Biologicals(input_list = input_list,                                     WAA = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), input_list$data$n_sexes)), # weight at age                                      MatAA = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), input_list$data$n_sexes)), # maturity at age                                      ln_M = log(0.5) # natural mortality value                                     ) input_list <- Setup_Mod_Movement(input_list = input_list,                                  # Model options                                  Movement_ageblk_spec = 'constant', # constant age movement                                  Movement_yearblk_spec = 'constant', # constant year movement                                  Movement_sexblk_spec = \"constant\", # constant sex movement                                  do_recruits_move = 0, # recruits dont move                                  cont_vary_movement = 'none' # no continously varying movement                                  ) input_list <- Setup_Mod_Catch_and_F(input_list = input_list,                                     ObsCatch = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # observed catches                                     Catch_Type = array(1, dim = c(length(input_list$data$years), input_list$data$n_fish_fleets)), # catch type                                     UseCatch = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether catch is used                                      # Model options                                     sigmaC_spec = 'fix', # sigma catch specification                                     sigmaF_spec = \"fix\" # sigma for F specification )  # Setup fishery indices and compositions input_list <- Setup_Mod_FishIdx_and_Comps(input_list = input_list,                                           ObsFishIdx = array(NA, c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # fishery index (not used)                                           ObsFishIdx_SE = array(NA, c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # fishery index SE (not used)                                           UseFishIdx = array(0, c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether fishery index is used                                           ObsFishAgeComps = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), input_list$data$n_sexes, input_list$data$n_fish_fleets)), # observed fishery age comps                                           UseFishAgeComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether fishery ages are used                                           ObsFishLenComps = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$lens), input_list$data$n_sexes, input_list$data$n_fish_fleets)), # observed fishery lengths                                           UseFishLenComps = array(0, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether fishery lengths are used                                           ISS_FishAgeComps = array(500, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_fish_fleets)), # fishery input sample size. NOTE: This is specified at 500, as in the OM, and is not left blank!                                            # Model options                                           fish_idx_type = \"none\", # fishery index type                                           FishAgeComps_LikeType = \"Multinomial\", # composition likelihood                                           FishLenComps_LikeType = \"none\", # composition likelihood                                           FishAgeComps_Type =  \"spltRjntS_Year_1-terminal_Fleet_1\", # age composition type                                           FishLenComps_Type =  \"none_Year_1-terminal_Fleet_1\" # length composition type                                           )  # Setup survey indices and compositions input_list <- Setup_Mod_SrvIdx_and_Comps(input_list = input_list,                                          ObsSrvIdx = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_srv_fleets)), # observed survey index                                          ObsSrvIdx_SE = array(0.05, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_srv_fleets)), # observed susrvey index SE                                          UseSrvIdx =  array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether survey indices are used                                          ObsSrvAgeComps = array(NA,  dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$ages), input_list$data$n_sexes, input_list$data$n_srv_fleets)), # observed survey ages                                          UseSrvAgeComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_fish_fleets)), # whether survey ages are used                                          ObsSrvLenComps = array(NA, dim = c(input_list$data$n_regions, length(input_list$data$years), length(input_list$data$lens), input_list$data$n_sexes, input_list$data$n_srv_fleets)), # survey length comps                                          UseSrvLenComps = array(0, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_srv_fleets)), # whether survey lengths are used                                          ISS_SrvAgeComps = array(500, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_srv_fleets)), # survey input sample size. NOTE: This is specified at 500, as in the OM, and is not left blank!                                           # Model options                                          srv_idx_type = \"abd\", # survey index type                                          SrvAgeComps_LikeType = \"Multinomial\", # composition likelihood                                          SrvLenComps_LikeType = \"none\", # composition likelihood                                          SrvAgeComps_Type = \"spltRjntS_Year_1-terminal_Fleet_1\", # age composition type                                          SrvLenComps_Type = \"none_Year_1-terminal_Fleet_1\" # length composition type                                          ) # Setup fishery selectivity and catchability input_list <- Setup_Mod_Fishsel_and_Q(input_list = input_list,                                       # Model options                                       cont_tv_fish_sel = \"none_Fleet_1\", # whether selex is continously varying                                       fish_sel_blocks = \"none_Fleet_1\", # fishery selex blocks                                       fish_sel_model = \"logist1_Fleet_1\", # fishery selex model                                       fish_q_blocks = \"none_Fleet_1\", # fishery catchability blocks                                       fish_fixed_sel_pars = \"est_shared_r\" # whether parameters are spatially varying )  # Setup survey selectivity and catchability input_list <- Setup_Mod_Srvsel_and_Q(input_list = input_list,                                      cont_tv_srv_sel = \"none_Fleet_1\",  # whether selex is continously varying                                      srv_sel_blocks = \"none_Fleet_1\", # survey selex blocks                                      srv_sel_model = \"logist1_Fleet_1\", # survey selex model                                      srv_q_blocks = \"none_Fleet_1\", # survey catchability blocks                                      srv_fixed_sel_pars_spec = \"est_shared_r\", # whether parameters are spatially varying                                      srv_q_spec = \"est_shared_r\" # estimate survey q, and spatially-invariant                                      ) # Setup tagging stuff input_list <- Setup_Mod_Tagging(input_list = input_list,                                 tag_release_indicator = as.matrix(sim_list$tag_rel_indicator), # tag release indicator (this MUST BE DEFINED!)                                 Tagged_Fish = array(NA, dim = c(dim(sim_list$Tag_Fish[1:nrow(as.matrix(sim_list$tag_rel_indicator)),,,1]), input_list$data$n_sexes)), # tagged fish                                 Obs_Tag_Recap = array(NA, dim = c(dim(sim_list$Obs_Tag_Recap[,1:nrow(as.matrix(sim_list$tag_rel_indicator)),,,,1]), input_list$data$n_sexes)), # tag recaptures                                  # Model options                                 UseTagging = 1, # whether tagging are used                                 t_tagging = 0.5, # time tagging occurs                                 max_tag_liberty = 30, # max tag liberty to track ohorts                                 Tag_LikeType = 'Poisson', # possion likelihood                                 tag_selex = \"SexSp_DomFleet\", # sex-specific and weighted sum of fleet selex                                 tag_natmort = \"AgeSp_SexSp\", # age and sex-specific natural mortailty                                 move_age_tag_pool = \"all\", # pooling all tag age data to fit                                 move_sex_tag_pool = \"all\", # pooling all sex data tp fit                                 Init_Tag_Mort_spec = \"fix\", # don't estimate inital tag mortliaty                                 Tag_Shed_spec = \"fix\", # don't estimate tag shedding                                 TagRep_spec = \"est_shared_r\", # spatially-invariant tag reporting                                 Tag_Reporting_blocks = c(\"none_Region_1\", \"none_Region_2\") # no tag reporting time blocks ) # setup model weighting input_list <- Setup_Mod_Weighting(input_list = input_list,                                   sablefish_ADMB = 0, # not using sablefish weirdness                                   likelihoods = 1, # tmb likelihoods                                   Wt_Catch = 1, # catch weight                                   Wt_FishIdx = 1, # fishery idx weight                                   Wt_SrvIdx = 1, # survey idx weight                                   Wt_Rec = 1, # recruitment penatly weight                                   Wt_F = 1, # fishing mortality weight                                   Wt_Tagging = 1, # tagging weight                                                                      # composition data weights                                   Wt_FishAgeComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_fish_fleets)),                                   Wt_FishLenComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_fish_fleets)),                                   Wt_SrvAgeComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_srv_fleets)),                                   Wt_SrvLenComps = array(1, dim = c(input_list$data$n_regions, length(input_list$data$years), input_list$data$n_sexes, input_list$data$n_srv_fleets)) ) skeleton_data <- input_list$data skeleton_parameters <- input_list$par skeleton_mapping <- input_list$map HCR_function <- function(x, frp, brp, alpha = 0.05) {   stock_status <- x / brp # define stock status   # If stock status is > 1   if(stock_status >= 1) f <- frp   # If stock status is between brp and alpha   if(stock_status > alpha && stock_status < 1) f <- frp * (stock_status - alpha) / (1 - alpha)   # If stock status is less than alpha   if(stock_status < alpha) f <- 0   return(f) } sim_env <- Setup_sim_env(sim_list)"},{"path":"https://chengmatt.github.io/SPoRC/articles/h_closed_loop_simulations.html","id":"run-closed-loop","dir":"Articles","previous_headings":"","what":"Run Closed Loop","title":"Run Closed Loop Simulations","text":"closed loop can defined following code chunk. first loop characterizes given simulation, second loop characterizes given year simulation. run_annual_cycle function utilized run population dynamics given year. Following , year want begin management feedback, first obtain necessary data years 1:y given simulation using function Get_Feedback_Data, truncates skeleton data, parameters, mapping list correct years. feed lists estimation model using fit_model function. Next, extract necessary inputs reference point functions projection functions. Reference points can derived using Get_Reference_Points associated catch said reference point derived using 1 year population projection using Do_Population_Projection function. Lastly, catch associated reference point input back simulated population. converting estimated catch fishing mortality rates using bisection_F function, based true underlying population dynamics simulated operating model. can inspect outputs MSE. Plotted trajectories regional fishing mortality spawning stock biomass given simulation. dotted vertical line indicates feedback loop first started.","code":"set.seed(123) # to reproduce # Start Simulation for (sim in 1:sim_env$n_sims) {   for (y in 1:sim_env$n_yrs) {      ### Run Annual Cycle --------------------------------------------------------     run_annual_cycle(y, sim, sim_env)      # Start Feedback Loop     if(y >= sim_env$feedback_start_yr) {        # Get feedback data (aligning year index)       feedback <- Get_Feedback_Data(sim_env = sim_env, sim_list = sim_list,                                     y = y, sim = sim,                                     skeleton_data = skeleton_data,                                     skeleton_parameters = skeleton_parameters,                                     skeleton_mapping = skeleton_mapping                                     )        # Extract out data, parameters, and mapping       data <- feedback$retro_data       parameters <- feedback$retro_parameters       mapping <- feedback$retro_mapping        ### Run Assessment ----------------------------------------------------------       obj <- fit_model(data,                        parameters,                        mapping,                        random = NULL,                        newton_loops = 3,                        silent = T                        )        # Get necessary data inputs for later functions       n_proj_yrs <- 2       tmp_terminal_NAA <- array(obj$rep$NAA[,y,,], dim = c(sim_env$n_regions, sim_env$n_ages, sim_env$n_sexes)) # terminal numbers at age       tmp_WAA <- array(rep(data$WAA[,y,,], each = n_proj_yrs), dim = c(sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes)) # weight at age spawning       tmp_WAA_fish <- array(rep(data$WAA_fish[,y,,,], each = n_proj_yrs), dim = c(sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes, sim_env$n_fish_fleets)) # weight at age fishery       tmp_MatAA <- array(rep(data$MatAA[,y,,], each = n_proj_yrs), dim = c(sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes)) # maturity at age       tmp_fish_sel <- array(rep(obj$rep$fish_sel[,y,,,], each = n_proj_yrs), dim = c(sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes, sim_env$n_fish_fleets)) # selectivity       tmp_Movement <- array(rep(obj$rep$Movement[,,y,,,drop=FALSE], n_proj_yrs), dim = c(sim_env$n_regions, sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes))       tmp_terminal_F <- array(obj$rep$Fmort[,y,], dim = c(sim_env$n_regions, sim_env$n_fish_fleets)) # terminal fishing mortality       tmp_natmort <- array(obj$rep$natmort[,y,,], dim = c(sim_env$n_regions, n_proj_yrs, sim_env$n_ages, sim_env$n_sexes)) # natural mortality       tmp_recruitment <- array(obj$rep$Rec[,1:(y - 1)], dim = c(sim_env$n_regions, length(1:(y - 1)))) # recruitment to use for projections        ### Run reference point module ----------------------------------------------       reference_points <- Get_Reference_Points(data = data,                                                rep = obj$rep,                                                SPR_x = 0.4,                                                 t_spwn = 0,                                                sex_ratio_f = 0.5,                                                calc_rec_st_yr = 1,                                                rec_age = 1,                                                type = 'multi_region',                                                what = 'independent_SPR'                                                )        # extract fishery and biological reference points       tmp_f_ref_pt <- array(reference_points$f_ref_pt, dim = c(sim_env$n_regions, n_proj_yrs)) # fishery reference points       tmp_b_ref_pt <- array(reference_points$b_ref_pt, dim = c(sim_env$n_regions, n_proj_yrs)) # biological reference points       ### Run Projection Module ---------------------------------------------------       # Do projection to get TAC      proj <- Do_Population_Projection(n_proj_yrs = 2,                                       n_regions = sim_env$n_regions,                                       n_ages = sim_env$n_ages,                                       n_sexes = sim_env$n_sexes,                                       sexratio = 1,                                       n_fish_fleets = sim_env$n_fish_fleets,                                       do_recruits_move = 0,                                       recruitment = tmp_recruitment,                                       terminal_NAA = tmp_terminal_NAA,                                       terminal_F = tmp_terminal_F,                                       natmort = tmp_natmort,                                       WAA = tmp_WAA,                                       WAA_fish = tmp_WAA_fish,                                       MatAA = tmp_MatAA,                                       fish_sel = tmp_fish_sel,                                       Movement = tmp_Movement,                                       f_ref_pt = tmp_f_ref_pt,                                       b_ref_pt = tmp_b_ref_pt,                                       HCR_function = HCR_function,                                       recruitment_opt = \"mean_rec\",                                       fmort_opt = \"HCR\",                                       t_spawn = 0                                       )        # Get TAC       tmp_TAC <- proj$proj_Catch[,2,,drop = FALSE] # get TAC from projected year        ### TAC to Fishing Mortality ------------------------------------------------       # Only run till last year       if(y < sim_env$n_yrs) {         for(r in 1:sim_env$n_regions) {           for(f in 1:sim_env$n_fish_fleets) {              # Go from TAC to Fishing mortality (using true values from simulation)             tmp_F <- bisection_F(f_guess = 0.05,                                  catch = tmp_TAC[r,1,f],                                  NAA = sim_env$NAA[r,y+1,,,sim],                                  WAA = sim_env$WAA[r,y+1,,,sim],                                   natmort = sim_env$M[r,y+1,,,sim],                                  fish_sel = sim_env$fish_sel[r,y+1,,,f,sim]                                  )              sim_env$Fmort[r,y+1,f,sim] <- tmp_F            } # end r loop         } # end f loop       } # end if      } # end if for feedback loop    } # end y loop } # end sim loop # Trajectories of spawning biomass reshape2::melt(sim_env$SSB) %>%   dplyr::rename(Region = Var1, Year = Var2, Sim = Var3) %>%   ggplot(aes(x = Year, y = value, group = Sim)) +   geom_line() +   geom_vline(xintercept = sim_env$feedback_start_yr, lty = 2) +   facet_wrap(~Region) +   theme_bw(base_size = 15) +   labs(y = 'SSB') +   ylim(0, NA)  # Trajectories of observed catches reshape2::melt(sim_env$Obs_Catch) %>%   dplyr::rename(Region = Var1, Year = Var2, Fleet = Var3, Sim = Var4) %>%   dplyr::filter(Year != 36) %>%   ggplot(aes(x = Year, y = value, group = Sim)) +   geom_line() +   geom_vline(xintercept = sim_env$feedback_start_yr, lty = 2) +   facet_wrap(~Region) +   theme_bw(base_size = 15) +   labs(y = 'Catch') +   ylim(0, NA)"},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"reference-points","dir":"Articles","previous_headings":"","what":"Reference Points","title":"Deriving Reference Points, Catch Advice, and Projections","text":"Management reference points SPoRC divided single-region spatial reference points. Single-region reference points include: Spawning potential ratio (SPR) reference points, estimate fishing mortality rate reduces spawning biomass per recruit x% unfished level. Maximum sustainable yield (MSY) reference points, based Beverton-Holt relationship, estimate fishing mortality rate maximizes long-term yield. Spatial reference points also include SPR MSY-based metrics, divided : Independent SPR reference points, estimate region-specific fishing mortality rates reduce spawning biomass per recruit x% unfished level, ignoring movement. Independent MSY reference points, estimate region-specific fishing mortality rates maximize yield within given region. Global SPR reference points, estimate global fishing mortality rate reduces total spawning biomass per recruit x% unfished level, accounting movement. Global MSY reference points, estimate global fishing mortality rate maximizes long-term yield across regions.","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"sglregionspr","dir":"Articles","previous_headings":"Reference Points > Single Region","what":"Spawning Potential Ratio Reference Points","title":"Deriving Reference Points, Catch Advice, and Projections","text":"derive SPR reference points, users must specify target percentage representing spawning biomass per recruit fishing relative unfished level. Following , several additional quantities needed compute reference points. includes: relative fishing mortality fleets (Fratf=Fmorty=term,f/∑fFmorty=term,fFrat_f = Fmort_{y = term,f} / \\sum_f Fmort_{y = term,f}), fleet-specific fishery selectivity (Sely=term,,s=1,fFshSel_{y = term,,s = 1,f}^{Fsh}), natural mortality females (NatMorty=1,,s=1NatMort_{y=1,,s=1}), weight age females (Wy=1,,s=1W_{y=1,,s=1}), maturity age females (Maty=1,,s=1Mat_{y=1,,s=1}), spawn timing (tspwnt_{spwn}), vector recruitment values (Recy,sRec_{y,s}), recruitment sex ratio (ψs\\psi_s), recruitment age (RecAgeRecAge), first year recruitment vector (RecYearRecYear) used mean recruitment calculations. relative fishing mortality fleets fleet-specific fishery selectivity, terminal year utilized calculations. contrast, estimates first model year utilized natural mortality, weight age, maturity age. SPR reference points derived following process: Na=1fished=1 N_{= 1}^{fished} = 1 Na=1unfished=1 N_{= 1}^{unfished} = 1 Na=1fishedN_{= 1}^{fished} Na=1unfishedN_{= 1}^{unfished} fished unfished numbers age per-recruit, respectively, first age class. Subsequent numbers age per-recruit computed exponential mortality model, fished numbers age per-recruit decremented natural fishing mortality, unfished numbers age per-recruit decremented natural mortality: Nafished={Na−1fished⋅exp(−(NatMorty=1,−1,s=1+∑fFratf⋅Fx⋅Sely=term,−1,s=1,fFsh))2<<nagesNa−1fished⋅exp(−(NatMorty=1,nages−1,s=1+∑fFratf⋅Fx⋅Sely=term,nages−1,s=1,fFsh))1−exp(−(NatMorty=1,nages,s=1+∑fFratf⋅Fx⋅Sely=term,nages,s=1,fFsh))=nages N_{}^{\\text{fished}} =  \\begin{cases} N_{- 1}^{\\text{fished}} \\cdot \\exp\\left(-\\left(NatMort_{y=1,-1,s=1} + \\sum_f \\text{Frat}_f \\cdot F_x \\cdot \\text{Sel}_{y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right)\\right) & \\text{} 2 < < n_{\\text{ages}} \\\\ \\\\ N_{- 1}^{\\text{fished}} \\cdot  \\frac{ \\exp\\left(-\\left(NatMort_{y=1,n_{\\text{ages}}-1,s=1} + \\sum_f \\text{Frat}_f \\cdot F_x \\cdot \\text{Sel}_{y=\\text{term},n_{\\text{ages}}-1,s=1,f}^{\\text{Fsh}}\\right)\\right) }{ 1 - \\exp\\left(-\\left(NatMort_{y=1,n_{\\text{ages}},s=1} + \\sum_f \\text{Frat}_f \\cdot F_x \\cdot \\text{Sel}_{y=\\text{term},n_{\\text{ages}},s=1,f}^{\\text{Fsh}}\\right)\\right) } & \\text{} = n_{\\text{ages}} \\end{cases} Naunfished={Na−1unfished⋅exp(−NatMorty=1,−1,s=1)2<<nagesNa−1unfished⋅exp(−NatMorty=1,nages−1,s=1)1−exp(−NatMorty=1,nages,s=1)=nages N_{}^{\\text{unfished}} =  \\begin{cases} N_{- 1}^{\\text{unfished}} \\cdot \\exp\\left(-NatMort_{y=1,-1,s=1}\\right) & \\text{} 2 < < n_{\\text{ages}} \\\\ \\\\ N_{- 1}^{\\text{unfished}} \\cdot  \\frac{ \\exp\\left(-NatMort_{y=1,n_{\\text{ages}}-1,s=1}\\right) }{ 1 - \\exp\\left(-NatMort_{y=1,n_{\\text{ages}},s=1}\\right) } & \\text{} = n_{\\text{ages}} \\end{cases} FxF_x represents estimated fishing mortality rate reduces spawning biomass per recruit x%, relative unfished level. Fished unfished numbers age per recruit can converted spawning biomass per recruit quantities (SSBSSB) following equations: SSBfished=∑aNafished⋅Wy=1,,s=1⋅Maty=1,,s=1⋅exp(−tspwn⋅NatMorty=1,,s=1+∑fFratf⋅Fx⋅Sely=term,,s=1,fFsh) SSB^{\\text{fished}} = \\sum_a N_{}^{\\text{fished}} \\cdot W_{y=1,,s=1} \\cdot \\text{Mat}_{y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{y=1,,s=1} + \\sum_f \\text{Frat}_f \\cdot F_x \\cdot \\text{Sel}_{y=\\text{term},,s=1,f}^{\\text{Fsh}} \\right) SSBunfished=∑aNaunfished⋅Wy=1,,s=1⋅Maty=1,,s=1⋅exp(−tspwn⋅NatMorty=1,,s=1) SSB^{\\text{unfished}} = \\sum_a N_{}^{\\text{unfished}} \\cdot W_{y=1,,s=1} \\cdot \\text{Mat}_{y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{y=1,,s=1} \\right) SPR defined fraction fished unfished spawning biomass per recruit: SPR=SSBfishedSSBunfished SPR = \\frac{SSB^{fished}}{SSB^{unfished}} FxF_x solved using non-linear function minimizer minimizing following criteria: Fx=argminF{100⋅(SPR(F)−x%)2} F_x = \\arg\\min_{F} \\left\\{ 100 \\cdot \\left( \\text{SPR}(F) - \\text{x%} \\right)^2 \\right\\} Biological SPR-based reference points (BxB_x) can derived multiplying fished spawning biomass per recruit mean recruitment user-defined period recruitment sex-ratio: Bx=SSBfished⋅∑RecYearY−RecAgeRecy,sY−RecAge−RecYearψs B_x = SSB^{\\text{fished}} \\cdot \\frac{\\sum_{RecYear}^{Y - RecAge} Rec_{y,s}}{Y - RecAge - RecYear} \\psi_s","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"sglregionmsy","dir":"Articles","previous_headings":"Reference Points > Single Region","what":"Maximum Sustainable Yield Reference Points (Beverton-Holt)","title":"Deriving Reference Points, Catch Advice, and Projections","text":"Deriving MSY based reference points using Beverton-Holt stock recruitment relationship involves maximizing equilibrium yield per recruit requires several additional inputs. completeness, summarize required inputs derive MSY based reference points assuming Beverton-Holt relationship. inputs include: relative fishing mortality fleets (Fratf=Fmorty=term,f/∑fFmorty=term,fFrat_f = Fmort_{y = term,f} / \\sum_f Fmort_{y = term,f}), fleet-specific fishery selectivity (Sely=term,,s=1,fFshSel_{y = term,,s = 1,f}^{Fsh}), natural mortality females (NatMorty=1,,s=1NatMort_{y=1,,s=1}), weight age females (Wy=1,,s=1W_{y=1,,s=1}), maturity age females (Maty=1,,s=1Mat_{y=1,,s=1}), estimate virgin recruitment (R0R_0), estimate steepness (hh), recruitment sex ratio (ψs\\psi_s). Similarly, relative fishing mortality fleets fleet-specific fishery selectivity, terminal year estimates utilized calculations. contrast, estimates first model year utilized natural mortality, weight age, maturity age. MSY reference points can derived using standard per-recruit calculations, initial number fished unfished individuals can set arbitrary value: Na=1fished=1 N_{= 1}^{fished} = 1 Na=1unfished=1 N_{= 1}^{unfished} = 1 following numbers--age per recruit decremented exponential mortality model: Nafished={Na−1fished⋅exp(−(NatMorty=1,−1,s=1+∑fFratf⋅Fmsy⋅Sely=term,−1,s=1,fFsh))2<<nagesNa−1fished⋅exp(−(NatMorty=1,nages−1,s=1+∑fFratf⋅Fmsy⋅Sely=term,nages−1,s=1,fFsh))1−exp(−(NatMorty=1,nages,s=1+∑fFratf⋅Fmsy⋅Sely=term,nages,s=1,fFsh))=nages   N_{}^{\\text{fished}} =      \\begin{cases}   N_{- 1}^{\\text{fished}} \\cdot \\exp\\left(-\\left(NatMort_{y=1,-1,s=1} + \\sum_f \\text{Frat}_f \\cdot F_{msy} \\cdot \\text{Sel}_{y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right)\\right) & \\text{} 2 < < n_{\\text{ages}} \\\\   \\\\   N_{- 1}^{\\text{fished}} \\cdot    \\frac{     \\exp\\left(-\\left(NatMort_{y=1,n_{\\text{ages}}-1,s=1} + \\sum_f \\text{Frat}_f \\cdot F_{msy} \\cdot \\text{Sel}_{y=\\text{term},n_{\\text{ages}}-1,s=1,f}^{\\text{Fsh}}\\right)\\right)   }{     1 - \\exp\\left(-\\left(NatMort_{y=1,n_{\\text{ages}},s=1} + \\sum_f \\text{Frat}_f \\cdot F_{msy} \\cdot \\text{Sel}_{y=\\text{term},n_{\\text{ages}},s=1,f}^{\\text{Fsh}}\\right)\\right)   } & \\text{} = n_{\\text{ages}}   \\end{cases} Naunfished={Na−1unfished⋅exp(−NatMorty=1,−1,s=1)2<<nagesNa−1unfished⋅exp(−NatMorty=1,nages−1,s=1)1−exp(−NatMorty=1,nages,s=1)=nages   N_{}^{\\text{unfished}} =      \\begin{cases}   N_{- 1}^{\\text{unfished}} \\cdot \\exp\\left(-NatMort_{y=1,-1,s=1}\\right) & \\text{} 2 < < n_{\\text{ages}} \\\\   \\\\   N_{- 1}^{\\text{unfished}} \\cdot    \\frac{     \\exp\\left(-NatMort_{y=1,n_{\\text{ages}}-1,s=1}\\right)   }{     1 - \\exp\\left(-NatMort_{y=1,n_{\\text{ages}},s=1}\\right)   } & \\text{} = n_{\\text{ages}}   \\end{cases} FmsyF_{msy} represents fishing mortality result equilibrium yield maximized. Yield per recruit quantities can computed using Baranov’s catch equation: Ca=∑fFratf⋅Fmsy⋅Sely=term,−1,s=1,fFsh(NatMorty=1,−1,s=1+∑fFratf⋅Fmsy⋅Sely=term,−1,s=1,fFsh)⋅Nafished⋅(1−exp[−(NatMorty=1,nages,s=1+∑fFratf⋅Fmsy⋅Sely=term,nages,s=1,fFsh)]) C_{} =  \\frac{   \\sum_f \\text{Frat}_f \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{y=\\text{term},-1,s=1,f}^{\\text{Fsh}} }{   \\left(NatMort_{y=1,-1,s=1} + \\sum_f \\text{Frat}_f \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right) } \\cdot N_a^{\\text{fished}} \\cdot  \\left(   1 - \\exp\\left[     -\\left(       NatMort_{y=1,n_{\\text{ages}},s=1} + \\sum_f \\text{Frat}_f \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{y=\\text{term},n_{\\text{ages}},s=1,f}^{\\text{Fsh}}     \\right)   \\right] \\right) Values equilibrium recruitment calculated using Beverton-Holt stock recruitment relationship. Estimates equilibrium recruitment needed convert per recruit quantities yield BmsyB_{msy}. , first derive fished unfished spawning biomass per recruit: SSBfished=∑aNafished⋅Wy=1,,s=1⋅Maty=1,,s=1⋅exp(−tspwn⋅NatMorty=1,,s=1+∑fFratf⋅Fx⋅Sely=term,,s=1,fFsh) SSB^{\\text{fished}} = \\sum_a N_{}^{\\text{fished}} \\cdot W_{y=1,,s=1} \\cdot \\text{Mat}_{y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{y=1,,s=1} + \\sum_f \\text{Frat}_f \\cdot F_x \\cdot \\text{Sel}_{y=\\text{term},,s=1,f}^{\\text{Fsh}} \\right) SSBunfished=∑aNaunfished⋅Wy=1,,s=1⋅Maty=1,,s=1⋅exp(−tspwn⋅NatMorty=1,,s=1) SSB^{\\text{unfished}} = \\sum_a N_{}^{\\text{unfished}} \\cdot W_{y=1,,s=1} \\cdot \\text{Mat}_{y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{y=1,,s=1} \\right) Equilibrium recruitment can derived following: Req=4⋅h⋅R0⋅SSBfishedSSBunfished⋅(1−h)+SSBfished⋅(5⋅h−1) Req = \\frac{4\\cdot h \\cdot R_0 \\cdot SSB^{\\text{fished}}}{SSB^{\\text{unfished}} \\cdot (1 - h) + SSB^{\\text{fished}} \\cdot (5 \\cdot h - 1)} ReqReq equilibrium recruitment. Yield BmsyB_{msy} can computed multiplying yield per recruit spawning biomass per recruit estimate equilibrium recruitment: Yield=∑aCa⋅Req Yield = \\sum_a C_a \\cdot Req Bmsy=SSBfished⋅Req B_{msy} = SSB^{\\text{fished}} \\cdot Req Lastly, FmsyF_{msy} solved using non-linear function minimizer minimizing following criteria (maximizing yield): Fmsy=argminFYield F_{msy} = \\arg\\min_{F} Yield","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"spawning-potential-ratio-reference-points","dir":"Articles","previous_headings":"Reference Points > Multi Region","what":"Spawning Potential Ratio Reference Points","title":"Deriving Reference Points, Catch Advice, and Projections","text":"general, multi region SPR reference points can computed similar manner single region SPR reference points. additional complication calculating spatial reference points includes additional region subscript quantities, well potential need account movement processes.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"independent","dir":"Articles","previous_headings":"Reference Points > Multi Region > Spawning Potential Ratio Reference Points","what":"Independent","title":"Deriving Reference Points, Catch Advice, and Projections","text":"case users assume movement occurs among regions, SPR rates can calculated independently region, results region-specific Fr,xF_{r,x} Br,xB_{r,x} estimates. Thus, region unique Fr,xF_{r,x} estimate can applied. calculations computed manner equations described computing SPR rates single region case except additional subscript added demographic rates. Following , Fr,xF_{r,x} can solved minimizing following criteria region: Fr,x=argminFr{100⋅(SPR(Fr)−x%)2} F_{r,x} = \\arg\\min_{F_r} \\left\\{ 100 \\cdot \\left( \\text{SPR}(F_r) - \\text{x%} \\right)^2 \\right\\} Regional biological SPR-based reference points (BxB_x) can derived multiplying fished spawning biomass per recruit regional mean recruitment user-defined period recruitment sex-ratio: Br,x=SSBrfished⋅∑RecYearY−RecAgeRecr,y,sY−RecAge−RecYearψs B_{r,x} = SSB_r^{\\text{fished}} \\cdot \\frac{\\sum_{RecYear}^{Y - RecAge} Rec_{r,y,s}}{Y - RecAge - RecYear} \\psi_s","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"global","dir":"Articles","previous_headings":"Reference Points > Multi Region > Spawning Potential Ratio Reference Points","what":"Global","title":"Deriving Reference Points, Catch Advice, and Projections","text":"contrast computing reference points assuming independent populations, SPR rates can also computed globally, movement occurs among regions. Given assumption global SPR rates, results global FxF_x estimate, regional estimates Br,xB_{r,x} mean recruitment estimates defined regionally. Thus, global SPR solution results FxF_x reduces global spawning biomass per recruit x% unfished value, aggregate spawning biomass reaches equilibrium ∑rBr,x\\sum_r B_{r,x} applied long-term. However, solution result region reaching equilibrium Br,xB_{r,x}. Note value FxF_x applied region global SPR case. Deriving global SPR reference points requires different set inputs. include: relative fishing mortality fleets (Fratr,f=Fmortr,y=term,f/∑fFmortr,y=term,fFrat_{r,f} = Fmort_{r,y = term,f} / \\sum_f Fmort_{r,y = term,f}), fleet-specific fishery selectivity (Selr,y=term,,s=1,fFshSel_{r,y = term,,s = 1,f}^{Fsh}), natural mortality females (NatMortr,y=1,,s=1NatMort_{r,y=1,,s=1}), weight age females (Wr,y=1,,s=1W_{r,y=1,,s=1}), maturity age females (Matr,y=1,,s=1Mat_{r,y=1,,s=1}), spawn timing (tspwnt_{spwn}), vector recruitment values (Recr,y,sRec_{r,y,s}), matrix movement values (𝐌y=term,,s=1\\boldsymbol{M}_{y = \\text{term},\\, ,\\, s = 1}) recruitment sex ratio (ψs\\psi_s), recruitment age (RecAgeRecAge), first year recruitment vector (RecYearRecYear) used mean recruitment calculations, recruitment proportions (apportionment) area (ζr\\zeta_r). Global SPR reference points calculated first setting regional numbers--age per-recruit model equal estimated recruitment apportionment parameters (ζr\\zeta_r), sum 1: Nr,=1fished=ζr N_{r,= 1}^{\\text{fished}} = \\zeta_r Nr,=1unfished=ζr N_{r,= 1}^{\\text{unfished}} = \\zeta_r , Nr,=1fishedN_{r,=1}^{\\text{fished}} Nr,=1unfishedN_{r,=1}^{\\text{unfished}} represent regional numbers--age per recruit (first age class) fished unfished conditions, respectively. Subsequently, movement applied. recruits allowed move, movement matrix applied starting age 1; otherwise, applied starting age 2: 𝐍afished=(𝐍afished)⊤𝐌y=term,,s=1for =amin,…,,amin={1if recruits move2otherwise \\boldsymbol{N}_a^{\\text{fished}} = (\\boldsymbol{N}_a^{\\text{fished}})^\\top \\boldsymbol{M}_{y = \\text{term}, , s = 1} \\quad \\text{} = a_{\\min}, \\dots, , \\quad a_{\\min} =  \\begin{cases}  1 & \\text{recruits move} \\\\ 2 & \\text{otherwise} \\end{cases} 𝐍aunfished=(𝐍aunfished)⊤𝐌y=term,,s=1for =amin,…,,amin={1if recruits move2otherwise \\boldsymbol{N}_a^{\\text{unfished}} = (\\boldsymbol{N}_a^{\\text{unfished}})^\\top \\boldsymbol{M}_{y = \\text{term}, , s = 1} \\quad \\text{} = a_{\\min}, \\dots, , \\quad a_{\\min} =  \\begin{cases}  1 & \\text{recruits move} \\\\ 2 & \\text{otherwise} \\end{cases} expressions, AA denotes number modeled ages (nagesn_{ages}) SPoRC multiplied 10. example, 30 ages modeled, =300A = 300. extension enables iterative propagation plus group movement, given closed-form solution exists. >nagesa > n_{ages} SPoRC, demographic fishery parameters held constant values terminal modeled age (nagesn_{ages}). Following movement processes, exponential mortality model applied: Nr,afished=Nr,−1fished⋅exp(−(NatMortr,y=1,−1,s=1+∑fFratr,f⋅Fx⋅Selr,y=term,−1,s=1,fFsh))2<<N_{r,}^{\\text{fished}} = N_{r,- 1}^{\\text{fished}} \\cdot \\exp\\left(-\\left(NatMort_{r,y=1,-1,s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_{x} \\cdot \\text{Sel}_{r,y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right)\\right) \\quad \\text{} 2 < < Nr,aunfished=Nr,−1unfished⋅exp(−(NatMortr,y=1,−1,s=1))2<<N_{r,}^{\\text{unfished}} = N_{r,- 1}^{\\text{unfished}} \\cdot \\exp\\left(-\\left(NatMort_{r,y=1,-1,s=1}\\right)\\right) \\quad \\text{} 2 < < , fished unfished numbers age per recruit can converted spawning biomass per recruit quantities: SSBrfished=∑aNr,afished⋅Wr,y=1,,s=1⋅Matr,y=1,,s=1⋅exp(−tspwn⋅NatMortr,y=1,,s=1+∑fFratr,f⋅Fx⋅Selr,y=term,,s=1,fFsh) SSB^{\\text{fished}}_r = \\sum_a N_{r,}^{\\text{fished}} \\cdot W_{r,y=1,,s=1} \\cdot \\text{Mat}_{r,y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{r,y=1,,s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_x \\cdot \\text{Sel}_{r,y=\\text{term},,s=1,f}^{\\text{Fsh}} \\right) SSBrunfished=∑aNr,aunfished⋅Wr,y=1,,s=1⋅Matr,y=1,,s=1⋅exp(−tspwn⋅NatMortr,y=1,,s=1) SSB^{\\text{unfished}}_r = \\sum_a N_{r,}^{\\text{unfished}} \\cdot W_{r,y=1,,s=1} \\cdot \\text{Mat}_{r,y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{r,y=1,,s=1} \\right) global spawning potential ratio can computed : SPR=∑rSSBrfished∑rSSBrfished SPR = \\frac{\\sum_r SSB^{\\text{fished}}_r}{\\sum_r SSB^{\\text{fished}}_r} FxF_x solved using non-linear function minimzer minimizing following criteria global SPR: Fx=argminF{100⋅(SPR(F)−x%)2} F_x = \\arg\\min_{F} \\left\\{ 100 \\cdot \\left( \\text{SPR}(F) - \\text{x%} \\right)^2 \\right\\} , biological SPR-based reference points assumed regional (Br,xB_{r,x}) derived multiplying fished spawning biomass per recruit regional mean recruitment user-defined period recruitment sex-ratio: Br,x=SSBrfished⋅∑RecYearY−RecAgeRecr,y,sY−RecAge−RecYearψs B_{r,x} = SSB^{\\text{fished}}_r \\cdot \\frac{\\sum_{RecYear}^{Y - RecAge} Rec_{r,y,s}}{Y - RecAge - RecYear} \\psi_s Thus, global SPR calculations result global FxF_x regional Br,xB_{r,x} estimates.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"maximum-sustainble-yield-reference-points-beverton-holt","dir":"Articles","previous_headings":"Reference Points > Multi Region","what":"Maximum Sustainble Yield Reference Points (Beverton-Holt)","title":"Deriving Reference Points, Catch Advice, and Projections","text":"MSY-based reference points assuming Beverton-Holt stock recruitment relationship can derived either assuming independent populations without movement global population movement processes incorporated.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"independent-1","dir":"Articles","previous_headings":"Reference Points > Multi Region > Maximum Sustainble Yield Reference Points (Beverton-Holt)","what":"Independent","title":"Deriving Reference Points, Catch Advice, and Projections","text":"Deriving MSY reference points assuming independent populations similar single-region case, results region-specific Fr,msyF_{r,msy} Br,msyB_{r,msy} estimates, can applied region conducting catch projections determine management advice.general, calcualtions computed manner equations described computing MSY single region case, exception demographic rates fishery selectivity include region subscript. Notably, virgin recruitment considered regional compute equilibrium recruitment calculations derived following manner: Rr,0=R0ζr R_{r,0} = R_0 \\zeta_r Reqr=4⋅hr⋅Rr,0⋅SSBrfishedSSBrunfished⋅(1−hr)+SSBrfished⋅(5⋅hr−1) Req_r = \\frac{4\\cdot h_r \\cdot R_{r,0} \\cdot SSB_r^{\\text{fished}}}{SSB_r^{\\text{unfished}} \\cdot (1 - h_r) + SSB_r^{\\text{fished}} \\cdot (5 \\cdot h_r - 1)} Fr,msyF_{r,msy} derived minimizing (maximizing) yield region independently: Fr,msy=argminFrYieldr F_{r,msy} = \\arg\\min_{F_r} Yield_r Br,msyB_{r,msy} can derived : Br,msy=SSBrfishedReqr B_{r,msy} = SSB_r^{fished} Req_r","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"global-1","dir":"Articles","previous_headings":"Reference Points > Multi Region > Maximum Sustainble Yield Reference Points (Beverton-Holt)","what":"Global","title":"Deriving Reference Points, Catch Advice, and Projections","text":"Deriving global MSY spatial cointext requires movement among regions accounted . Similar global SPR case, results global FmsyF_{msy} estimate, regional estiamtes Br,msyB_{r,msy} recruitment parameters defined regionally. results reference point achieves ∑rBr,msy\\sum_r B_{r,msy} entire population FmsyF_{msy} applied region, ensure region Br,msyB_{r,msy}. Global MSY reference points requires following inputs: relative fishing mortality fleets (Fratr,f=Fmortr,y=term,f/∑fFmortr,y=term,fFrat_{r,f} = Fmort_{r,y = term,f} / \\sum_f Fmort_{r,y = term,f}), fleet-specific fishery selectivity (Selr,y=term,,s=1,fFshSel_{r,y = term,,s = 1,f}^{Fsh}), natural mortality females (NatMortr,y=1,,s=1NatMort_{r,y=1,,s=1}), weight age females (Wr,y=1,,s=1W_{r,y=1,,s=1}), maturity age females (Matr,y=1,,s=1Mat_{r,y=1,,s=1}), spawn timing (tspwnt_{spwn}), vector recruitment values (Recr,y,sRec_{r,y,s}), matrix movement values (𝐌y=term,,s=1\\boldsymbol{M}_{y = \\text{term},\\, ,\\, s = 1}) recruitment sex ratio (ψs\\psi_s), recruitment age (RecAgeRecAge), first year recruitment vector (RecYearRecYear) used mean recruitment calculations, global steepness value used, taken mean across regions steepness estimated regional (h=∑rhrnregionsh = \\frac{\\sum_r h_r}{n_{regions}}), recruitment proportions (apportionment) area (ζr\\zeta_r). Using standard per-recruit calculations, first define initial number fished unfished individuals based recruitment proportions area: Nr,=1fished=ζr N_{r,= 1}^{\\text{fished}} = \\zeta_r  Nr,=1unfished=ζr N_{r,= 1}^{\\text{unfished}} = \\zeta_r , Nr,=1fishedN_{r,=1}^{\\text{fished}} Nr,=1unfishedN_{r,=1}^{\\text{unfished}} represent regional numbers--age per recruit (first age class) fished unfished conditions, respectively. can apply movement dynamics. recruits allowed move, movement matrix applied starting age 1; otherwise, applied starting age 2: 𝐍afished=(𝐍afished)⊤𝐌y=term,,s=1for =amin,…,,amin={1if recruits move2otherwise \\boldsymbol{N}_a^{\\text{fished}} = (\\boldsymbol{N}_a^{\\text{fished}})^\\top \\boldsymbol{M}_{y = \\text{term}, , s = 1} \\quad \\text{} = a_{\\min}, \\dots, , \\quad a_{\\min} =  \\begin{cases}  1 & \\text{recruits move} \\\\ 2 & \\text{otherwise} \\end{cases} 𝐍aunfished=(𝐍aunfished)⊤𝐌y=term,,s=1for =amin,…,,amin={1if recruits move2otherwise \\boldsymbol{N}_a^{\\text{unfished}} = (\\boldsymbol{N}_a^{\\text{unfished}})^\\top \\boldsymbol{M}_{y = \\text{term}, , s = 1} \\quad \\text{} = a_{\\min}, \\dots, , \\quad a_{\\min} =  \\begin{cases}  1 & \\text{recruits move} \\\\ 2 & \\text{otherwise} \\end{cases} expressions, AA denotes number modeled ages (nagesn_{ages}) SPoRC multiplied 10. example, 30 ages modeled, =300A = 300. extension enables iterative propagation plus group movement, given closed-form solution exists. >nagesa > n_{ages} SPoRC, demographic fishery parameters held constant values terminal modeled age (nagesn_{ages}). movement processes occur, exponential mortality model applied: Nr,afished=Nr,−1fished⋅exp(−(NatMortr,y=1,−1,s=1+∑fFratr,f⋅Fmsy⋅Selr,y=term,−1,s=1,fFsh))2<<N_{r,}^{\\text{fished}} = N_{r,- 1}^{\\text{fished}} \\cdot \\exp\\left(-\\left(NatMort_{r,y=1,-1,s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_{msy} \\cdot \\text{Sel}_{r,y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right)\\right) \\quad \\text{} 2 < < Nr,aunfished=Nr,−1unfished⋅exp(−(NatMortr,y=1,−1,s=1))2<<N_{r,}^{\\text{unfished}} = N_{r,- 1}^{\\text{unfished}} \\cdot \\exp\\left(-\\left(NatMort_{r,y=1,-1,s=1}\\right)\\right) \\quad \\text{} 2 < < Baranov’s catch equation invoked compute yield per recruit regio: Cr,=∑fFratr,f⋅Fmsy⋅Selr,y=term,−1,s=1,fFsh(NatMortr,y=1,−1,s=1+∑fFratr,f⋅Fmsy⋅Selr,y=term,−1,s=1,fFsh)⋅Nr,afished⋅(1−exp[−(NatMortr,y=1,nages,s=1+∑fFratr,f⋅Fmsy⋅Selr,y=term,nages,s=1,fFsh)]) C_{r,} =  \\frac{   \\sum_f \\text{Frat}_{r,f} \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{r,y=\\text{term},-1,s=1,f}^{\\text{Fsh}} }{   \\left(NatMort_{r,y=1,-1,s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{r,y=\\text{term},-1,s=1,f}^{\\text{Fsh}}\\right) } \\cdot N_{r,}^{\\text{fished}} \\cdot  \\left(   1 - \\exp\\left[     -\\left(       NatMort_{r,y=1,n_{\\text{ages}},s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_{\\text{msy}} \\cdot \\text{Sel}_{r,y=\\text{term},n_{\\text{ages}},s=1,f}^{\\text{Fsh}}     \\right)   \\right] \\right) Equilibrium recruitment computed using Beverton-Holt stock recruitment relationship, first need derive quantities fished unfished spawning biomass per recruit: SSBrfished=∑aNr,afished⋅Wr,y=1,,s=1⋅Matr,y=1,,s=1⋅exp(−tspwn⋅NatMortr,y=1,,s=1+∑fFratr,f⋅Fmsy⋅Selr,y=term,,s=1,fFsh) SSB_r^{\\text{fished}} = \\sum_a N_{r,}^{\\text{fished}} \\cdot W_{r,y=1,,s=1} \\cdot \\text{Mat}_{r,y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{r,y=1,,s=1} + \\sum_f \\text{Frat}_{r,f} \\cdot F_{msy} \\cdot \\text{Sel}_{r,y=\\text{term},,s=1,f}^{\\text{Fsh}} \\right) SSBrunfished=∑aNr,aunfished⋅Wr,y=1,,s=1⋅Matr,y=1,,s=1⋅exp(−tspwn⋅NatMortr,y=1,,s=1) SSB_r^{\\text{unfished}} = \\sum_a N_{r,}^{\\text{unfished}} \\cdot W_{r,y=1,,s=1} \\cdot \\text{Mat}_{r,y=1,,s=1} \\cdot \\exp\\left(-t_{\\text{spwn}} \\cdot NatMort_{r,y=1,,s=1} \\right) Calculations equilibrium recruitment follow : Reqr=4⋅hr⋅R0ζr⋅SSBrfishedSSBrunfished⋅(1−h)+SSBrfished⋅(5⋅h−1) Req_r = \\frac{4\\cdot h_r \\cdot R_{0} \\zeta_r \\cdot SSB_r^{\\text{fished}}}{SSB_r^{\\text{unfished}} \\cdot (1 - h) + SSB_r^{\\text{fished}} \\cdot (5 \\cdot h - 1)} Lastly, yield Br,msyB_{r,msy} can calculated multiplying per recruit quantities equilibrium recruitment: Yieldr=∑∑rCr,⋅ReqrBr,msy=SSBrfished⋅Reqr Yield_r = \\sum_a \\sum_r C_{r,} \\cdot Req_r B_{r,msy} = SSB_r^{fished} \\cdot Req_r FmsyF_{msy} solved minimizing (maximizing) system wide yield: Fmsy=argminFYield F_{msy} = \\arg\\min_{F} Yield","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"deriving-catch-advice-and-projections","dir":"Articles","previous_headings":"","what":"Deriving Catch Advice and Projections","title":"Deriving Reference Points, Catch Advice, and Projections","text":"core part assessment process convert reference point estimates catch advice. following sections, mathematically describe catch advice derived, proceed provide code examples demonstration. conduct projection terminal year, users must define following quantities: Terminal year estimates numbers--age, user defined period recruitment values use, user defined period weight--age values use projections, user defined period natural mortality-atage values use projections, user defined period maturity--age values use projections, user defined period fishery selectivity values use projections, user defined period movement values use projections, Terminal year estimates fishing mortality, Fishing mortality rate use decrement population, Optionally, users can define: Biological reference points use project fishing mortality subsequent years, harvest control rule utilized, function describing harvest control rule. first year projection period, projected fishing mortality determined estimates fishing mortality terminal year assessment: projFr,y=∑fFmortr,y=term,f projF_{r,y} = \\sum_f Fmort_{r,y = term,f} Total mortality can computed : Fr,y,,s,f=projFr,y⋅Fratr,f⋅Selr,y,,s,fFsh F_{r,y,,s,f} = projF_{r,y} \\cdot Frat_{r,f} \\cdot Sel^{Fsh}_{r,y,,s,f} Zr,y,,s,f=∑fFr,y,,s,f+NatMortr,y,,s Z_{r,y,,s,f} = \\sum_f F_{r,y,,s,f} + NatMort_{r,y,,s} Similarly, projected numbers age first year utilizes estimates numbers age terminal year assessment, movement already applied. exponential mortality model used determine numbers age next year (y+1y+1): projNr,y,,s=Nr,y=term,,s projN_{r,y,,s} = N_{r,y = term,,s} projNr,y+1,+1,s=projNr,y,,sexp(−Zr,y,,s),1≤<+projNr,y+1,,s=projNr,y,−1,sexp(−Zr,y,−1,s)+projNr,y,,sexp(−Zr,y,,s),=+ \\begin{aligned} projN_{r,y+1,+1,s} = projN_{r,y,,s}\\exp(-Z_{r,y,,s}), \\quad \\text{} 1 \\leq < a_+ \\\\ projN_{r,y+1,,s} = projN_{r,y,-1,s}\\exp(-Z_{r,y,-1,s}) + projN_{r,y,,s}\\exp(-Z_{r,y,,s}), \\quad \\text{} = a_+ \\end{aligned} Quantities spawning stock biomass can computed : projSSBr,y=∑aa+projNr,y,,s=1Wr,y,,s=1Matr,y,,s=1 projSSB_{r,y} = \\sum_a^{+} projN_{r,y,,s=1}W_{r,y,,s=1}Mat_{r,y,,s=1} Additionally, quantities projected catch can derived using Baranov’s catch equation: projCr,y,,s,fa=Fmortr,y,fSelr,y,,s,fFshZr,y,,sprojNr,y,,s[1−exp(−Zr,y,,s)] projC^a_{r,y,,s,f} = \\frac{Fmort_{r,y,f}Sel^{Fsh}_{r,y,,s,f}}{Z_{r,y,,s}} projN_{r,y,,s} \\left[1-\\exp(-Z_{r,y,,s})\\right] projCatchr,y,f=∑aa+∑snsprojCr,y,,s,faWr,y,,s projCatch_{r,y,f} = \\sum_a^{a_+} \\sum_s^{n_s} projC^a_{r,y,,s,f} W_{r,y,,s} Fishing mortality next year can projected forward using either harvest control rule, projected forward using user inputs: projFr,y+1={f(SSBr,y;BRPr,y;FRPr,y)using HCRf(Finputr,y)using user defined fishing mortality rate projF_{r,y+1} =  \\begin{cases} f(SSB_{r,y}; BRP_{r,y}; FRP_{r,y}) & \\text{using HCR}  \\\\  f(Finput_{r,y}) & \\text{using user defined fishing mortality rate}  \\end{cases} f()f() harvest control function takes inputs SSBSSB, BRPBRP (biological reference points), FRPFRP (fishery reference point). Alternatively, f()f() can user defined matrix fishing mortality rates use projection period across regions. Projected fishing mortality summed natural mortaltiy compute projected total mortality given projection year. Recruitment dynamics projected year following initial projection year. particular, several recruitment projection options availiable. include deterministic predictions well ability incorporate stochasticity recruitment projections. particular, deterministic recruitment option projected forward zero: projNr,y,1,s=0,y > 1 projN_{r,y,1,s} = 0, \\text{y > 1} recruitment occurs. Deterministic recruitment can also projected forward using mean recruitment (mean_rec) matrix estimated recruitment values assessment model supplied user: projNr,y,1,s=∑yRecr,yn,y > 1 projN_{r,y,1,s} = \\frac{\\sum_y Rec_{r,y}}{n}, \\text{y > 1} Alternatively, users can also specify Beverton-Holt stock recruitment function (bh_rec) used deterministic recruitment projection, requires users supply necessary parameter inputs. case local recruitment specified, computed (.e., metapopulation dynamics): projNr,y,1,s=4⋅hr⋅Rr,0⋅projSSBrSSBrunfished⋅(1−hr)+projSSBr⋅(5⋅hr−1) projN_{r,y,1,s} = \\frac{4\\cdot h_r \\cdot R_{r,0} \\cdot projSSB_r}{SSB_r^{\\text{unfished}} \\cdot (1 - h_r) + projSSB_r \\cdot (5 \\cdot h_r - 1)} contrast, global recruitment specified, computed : projNr,y,1,s=(4⋅h⋅R0⋅∑rprojSSBr∑rSSBrunfished⋅(1−h)+∑rprojSSBr⋅(5⋅h−1))ζr projN_{r,y,1,s} = \\left( \\frac{4\\cdot h \\cdot R_{0} \\cdot \\sum_r projSSB_r}{\\sum_r SSB_r^{\\text{unfished}} \\cdot (1 - h) + \\sum_r projSSB_r \\cdot (5 \\cdot h - 1)} \\right) \\zeta_r density-dependence occurs globally, recruitment apportionment parameter utilized partition global recruits given year. Lastly, users can specify recruitment projections stochastic, wherein inverse Gaussian (inv_gauss) distribution parameterized based estimated recruitment values assessment model utilized project recruitment future: AMeanRecr=1Y∑y=1YRecr,y \\text{AMeanRec}_r = \\frac{1}{Y} \\sum_{y=1}^{Y} \\text{Rec}_{r,y} HMeanRecr=(1Y∑y=1Y1Recr,y)−1 \\text{HMeanRec}_r = \\left( \\frac{1}{Y} \\sum_{y=1}^{Y} \\frac{1}{\\text{Rec}_{r,y}} \\right)^{-1} γr=AMeanRecrHMeanRecr \\gamma_r = \\frac{\\text{AMeanRec}_r}{\\text{HMeanRec}_r} βr=AMeanRecr \\beta_r = \\text{AMeanRec}_r δr=1γr−1 \\delta_r = \\frac{1}{\\gamma_r - 1} CVRecr=1δr \\text{CVRec}_r = \\sqrt{ \\frac{1}{\\delta_r} } year random draw made standard normal distribution, transformed: ψy=By2,∼N(0,1)     \\psi_y = B_y^2, \\quad \\text{} B_y \\sim N(0,1) ωr,y=βr(1+ψy−4δrψy+ψy22δr)   \\omega_{r,y} = \\beta_r \\left( 1 + \\frac{\\psi_y - \\sqrt{4 \\delta_r \\psi_y + \\psi_y^2}}{2 \\delta_r} \\right) ζr,y=βr(1+ψy+4δrψy+ψy22δr)   \\zeta_{r,y} = \\beta_r \\left( 1 + \\frac{\\psi_y + \\sqrt{4 \\delta_r \\psi_y + \\psi_y^2}}{2 \\delta_r} \\right) θr,y=βrβr+ωr,  \\theta_{r,y} = \\frac{\\beta_r}{\\beta_r + \\omega_{r,}} , draw conducted ∼U(0,1)\\sim U(0,1), simulated recruitment defined : Recr,ysim={ωr,y,Uy≤θr,yζr,y,otherwise   \\text{Rec}_{r,y}^{\\text{sim}} =     \\begin{cases}   \\omega_{r,y}, & \\text{} U_y \\leq \\theta_{r,y} \\\\   \\zeta_{r,y}, & \\text{otherwise}   \\end{cases} Thus, inverse gaussian mixture ensures simulated values approximately correct mean variability based historical recruitment values. recruitment processes occur, usual dynamics applied project population forward. , movement individuals first occurs: 𝐩𝐫𝐨𝐣𝐍a=(𝐩𝐫𝐨𝐣𝐍a)⊤𝐌y=term,,s=1for =amin,…,,amin={1if recruits move2otherwise \\boldsymbol{projN}_a^ = (\\boldsymbol{projN}_a)^\\top \\boldsymbol{M}_{y = \\text{term}, , s = 1} \\quad \\text{} = a_{\\min}, \\dots, , \\quad a_{\\min} =  \\begin{cases}  1 & \\text{recruits move} \\\\ 2 & \\text{otherwise} \\end{cases} Following movement, applied projected years y>1y > 1, already accounted terminal year estimates numbers age, exponential mortality model applied. Projected spawning stock biomass catch derived. Fishing mortality subsequent years updated accordingly. sequence steps repeated specified number projection years reached. Thus, catch advice year following terminal assessment year corresponds projected catch projection year 2 (.e., projCatchr,y=2,fprojCatch_{r, y = 2, f}).","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"code-demonstration","dir":"Articles","previous_headings":"","what":"Code Demonstration","title":"Deriving Reference Points, Catch Advice, and Projections","text":"subsequent sections, demonstrate reference points, catch projections, catch advice, stochastic projections can derived conducted using SPoRC. features rely users report file SPoRC model, generally coded way flexibility users define projections done.","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"single-region-1","dir":"Articles","previous_headings":"Code Demonstration > Getting Reference Points","what":"Single Region","title":"Deriving Reference Points, Catch Advice, and Projections","text":"illustrate reference points derived, begin extracting report file single-region sablefish case study (sgl_rg_sable_rep). call Get_Reference_Points function calculate reference points. example , estimate F40F_{40} B40B_{40} values single-region context. requires passing sablefish data file (sgl_reg_sable_data) data argument, report file rep argument, setting SPR rate (SPR_x) 0.4. also specify reference point SPR-based pertains single region. Additional inputs include first year recruitment used calculating B40B_{40}, recruitment age (excludes last rec_age years computing mean), timing spawning, sex ratio used B40B_{40} calculation. Note sablefish example utilize stock recruitment relationship. However, Beverton-Holt stock recruitment relationship utilized users want estimate MSY-based reference points, can derived setting = 'BH_MSY'. Note sablefish example utilize stock recruitment relationship. However, Beverton-Holt stock recruitment relationship utilized users want estimate MSY-based reference points, can derived setting = 'BH_MSY'.","code":"data(\"sgl_rg_sable_rep\") # read in single region report data(\"sgl_rg_sable_data\") # read in single region data   # single area model sgl_ref_pt <- SPoRC::Get_Reference_Points(data = sgl_rg_sable_data, # data file                                           rep = sgl_rg_sable_rep, # report file                                           SPR_x = 0.4, # spr rate                                           type = 'single_region', # single region reference point                                           what = 'SPR', # SPR reference point                                           calc_rec_st_yr = 20, # first year to calculate mean recruitment                                           rec_age = 2,  # exclues the last rec_age years when computing mean recruitment                                           t_spwn = 0,  # spawn timing                                           sex_ratio_f = 0.5 # recruitment sex-ratio for females                                           ) sgl_ref_pt$f_ref_pt # F40 #> [1] 0.08631906 sgl_ref_pt$b_ref_pt # B40 #> [1] 121.0546"},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"multi-region-1","dir":"Articles","previous_headings":"Code Demonstration > Getting Reference Points","what":"Multi Region","title":"Deriving Reference Points, Catch Advice, and Projections","text":"following, demonstrate spatial reference points can derived. general, similar single region case, except spatial model associated report files needed (report file needs spatially-explicit). , use five-region sablefish case study example, estimate independent SPR rates global SPR rates. contrast single region case, type now need specified multi_region. Additionally, independent SPR rates movement dynamics ignored, now set independent_SPR. arguments defined example . Given treated independent populations, fishery reference points biological reference points region-specific can applied accordingly. contrast, users can also specify global SPR rates. involves simply changing argument global_SPR, results single F40F_{40} estimated, region-specific Br,40B_{r,40} given regional estimates recruitment utilized. Note F40F_{40} outputs 5 values 5 regions modelled case study, values identical. Similarly, MSY-based reference points assuming Beverton-Holt stock recruitment function can specified well. can easily specified involves either assuming independent populations (= 'independent_BH_MSY') population global density dependence (= 'global_BH_MSY').","code":"data(\"mlt_rg_sable_rep\") # read in multi region report data(\"mlt_rg_sable_data\") # read in multi region data   # multi region model with independent SPR mlt_ref_pt_indp <- SPoRC::Get_Reference_Points(data = mlt_rg_sable_data, # data file                                           rep = mlt_rg_sable_rep, # report file                                           SPR_x = 0.4, # spr rate                                           type = 'multi_region', # multi region reference point                                           what = 'independent_SPR', # SPR reference point                                           calc_rec_st_yr = 20, # first year to calculate mean recruitment                                           rec_age = 2,  # exclues the last rec_age years when computing mean recruitment                                           t_spwn = 0,  # spawn timing                                           sex_ratio_f = 0.5 # recruitment sex-ratio for females                                           ) mlt_ref_pt_indp$f_ref_pt # F40 #> [1] 0.08242958 0.08191864 0.07998789 0.08040071 0.07969338 mlt_ref_pt_indp$b_ref_pt # B40 #> [1] 31.46321 24.63865 20.11382 33.32957 13.30036 data(\"mlt_rg_sable_rep\") # read in multi region report data(\"mlt_rg_sable_data\") # read in multi region data   # multi region model with global SPR mlt_ref_pt_global <- SPoRC::Get_Reference_Points(data = mlt_rg_sable_data, # data file                                                  rep = mlt_rg_sable_rep, # report file                                                  SPR_x = 0.4, # spr rate                                                  type = 'multi_region', # multi region reference point                                                  what = 'global_SPR', # SPR reference point                                                  calc_rec_st_yr = 20, # first year to calculate mean recruitment                                                  rec_age = 2,  # exclues the last rec_age years when computing mean recruitment                                                  t_spwn = 0,  # spawn timing                                                  sex_ratio_f = 0.5 # recruitment sex-ratio for females                                                  ) mlt_ref_pt_global$f_ref_pt # F40 #> [1] 0.07997762 0.07997762 0.07997762 0.07997762 0.07997762 mlt_ref_pt_global$b_ref_pt # B40 #> [1] 31.46321 24.63865 20.11382 33.32957 13.30036"},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"single-region-2","dir":"Articles","previous_headings":"Code Demonstration > Conducting Catch Projections to Derive Catch Advice (Deterministic Recruitment)","what":"Single Region","title":"Deriving Reference Points, Catch Advice, and Projections","text":"Next, using reference points derived single region case study, can conduct population catch projections derive catch advice. Note require users data file extract relevant demographic rates data components, well report file extract necessary estimates conduct projections. Let us first define threshold harvest control rule utilize population projections, although note strictly necessary.  can define inputs needed run population projection: Note projections, demographic rates (e.g., weight--age, movement, maturity) use estimates terminal year assessment. However, required - users may instead define demographic rates projection period using approaches (e.g., averages last 5 years). Regardless approach, rates must provided user format dimensions described . population projection can conducted Do_Population_Projection function: outputted object function includes projected fishing mortality rates, projected catch (.e., catch advice), projected spawning stock biomass, projected numbers age, projected total mortality age. can plot quantities . example , show projected SSB:  well projected catches, can basis management advice:  Importantly, catch advice based terminal year+1 rather first projection year, since first projection year serves initialization step projection.","code":"# Define HCR to use HCR_function <- function(x, frp, brp, alpha = 0.05) {   stock_status <- x / brp # define stock status   # If stock status is > 1   if(stock_status >= 1) f <- frp   # If stock status is between brp and alpha   if(stock_status > alpha && stock_status < 1) f <- frp * (stock_status - alpha) / (1 - alpha)   # If stock status is less than alpha   if(stock_status < alpha) f <- 0   return(f) }  # Create a tibble for plotting hcr_df <- tibble(   i = 1:200,   SSB_B40 = i / sgl_ref_pt$b_ref_pt,   F = sapply(i, function(x) {     HCR_function(x = x, frp = sgl_ref_pt$f_ref_pt, brp = sgl_ref_pt$b_ref_pt)   }) )  # Plot ggplot(hcr_df, aes(x = SSB_B40, y = F)) +   geom_line(color = \"steelblue\", size = 1) +   labs(x = \"SSB / B40\", y = \"F\") +   theme_bw(base_size = 13) data(\"sgl_rg_sable_rep\") # read in single region report data(\"sgl_rg_sable_data\") # read in single region data   # Setup necessary inputs t_spawn <- 0 # spawn timing sexratio <- 0.5 # sex ratio n_proj_yrs <- 15 # number of projection years n_regions <- 1 # number of regions n_ages <- length(sgl_rg_sable_data$ages) # number of ages n_sexes <- sgl_rg_sable_data$n_sexes # number of sexes n_fish_fleets <- sgl_rg_sable_data$n_fish_fleets # number of fishery fleets do_recruits_move <- 0 # recruits don't move terminal_NAA <- array(sgl_rg_sable_rep$NAA[,length(sgl_rg_sable_data$years),,], dim = c(n_regions, n_ages, n_sexes)) # terminal numbers at age WAA <- array(rep(sgl_rg_sable_data$WAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # weight at age WAA_fish <- array(rep(sgl_rg_sable_data$WAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # weight at age for fishery MatAA <- array(rep(sgl_rg_sable_data$MatAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # maturity at age fish_sel <- array(rep(sgl_rg_sable_rep$fish_sel[,length(sgl_rg_sable_data$years),,,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # selectivity Movement <- array(rep(sgl_rg_sable_rep$Movement[,,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_regions, n_proj_yrs, n_ages, n_sexes)) # movement terminal_F <- array(sgl_rg_sable_rep$Fmort[,length(sgl_rg_sable_data$years),], dim = c(n_regions, n_fish_fleets)) # terminal F natmort <- array(sgl_rg_sable_rep$natmort[,length(sgl_rg_sable_data$years),,], dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # natural mortality recruitment <- array(sgl_rg_sable_rep$Rec[,20:(length(sgl_rg_sable_data$years) - 2)], dim = c(n_regions, length(20:length(sgl_rg_sable_data$years) - 2))) # recruitment values to use for mean recruitment calculations or inverse gaussian parameterization  # Define reference points to use in HCR f_ref_pt = array(sgl_ref_pt$f_ref_pt, dim = c(n_regions, n_proj_yrs)) b_ref_pt = array(sgl_ref_pt$b_ref_pt, dim = c(n_regions, n_proj_yrs)) # do population projection out <- Do_Population_Projection(n_proj_yrs = n_proj_yrs, # Number of projection years                                n_regions = n_regions, # number of regions                                n_ages = n_ages, # number of ages                                n_sexes = n_sexes, # number of sexes                                sexratio = sexratio, # sex ratio for recruitment                                n_fish_fleets = n_fish_fleets, # number of fishery fleets                                do_recruits_move = do_recruits_move, # whether recruits move (not used since single area)                                recruitment = recruitment, # recruitment values to use for mean recruitment                                 terminal_NAA = terminal_NAA, # terminal numbers at age                                terminal_F = terminal_F, # terminal F                                natmort = natmort, # natural mortality values to use in projection                                WAA = WAA, # weight at age values to use in projection spawning                                WAA_fish = WAA_fish, # weight at age values to use in projection fishery                                MatAA = MatAA, # maturity at age values to use in projection                                fish_sel = fish_sel, # fishery selectivity values to use in projection                                Movement = Movement, # movement values (not used since single area)                                f_ref_pt = f_ref_pt, # fishery reference points (f40)                                b_ref_pt = b_ref_pt, # biological reference points (b40)                                HCR_function = HCR_function, # threshold control rule defined above                                recruitment_opt = \"mean_rec\", # recruitment assumption utilizes the mean recruits for the supplied recruitment estimates                                fmort_opt = \"HCR\", # Fishing mortality in projection years are determined using a HCR                                t_spawn = t_spawn # Spawn timing                                ) combined_ssb <- c(sgl_rg_sable_rep$SSB[1, -65], out$proj_SSB[1,]) # removing terminal year becauase repeated in projection calculations years <- 1960:(2023 + n_proj_yrs)  ssb_df <- tibble(   Year = years,   SSB = combined_ssb )  # Plot ggplot(ssb_df, aes(x = Year, y = SSB)) +   geom_line(size = 1) +   geom_vline(xintercept = 2024, linetype = \"dashed\") + # projection start   scale_y_continuous(limits = c(0, 300)) +   labs(x = \"Year\", y = \"SSB (kt)\") +   theme_bw(base_size = 13) combined_catch <- c(   rowSums(sgl_rg_sable_rep$PredCatch[1, -65, ]), # removing terminal year becauase repeated in projection calculations   rowSums(out$proj_Catch[1, , ]) )  years <- 1960:(2023 + n_proj_yrs)  catch_df <- tibble(   Year = years,   Catch = combined_catch )  # Plot ggplot(catch_df, aes(x = Year, y = Catch)) +   geom_line(size = 1) +   geom_vline(xintercept = 2024, linetype = \"dashed\") +  # projection start   labs(x = \"Year\", y = \"Catch (kt)\") +   theme_bw(base_size = 13) sum(out$proj_Catch[1,2,]) # Catch advice in terminal year + 1"},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"multi-region-2","dir":"Articles","previous_headings":"Code Demonstration > Conducting Catch Projections to Derive Catch Advice (Deterministic Recruitment)","what":"Multi Region","title":"Deriving Reference Points, Catch Advice, and Projections","text":"following, demonstrate catch projections can conducted multi-region context, using independent SPR rates, region-specific estimates Fr,40F_{r,40} Br,40B_{r,40}. general, steps similar single-region case. , utilize harvest control rule function defined . Given region unique estimates, result different harvest control rules applied region:  Let’s define inputs needed run population projection: global reference points (SPR MSY-based) used, fishing mortality (FF) applied across regions single global FF estimated. illustrated : contrast, independent SPR approach assigns region-specific FF value. example, first projection year: projections follow, use independent SPR rates allow region-specific reference points: , can visualize projections look like terms SSB catch advice:","code":"# Define HCR to use HCR_function <- function(x, frp, brp, alpha = 0.05) {   stock_status <- x / brp # define stock status   # If stock status is > 1   if(stock_status >= 1) f <- frp   # If stock status is between brp and alpha   if(stock_status > alpha && stock_status < 1) f <- frp * (stock_status - alpha) / (1 - alpha)   # If stock status is less than alpha   if(stock_status < alpha) f <- 0   return(f) }  # Build a dataframe by looping over j and i scalars hcr_df <- expand.grid(   j = 1:5,   i = 1:50 ) %>%   mutate(     frp = mapply(function(j) mlt_ref_pt_indp$f_ref_pt[j], j),     brp = mapply(function(j) mlt_ref_pt_indp$b_ref_pt[j], j),     F = mapply(function(i, j) {       HCR_function(x = i, frp = mlt_ref_pt_indp$f_ref_pt[j], brp = mlt_ref_pt_indp$b_ref_pt[j])     }, i, j),     SSB_B40 = i / brp   )  ggplot(hcr_df, aes(x = SSB_B40, y = F, color = factor(j))) +   geom_line(lwd = 1.3) +   facet_wrap(~j, scales = 'free') +   labs(x = \"SSB / B40\", y = \"F\",  color = 'Region') +   theme_bw(base_size = 13) +   theme(legend.position = 'none') data(\"mlt_rg_sable_rep\") # read in multi region report data(\"mlt_rg_sable_data\") # read in multi region data   # Setup necessary inputs t_spawn <- 0 # spawn timing sexratio <- 0.5 # sex ratio n_proj_yrs <- 15 # number of projection years n_regions <- 5 # number of regions n_ages <- length(mlt_rg_sable_data$ages) # number of ages n_sexes <- mlt_rg_sable_data$n_sexes # number of sexes n_fish_fleets <- mlt_rg_sable_data$n_fish_fleets # number of fishery fleets do_recruits_move <- 0 # recruits don't move terminal_NAA <- array(mlt_rg_sable_rep$NAA[,length(mlt_rg_sable_data$years),,], dim = c(n_regions, n_ages, n_sexes)) # terminal numbers at age WAA <- array(rep(mlt_rg_sable_data$WAA[,length(mlt_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # weight at age WAA_fish <- array(rep(mlt_rg_sable_data$WAA[,length(mlt_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # weight at age MatAA <- array(rep(mlt_rg_sable_data$MatAA[,length(mlt_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # maturity at age fish_sel <- array(rep(mlt_rg_sable_rep$fish_sel[,length(mlt_rg_sable_data$years),,,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # selectivity Movement <- aperm(abind::abind(replicate(n_proj_yrs, mlt_rg_sable_rep$Movement[,,length(mlt_rg_sable_data$years),,], simplify = FALSE), along = 5), perm = c(1,2,5,3,4)) # movement terminal_F <- array(mlt_rg_sable_rep$Fmort[,length(mlt_rg_sable_data$years),], dim = c(n_regions, n_fish_fleets)) # terminal F natmort <- array(mlt_rg_sable_rep$natmort[,length(mlt_rg_sable_data$years),,], dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # natural mortality recruitment <- array(mlt_rg_sable_rep$Rec[,20:(length(mlt_rg_sable_data$years) - 2)], dim = c(n_regions, length(20:length(mlt_rg_sable_data$years) - 2))) # recruitment values to use for mean recruitment calculations or inverse gaussian parameterization  # Define independent SPR reference points to use in HCR f_ref_pt_indp = array(mlt_ref_pt_indp$f_ref_pt, dim = c(n_regions, n_proj_yrs)) b_ref_pt_indp = array(mlt_ref_pt_indp$b_ref_pt, dim = c(n_regions, n_proj_yrs)) f_ref_pt_global = array(mlt_ref_pt_global$f_ref_pt, dim = c(n_regions, n_proj_yrs)) b_ref_pt_global = array(mlt_ref_pt_global$b_ref_pt, dim = c(n_regions, n_proj_yrs)) # F40 f_ref_pt_indp[,2] # independent SPR #> [1] 0.08242958 0.08191864 0.07998789 0.08040071 0.07969338 f_ref_pt_global[,2] # global SPR #> [1] 0.07997762 0.07997762 0.07997762 0.07997762 0.07997762  # b40 b_ref_pt_indp[,2] # independent SPR #> [1] 31.46321 24.63865 20.11382 33.32957 13.30036 b_ref_pt_global[,2] # global SPR #> [1] 31.46321 24.63865 20.11382 33.32957 13.30036 # do population projection out <- Do_Population_Projection(n_proj_yrs = n_proj_yrs, # Number of projection years                               n_regions = n_regions, # number of regions                               n_ages = n_ages, # number of ages                               n_sexes = n_sexes, # number of sexes                               sexratio = sexratio, # sex ratio for recruitment                               n_fish_fleets = n_fish_fleets, # number of fishery fleets                               do_recruits_move = do_recruits_move, # whether recruits move (not used since single area)                               recruitment = recruitment, # recruitment values to use for mean recruitment                                terminal_NAA = terminal_NAA, # terminal numbers at age                               terminal_F = terminal_F, # terminal F                               natmort = natmort, # natural mortality values to use in projection                               WAA = WAA, # weight at age values to use in projection spawning                               WAA_fish = WAA_fish, # weight at age values to use in projection fishery                               MatAA = MatAA, # maturity at age values to use in projection                               fish_sel = fish_sel, # fishery selectivity values to use in projection                               Movement = Movement, # movement values (not used since single area)                               f_ref_pt = f_ref_pt_indp, # fishery reference points (f40)                               b_ref_pt = b_ref_pt_indp, # biological reference points (b40)                               HCR_function = HCR_function, # threshold control rule defined above                               recruitment_opt = \"mean_rec\", # recruitment assumption utilizes the mean recruits for the supplied recruitment estimates                               fmort_opt = \"HCR\", # Fishing mortality in projection years are determined using a HCR                               t_spawn = t_spawn # Spawn timing                               ) combined_ssb <- cbind(mlt_rg_sable_rep$SSB[,-62], out$proj_SSB[,]) # removing terminal year becauase repeated in projection calculations combined_ssb_df <- reshape2::melt(combined_ssb) %>%    rename(Region = Var1, Year = Var2, SSB = value)  # Plot ggplot(combined_ssb_df, aes(x = Year + 1959, y = SSB, color = factor(Region))) +   geom_line(size = 1) +   geom_vline(xintercept = 2021, linetype = \"dashed\") + # projection start   facet_wrap(~Region) +   scale_y_continuous(limits = c(0, NA)) +   labs(x = \"Year\", y = \"SSB (kt)\") +   theme_bw(base_size = 13) +   theme(legend.position = 'none') combined_catch <- cbind(apply(mlt_rg_sable_rep$PredCatch, c(1,2), sum), apply(out$proj_Catch, c(1,2), sum)) combined_catch_df <- reshape2::melt(combined_catch) %>%    rename(Region = Var1, Year = Var2, Catch = value)  # Plot ggplot(combined_catch_df, aes(x = Year + 1959, y = Catch, color = factor(Region))) +   geom_line(size = 1) +   geom_vline(xintercept = 2021, linetype = \"dashed\") + # projection start   facet_wrap(~Region) +   scale_y_continuous(limits = c(0, NA)) +   labs(x = \"Year\", y = \"Catch\") +   theme_bw(base_size = 13) +   theme(legend.position = 'none')  rowSums(out$proj_Catch[,2,]) # Catch advice by region in terminal year + 1"},{"path":"https://chengmatt.github.io/SPoRC/articles/i_reference_points.html","id":"conducting-stochastic-population-projections","dir":"Articles","previous_headings":"Code Demonstration","what":"Conducting Stochastic Population Projections","title":"Deriving Reference Points, Catch Advice, and Projections","text":"final section vignette, demonstrate conduct stochastic population projections. simplicity, focus single-region case, though approach extends similarly multi-region scenarios. Stochastic projections follow general structure deterministic ones, key difference recruitment_opt = 'inv_gauss’ specified introduce variability recruitment. demonstration purposes, set following projection scenarios, include: Using F40F_{40} projections, HCR applied adjust F40F_{40} projection year, Using F=0F = 0 projections. Let us first redefine single region inputs use projection function, also define number simulations conduct (1000): can define two projection scenarios use example, well arrays store projection results : Next, can run projections iteration scenarios, well number simulations conduct. Note switch fmort_opt = 'HCR' fmort_opt = 'Input' going scenario 1 scenario 2, given scenario 2 use HCR (HCR used threshold control rule defined earlier). Finally, can plot stochastic simulations inspect results:","code":"data(\"sgl_rg_sable_rep\") # read in single region report data(\"sgl_rg_sable_data\") # read in single region data   # Setup necessary inputs n_sims <- 1e3 # number of simulations to conduct t_spawn <- 0 # spawn timing sexratio <- 0.5 # sex ratio n_proj_yrs <- 15 # number of projection years n_regions <- 1 # number of regions n_ages <- length(sgl_rg_sable_data$ages) # number of ages n_sexes <- sgl_rg_sable_data$n_sexes # number of sexes n_fish_fleets <- sgl_rg_sable_data$n_fish_fleets # number of fishery fleets do_recruits_move <- 0 # recruits don't move terminal_NAA <- array(sgl_rg_sable_rep$NAA[,length(sgl_rg_sable_data$years),,], dim = c(n_regions, n_ages, n_sexes)) # terminal numbers at age WAA <- array(rep(sgl_rg_sable_data$WAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # weight at age WAA_fish <- array(rep(sgl_rg_sable_data$WAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # weight at age for the fishery MatAA <- array(rep(sgl_rg_sable_data$MatAA[,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # maturity at age fish_sel <- array(rep(sgl_rg_sable_rep$fish_sel[,length(sgl_rg_sable_data$years),,,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # selectivity Movement <- array(rep(sgl_rg_sable_rep$Movement[,,length(sgl_rg_sable_data$years),,], each = n_proj_yrs), dim = c(n_regions, n_regions, n_proj_yrs, n_ages, n_sexes)) # movement terminal_F <- array(sgl_rg_sable_rep$Fmort[,length(sgl_rg_sable_data$years),], dim = c(n_regions, n_fish_fleets)) # terminal F natmort <- array(sgl_rg_sable_rep$natmort[,length(sgl_rg_sable_data$years),,], dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # natural mortality recruitment <- array(sgl_rg_sable_rep$Rec[,20:(length(sgl_rg_sable_data$years) - 2)], dim = c(n_regions, length(20:length(sgl_rg_sable_data$years) - 2))) # recruitment values to use for mean recruitment calculations or inverse gaussian parameterization # Define the F used for each scenario  proj_inputs <- list(   # Scenario 1 - Using HCR to adjust f40   list(f_ref_pt = array(sgl_ref_pt$f_ref_pt, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(sgl_ref_pt$b_ref_pt, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ),   # Scenario 2 - F is set at 0   list(f_ref_pt = array(0, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = NULL,        fmort_opt = 'Input'   ) )  # store outputs all_scenarios_f <- array(0, dim = c(n_regions, n_proj_yrs, n_sims, length(proj_inputs))) all_scenarios_ssb <- array(0, dim = c(n_regions, n_proj_yrs, n_sims, length(proj_inputs))) all_scenarios_catch <- array(0, dim = c(n_regions, n_proj_yrs, n_fish_fleets, n_sims, length(proj_inputs))) set.seed(123) for (i in seq_along(proj_inputs)) {   for (sim in 1:n_sims) {      # do population projection     out <- Do_Population_Projection(n_proj_yrs = n_proj_yrs, # number of projection years                                     n_regions = n_regions, # number of regions                                     n_ages = n_ages, # number of ages                                     n_sexes = n_sexes, # number of sexes                                     sexratio = sexratio, # sex ratio                                     n_fish_fleets = n_fish_fleets, # number of fleets                                     do_recruits_move = do_recruits_move, # whether recruits move                                     recruitment = recruitment, # recruitment values to use to parameterize inverse gaussian                                     terminal_NAA = terminal_NAA, # terminal numbers at age                                     terminal_F = terminal_F, # terminal fishing mortality at age                                     natmort = natmort, # natural mortality                                      WAA = WAA, # weight at age for spawning                                     WAA_fish = WAA_fish, # weight at age for fishery                                     MatAA = MatAA, # maturity at age                                     fish_sel = fish_sel, # fishery selectivity                                     Movement = Movement, # movement                                     f_ref_pt = proj_inputs[[i]]$f_ref_pt, # fishing mortality to use for projection                                     b_ref_pt = proj_inputs[[i]]$b_ref_pt, # biological reference point to use in HCR                                     HCR_function = HCR_function, # harvest control rule function                                     recruitment_opt = \"inv_gauss\", # stochastic simulation for recruitment                                     fmort_opt = proj_inputs[[i]]$fmort_opt, # fishing mortality option (either HCR or a user input)                                     t_spawn = t_spawn # spawn timing     )      # store results     all_scenarios_ssb[,,sim,i] <- out$proj_SSB     all_scenarios_catch[,,,sim,i] <- out$proj_Catch     all_scenarios_f[,,sim,i] <- out$proj_F[,-(n_proj_yrs+1)] # remove last year, since it's not used        } # end sim loop   print(i) } # end i loop # Get historical SSB historical <- reshape2::melt(array(rep(sgl_rg_sable_rep$SSB, n_sims),                                    dim = c(n_regions, length(sgl_rg_sable_data$years), n_sims))) %>%   mutate(Year = Var2 + 1959,          Scenario = \"FABC (F40)\",  # or change to match the scenarios you're plotting          Type = \"Historical\") %>%   rename(Region = Var1, Simulation = Var3, SSB = value)  # Get all scenario projections scenarios <- reshape2::melt(all_scenarios_ssb) %>%   mutate(Year = Var2 + 2023,          Scenario = case_when(            Var4 == 1 ~ \"S1: FABC (F40)\",            Var4 == 2 ~ \"S2: F = 0\"          ),          Type = \"Projection\") %>%   rename(Region = Var1, Simulation = Var3, SSB = value)  # expand historical SSB for plotting scenarios_unique <- unique(scenarios$Scenario) historical_expanded <- historical[rep(1:nrow(historical), times = length(scenarios_unique)), ] historical_expanded$Scenario <- rep(scenarios_unique, each = nrow(historical))  # combine combined_ssb <- bind_rows(historical_expanded, scenarios)  # Plot combined_ssb %>%   ggplot(aes(x = Year, y = SSB, group = interaction(Scenario, Simulation), color = Type)) +   geom_line(alpha = 0.05) +   facet_wrap(~Scenario, scales = 'free') +   geom_hline(yintercept = sgl_ref_pt$b_ref_pt, lty = 2) + # b40   geom_vline(xintercept = 2024, lty = 2) + # projection start   scale_color_manual(values = c(\"Historical\" = \"black\", \"Projection\" = \"blue\")) +   theme_bw(base_size = 15) +   theme(legend.position = 'none') # Get historical catch historical <- reshape2::melt(array(rep(sgl_rg_sable_data$ObsCatch, n_sims),                                    dim = c(n_regions, length(sgl_rg_sable_data$years), sgl_rg_sable_data$n_fish_fleets, n_sims))) %>%   mutate(Year = Var2 + 1959,          Scenario = \"FABC (F40)\",  # or change to match the scenarios you're plotting          Type = \"Historical\") %>%   rename(Region = Var1, Simulation = Var4, Fleet = Var3, Catch = value) %>%   select(-Var2)  historical$Catch[is.na(historical$Catch)] <- 0  # Get all scenario projections scenarios <- reshape2::melt(all_scenarios_catch) %>%   mutate(Year = Var2 + 2023,          Scenario = case_when(            Var5 == 1 ~ \"S1: FABC (F40)\",            Var5 == 2 ~ \"S2: F = 0\"          ),          Type = \"Projection\") %>%   rename(Region = Var1, Simulation = Var4, Catch = value, Fleet = Var3) %>%   select(-c(Var2, Var5))  # expand historical SSB for plotting scenarios_unique <- unique(scenarios$Scenario) historical_expanded <- historical[rep(1:nrow(historical), times = length(scenarios_unique)), ] historical_expanded$Scenario <- rep(scenarios_unique, each = nrow(historical))  # combine combined_cat <- bind_rows(historical_expanded, scenarios)  # Plot combined_cat %>%   group_by(Year, Scenario, Simulation, Type, Region) %>%   summarize(Catch = sum(Catch)) %>%   ggplot(aes(x = Year, y = Catch, group = interaction(Scenario, Simulation), color = Type)) +   geom_line(alpha = 0.05) +   facet_wrap(~Scenario) +   coord_cartesian(ylim = c(0, NA)) +   scale_color_manual(values = c(\"Historical\" = \"black\", \"Projection\" = \"blue\")) +   theme_bw() +   theme(legend.position = 'none')"},{"path":"https://chengmatt.github.io/SPoRC/articles/j_starting_mapping.html","id":"starting-values","dir":"Articles","previous_headings":"","what":"Starting Values","title":"Starting Values and Fixing (and Sharing) Parameters","text":"Starting values can specified two ways: Directly within SPoRC::Setup_xxx functions. setup function accepts starting values ... argument. inputs must match model’s parameter names dimensions. information parameter dimensions, see Description Model Parameters vignette. SPoRC::Setup_Mod_Recln_global_R0, Rec_prop, steepness_h, ln_InitDevs, ln_RecDevs, ln_sigmaR SPoRC::Setup_Mod_Biologicalsln_M, M_offset SPoRC::Setup_Mod_Movementmove_pars, logit_move_devs, move_pe_pars SPoRC::Setup_Mod_Taggingln_Init_Tag_Mort, ln_Tag_Shed, ln_tag_theta, Tag_Reporting_Pars SPoRC::Setup_Mod_Catch_and_Fln_sigmaC, ln_sigmaF, ln_sigmaF_agg, ln_F_mean, ln_F_devs, ln_F_mean_AggCatch, ln_F_devs_AggCatch SPoRC::Setup_Mod_FishIdx_and_Compsln_FishAge_theta, FishAge_corr_pars, ln_FishAge_theta_agg, FishAge_corr_pars_agg,ln_FishLen_theta, FishLen_corr_pars, ln_FishLen_theta_agg, FishLen_corr_pars_agg SPoRC::Setup_Mod_SrvIdx_and_Compsln_SrvAge_theta, SrvAge_corr_pars, ln_SrvAge_theta_agg, SrvAge_corr_pars_agg,ln_SrvLen_theta, SrvLen_corr_pars, ln_SrvLen_theta_agg, SrvLen_corr_pars_agg SPoRC::Setup_Mod_Fishsel_and_Qln_fish_fixed_sel_pars, ln_fish_q, fishsel_pe_pars, ln_fishsel_devs SPoRC::Setup_Mod_Srvsel_and_Qln_srv_fixed_sel_pars, ln_srv_q, srvsel_pe_pars, ln_srvsel_devs Post-hoc modification starting values. Alternatively, can first call setup functions without specifying starting values, access modify internally created parameter list (input_list$par) running model. following, illustrate methods using recruitment module (Setup_Mod_Rec) specify starting values ln_global_R0 ln_sigmaR. First let us load package define model dimensions. can specify starting values directly using Setup_Mod_Rec function. Note inputs passed via ... argument must exactly match parameter names expected dimensions model (see Description Model Parameters vignette details). example, starting value ln_global_R0 set log(30), ln_sigmaR set log(1.5) early (first element) late (second element) periods. Alternatively, starting values can assigned running setup functions without initial specifications. Users can extract internal parameter list modify starting values needed:","code":"# Load in packages library(SPoRC)  data(\"sgl_rg_sable_data\") # load in data  input_list <- Setup_Mod_Dim(years = 1:length(sgl_rg_sable_data$years), # vector of years                              # (corresponds to year 1960 - 2024)                             ages = 1:length(sgl_rg_sable_data$ages), # vector of ages                             lens = seq(41,99,2), # number of lengths                             n_regions = 1, # number of regions                             n_sexes = sgl_rg_sable_data$n_sexes, # number of sexes == 1,                             # female, == 2 male                             n_fish_fleets = sgl_rg_sable_data$n_fish_fleets, # number of fishery                             # fleet == 1, fixed gear, == 2 trawl gear                             n_srv_fleets = sgl_rg_sable_data$n_srv_fleets, # number of survey fleets                             verbose = FALSE                             ) input_list <- Setup_Mod_Rec(   input_list = input_list,        # input data list from above   # Model options   do_rec_bias_ramp = FALSE,       # disable bias ramp   sigmaR_switch = as.integer(length(1960:1975)),  # switch from early to late sigmaR   dont_est_recdev_last = 1,       # do not estimate last recruitment deviate   rec_model = \"mean_rec\",         # recruitment model type   sexratio = c(0.5, 0.5),         # recruitment sex ratio   init_age_strc = 1,              # geometric series for initial age structure      # Specify starting values   ln_global_R0 = log(30),         # starting value for global R0   ln_sigmaR = c(log(1.5), log(1.5))  # starting values for early and late sigmaR ) input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             do_rec_bias_ramp = FALSE, # don't do bias ramp                              sigmaR_switch = as.integer(length(1960:1975)), # when to switch from early to late sigmaR                             dont_est_recdev_last = 1, # don't estimate last recruitment deviate                             rec_model = \"mean_rec\", # recruitment model                             sexratio = as.vector(c(0.5, 0.5)),  # recruitment sex ratio                             init_age_strc = 1 # geometric series to derive age structure                             )  # Specify starting values post-hoc # R0 input_list$par$ln_global_R0 # default starting value #> [1] 2.70805 input_list$par$ln_global_R0 <- log(30) # user specified starting value  # sigmaR input_list$par$ln_sigmaR # default starting value #> [1] 0 0 input_list$par$ln_sigmaR[] <- c(log(1.5), log(1.5)) # user specified starting value"},{"path":"https://chengmatt.github.io/SPoRC/articles/j_starting_mapping.html","id":"mapping","dir":"Articles","previous_headings":"","what":"Mapping","title":"Starting Values and Fixing (and Sharing) Parameters","text":"Mapping core feature TMB RTMB models. allows users either fix parameters known values share parameters across different parts model. sections , first demonstrate use mapping fix parameters. show mapping can used share parameters across model partitions.","code":""},{"path":"https://chengmatt.github.io/SPoRC/articles/j_starting_mapping.html","id":"fixing-parameters","dir":"Articles","previous_headings":"Mapping","what":"Fixing Parameters","title":"Starting Values and Fixing (and Sharing) Parameters","text":"SPoRC::Setup_xxx functions include arguments allow certain parameters fixed, meaning estimated model fitting. arguments available parameters, note parameters can specified fixed. example, use Setup_Mod_Rec show ln_sigmaR parameter can fixed. argument sigmaR_spec = \"fix\". fix ln_sigmaR specific value, simply supply value calling function: However, parameters include convenience argument like sigmaR_spec = \"fix\". example, ln_global_R0 . cases, can fix parameter manually modifying map list directly specifying desired starting value: example, ln_global_R0 fixed log(30) setting map entry NA providing desired value parameter list.","code":"input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             do_rec_bias_ramp = , # don't do bias ramp                              sigmaR_switch = as.integer(length(1960:1975)), # when to switch from early to late sigmaR                             dont_est_recdev_last = 1, # don't estimate last recruitment deviate                             rec_model = \"mean_rec\", # recruitment model                             sexratio = as.vector(c(0.5, 0.5)),  # recruitment sex ratio                             init_age_strc = 1, # geometric series to derive age structure                                                          # Parameter Fixing                             sigmaR_spec = 'fix'                             )  input_list$map$ln_sigmaR # both values are fixed and not estimated (specified as factor(rep(NA, 2))) #> [1] <NA> <NA> #> Levels: input_list$par$ln_sigmaR # ln_sigmaR is then fixed at the default starting value #> [1] 0 0 input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             do_rec_bias_ramp = , # don't do bias ramp                              sigmaR_switch = as.integer(length(1960:1975)), # when to switch from early to late sigmaR                             dont_est_recdev_last = 1, # don't estimate last recruitment deviate                             rec_model = \"mean_rec\", # recruitment model                             sexratio = as.vector(c(0.5, 0.5)),  # recruitment sex ratio                             init_age_strc = 1, # geometric series to derive age structure                                                          # Parameter Fixing                             sigmaR_spec = 'fix',                             ln_sigmaR = c(log(1.5), log(1.5)) # user specified starting value                             )  input_list$map$ln_sigmaR # both values are fixed and not estimated (specified as factor(rep(NA, 2))) #> [1] <NA> <NA> #> Levels: input_list$par$ln_sigmaR # ln_sigmaR is then fixed at the user specified starting value #> [1] 0.4054651 0.4054651 input_list <- Setup_Mod_Rec(input_list = input_list, # input data list from above                             # Model options                             do_rec_bias_ramp = , # don't do bias ramp                              sigmaR_switch = as.integer(length(1960:1975)), # when to switch from early to late sigmaR                             dont_est_recdev_last = 1, # don't estimate last recruitment deviate                             rec_model = \"mean_rec\", # recruitment model                             sexratio = as.vector(c(0.5, 0.5)),  # recruitment sex ratio                             init_age_strc = 1, # geometric series to derive age structure                             )  input_list$map$ln_global_R0 <- factor(NA) input_list$par$ln_global_R0 <- log(30)"},{"path":"https://chengmatt.github.io/SPoRC/articles/j_starting_mapping.html","id":"sharing-parameters","dir":"Articles","previous_headings":"Mapping","what":"Sharing Parameters","title":"Starting Values and Fixing (and Sharing) Parameters","text":"SPoRC::Setup_xxx functions also support sharing parameters across model partitions. example, selectivity parameters can shared sexes using built-convenience arguments. options simplify common sharing structures, users can also implement customized behavior needed. , demonstrate two approaches. First, show share fishery selectivity parameters sexes using convenience flag Setup_Mod_Fishsel_and_Q. , outline users can manually configure parameter sharing finer control. example , define two fishery fleets. Fleet 1 uses logistic selectivity model (2 parameters), Fleet 2 uses gamma dome-shaped model (2 parameters). first use fish_fixed_sel_pars_spec argument specify selectivity parameters fleets estimated across model partitions (est_all). Thus, inspect map, expect total 8 unique numbers, represent unique selectivity parameters estimated sex fleet (4 sex fleet combination). Next, use fish_fixed_sel_pars_spec argument indicate selectivity parameters shared across sex partitions fleets. Specifically, use \"est_shared_s\" setting link parameters sexes, even though model sex-structured. setup, still estimate separate parameters fleet, selectivity parameters used sexes within fleet. result, inspect mapping, expect four unique values—two per fleet—despite two sexes. parameter array ln_fish_fixed_sel_pars following structure: [n_regions, n_max_sel_pars, n_max_sel_blocks, n_sexes, n_fish_fleets] example, dimensions 1 x 2 x 1 x 2 x 2. means : fleet, two estimated selectivity parameters shared across two sexes flattened vector (required mapping), results four distinct values (two per fleet), even though underlying array spans two sexes minimal example replicates Setup_Mod_Fishsel_and_Q internally: can now compare custom map object constructed manually one generated Setup_Mod_Fishsel_and_Q: match, confirming parameters correctly shared across sexes fleet. Lastly, demonstrate manually specify advanced mapping parameter-sharing options fishery selectivity parameters. example, want : a50a_{50} parameter (inflection point) sex-specific slope parameter shared across sexes parameters sex-specific level control supported built-fish_fixed_sel_pars_spec convenience arguments, must construct mapping manually. begin calling Setup_Mod_Fishsel_and_Q \"est_all\" option fleets. creates parameter array correct dimensions assumes selectivity parameters uniquely estimated across model partitions. extract parameter array created internally ln_fish_fixed_sel_pars. array dimensions: [n_regions, n_max_sel_pars, n_max_sel_blocks, n_sexes, n_fish_fleets]. example, dimensions 1 x 2 x 1 x 2 x 2. can assign integer values array indicate parameters shared (value) independently estimated (different values). now assign specific values define desired sharing structure: flatten array vector factors assign map list. tells model parameters linked building model. custom mapping approach allows full control parameter sharing structures beyond available high-level setup arguments.","code":"input_list$data$Selex_Type <- 0 # specifying age-based selectivity for demonstration purposes input_list <- SPoRC::Setup_Mod_Fishsel_and_Q(input_list = input_list,                                        # Model options                                       cont_tv_fish_sel = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_sel_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_sel_model = c(\"logist1_Fleet_1\", \"gamma_Fleet_2\"),                                       fish_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_q_spec = c(\"fix\", \"fix\"),                                        # Share selectivity parameters across all partitions                                       fish_fixed_sel_pars_spec = c(\"est_all\", \"est_all\"))  input_list$map$ln_fish_fixed_sel_pars # 8 unique numbers, 4 for each sex and fleet combination #> [1] 1 2 3 4 5 6 7 8 #> Levels: 1 2 3 4 5 6 7 8 input_list$data$Selex_Type <- 0 # specifying age-based selectivity for demonstration purposes input_list <- SPoRC::Setup_Mod_Fishsel_and_Q(input_list = input_list,                                        # Model options                                       cont_tv_fish_sel = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_sel_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_sel_model = c(\"logist1_Fleet_1\", \"gamma_Fleet_2\"),                                       fish_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),                                       fish_q_spec = c(\"fix\", \"fix\"),                                        # Share selectivity parameters across all partitions                                       fish_fixed_sel_pars_spec = c(\"est_shared_s\", \"est_shared_s\"))  input_list$map$ln_fish_fixed_sel_pars # 4 unique numbers, 2 for each sex and fleet combination #> [1] 1 2 1 2 3 4 3 4 #> Levels: 1 2 3 4 # define dimensions n_regions <- 1 n_max_sel_pars <- 2 n_max_sel_blocks <- 1 n_sexes <- 2 n_fish_fleets <- 2  # define empty parameter array for demonstration ln_fish_fixed_sel_pars <- array(0, dim = c(n_regions,n_max_sel_pars,n_max_sel_blocks,n_sexes,n_fish_fleets)) ln_fish_fixed_sel_pars[1,,1,,1] <- c(1,2) # same parameters for each sex for fleet 1 ln_fish_fixed_sel_pars[1,,1,,2] <- c(3,4) # same parameters for each sex for fleet 2 ln_fish_fixed_sel_pars #> , , 1, 1, 1 #>  #>      [,1] [,2] #> [1,]    1    2 #>  #> , , 1, 2, 1 #>  #>      [,1] [,2] #> [1,]    1    2 #>  #> , , 1, 1, 2 #>  #>      [,1] [,2] #> [1,]    3    4 #>  #> , , 1, 2, 2 #>  #>      [,1] [,2] #> [1,]    3    4  # flatten array to a vector of factors for the map custom_map <- factor(as.vector(ln_fish_fixed_sel_pars)) custom_map #> [1] 1 2 1 2 3 4 3 4 #> Levels: 1 2 3 4 input_list$map$ln_fish_fixed_sel_pars #> [1] 1 2 1 2 3 4 3 4 #> Levels: 1 2 3 4 input_list$data$Selex_Type <- 0 # specifying age-based selectivity for demonstration purposes input_list <- SPoRC::Setup_Mod_Fishsel_and_Q(   input_list = input_list,    # Model options   cont_tv_fish_sel = c(\"none_Fleet_1\", \"none_Fleet_2\"),   fish_sel_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),   fish_sel_model = c(\"logist1_Fleet_1\", \"gamma_Fleet_2\"),   fish_q_blocks = c(\"none_Fleet_1\", \"none_Fleet_2\"),   fish_q_spec = c(\"fix\", \"fix\"),    # Start with all parameters estimated independently   fish_fixed_sel_pars_spec = c(\"est_all\", \"est_all\") ) map_ln_fish_fixed_sel_pars <- input_list$par$ln_fish_fixed_sel_pars  # extract the array # Fleet 1 (logistic):  # - sel_par 1 = a50 (sex-specific) # - sel_par 2 = slope (shared across sex) map_ln_fish_fixed_sel_pars[1,1,1,,1] <- c(1,2)   # a50: unique for each sex map_ln_fish_fixed_sel_pars[1,2,1,,1] <- c(3)     # slope: same for both sexes  # Fleet 2 (gamma):  # - sel_par 1 = amax (sex-specific) # - sel_par 2 = slope (sex-specific) map_ln_fish_fixed_sel_pars[1,1,1,,2] <- c(4,5)   # amax: unique per sex map_ln_fish_fixed_sel_pars[1,2,1,,2] <- c(6,7)   # slope: unique per sex # Flatten the mapping array and assign it to the map input_list$map$ln_fish_fixed_sel_pars <- factor(as.vector(map_ln_fish_fixed_sel_pars))  # View the final map input_list$map$ln_fish_fixed_sel_pars #> [1] 1 3 2 3 4 6 5 7 #> Levels: 1 2 3 4 5 6 7"},{"path":"https://chengmatt.github.io/SPoRC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Cheng. Author, maintainer.","code":""},{"path":"https://chengmatt.github.io/SPoRC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng M (2025). SPoRC: Generalized Stochastic (S) Population (Po) Model Regional (R) Components (C). R package version 0.1.0, https://chengmatt.github.io/SPoRC.","code":"@Manual{,   title = {SPoRC: A Generalized Stochastic (S) Population (Po) Model Over Regional (R) Components (C)},   author = {Matthew Cheng},   year = {2025},   note = {R package version 0.1.0},   url = {https://chengmatt.github.io/SPoRC}, }"},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/index.html","id":"matt-cheng-dan-goethel-pete-hulson-curry-cunningham","dir":"","previous_headings":"","what":"Matt Cheng, Dan Goethel, Pete Hulson, Curry Cunningham","title":"A Generalized Stochastic (S) Population (Po) Model Over Regional (R) Components (C)","text":"SPoRC flexible modeling framework captures population dynamics across space, incorporating stochasticity vital rates movement among geographically defined components. supports integration multiple data sources, regional structuring, age- sex-specific processes, making well suited complex metapopulation spatial stock assessment contexts.","code":""},{"path":"https://chengmatt.github.io/SPoRC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Generalized Stochastic (S) Population (Po) Model Over Regional (R) Components (C)","text":"SPoRC package written RTMB optionally relies several packages plotting model diagnostics purposes. install package, users devtools installed. also generally recommended install packages listed , need users want functionality one-step ahead residuals. users may experience installation issues regarding permissions. can potentially circumvented following code: package still much active development. Use risk!","code":"install.packages(\"devtools\") # install dev tools install.packages(\"TMB\") # install TMB install.packages(\"RTMB\") # install RTMB TMB:::install.contrib(\"https://github.com/vtrijoulet/OSA_multivariate_dists/archive/main.zip\") # get multivariate OSA distributions  # optional packages to install devtools::install_github(\"fishfollower/compResidual/compResidual\") devtools::install_github(\"noaa-afsc/afscOSA\", dependencies = TRUE)  # install SPoRC devtools::install_github(\"chengmatt/SPoRC\", dependencies = TRUE) devtools::install_github(\"chengmatt/SPoRC\", dependencies = TRUE, lib = Sys.getenv(\"R_LIBS_USER\"))"},{"path":"https://chengmatt.github.io/SPoRC/reference/Do_Population_Projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Do Population Projections — Do_Population_Projection","title":"Do Population Projections — Do_Population_Projection","text":"Population Projections","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Do_Population_Projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do Population Projections — Do_Population_Projection","text":"","code":"Do_Population_Projection(   n_proj_yrs = 2,   n_regions,   n_ages,   n_sexes,   sexratio,   n_fish_fleets,   do_recruits_move = 0,   recruitment,   terminal_NAA,   terminal_F,   natmort,   WAA,   WAA_fish,   MatAA,   fish_sel,   Movement,   f_ref_pt = NULL,   b_ref_pt = NULL,   HCR_function = NULL,   recruitment_opt = \"inv_gauss\",   fmort_opt = \"HCR\",   t_spawn,   bh_rec_opt = NULL )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Do_Population_Projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do Population Projections — Do_Population_Projection","text":"n_proj_yrs Number projection years n_regions Number regions n_ages Number ages n_sexes Number sexes sexratio Recruitment sex ratio n_fish_fleets Number fishery fleets do_recruits_move Whether recruits move (0 == move, 1 == move) recruitment Recruitment matrix dimensioned n_regions, n_yrs want summarize across, condition projection terminal_NAA Terminal Numbers Age dimensioned n_regions, n_ages, n_sexes terminal_F Terminal fishing mortality rate, dimensioned n_regions, n_fish_fleets natmort Natural mortality, dimensioned n_regions, n_proj_yrs, n_ages, n_sexes WAA Weight age, dimensioned n_regions, n_proj_yrs, n_ages, n_sexes WAA_fish Weight age fishery, dimensioned n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets MatAA Maturity age, dimensioned n_regions, n_proj_yrs, n_ages, n_sexes fish_sel Fishery selectivity, dimensioned n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets Movement Movement, dimensioned n_regions, n_regions, n_proj_yrs, n_ages, n_sexes f_ref_pt Fishing mortality reference point dimensioned n_regions n_proj_yrs b_ref_pt Biological reference point dimensioned n_regions n_proj_yrs HCR_function Function describing harvest control rule. function always following arguments: x, represents SSB, frp, takes inputs fishery reference points, brp, takes inputs biological reference points. additional arguments specified defaults hard coded / fixed within function. recruitment_opt Recruitment simulation option, options \"inv_gauss\", simulates future recruitment based recruitment values supplied using inverse gaussian distribution, \"mean_rec\", takes mean recruitment values supplied given region, \"zero\", assumes future recruitment occur fmort_opt Fishing Mortality option, includes \"HCR\", modifies F reference point using user supplied HCR_function, \"Input\", uses projected F values supplied user. t_spawn Fraction time spawning used compute projected SSB bh_rec_opt list object containing following arguments: recruitment_dd value (0 1) indicating global (1) local density dependence (0). case single region model, either local global give results rec_lag value indicating number years lagged given year's SSB produces recruits R0 virgin recruitment parameter Rec_Prop Recruitment apportionment values. single region model, set value 1. Dimensioned n_regions h Steepness values stock recruitment curve. Dimensioned n_regions WAA weight--age array dimensioned n_regions, n_ages, n_sexes, reference year utilize values first year MatAA maturity age array dimensioned n_regions, n_ages, n_sexes, reference year utilize values first year natmort natural mortality age array dimensioned n_regions, n_ages, n_sexes, reference year utilize values first year SSB SSB values estimated given model, dimensioned n_regions n_yrs","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Do_Population_Projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do Population Projections — Do_Population_Projection","text":"list containing projected F, catch, SSB, Numbers Age. (Objects generally dimensioned following order: n_regions, n_yrs, n_ages, n_sexes, n_fleets)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Do_Population_Projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do Population Projections — Do_Population_Projection","text":"","code":"if (FALSE) { # \\dontrun{ # Define HCR to use HCR_function <- function(x, frp, brp, alpha = 0.05) {   stock_status <- x / brp # define stock status   # If stock status is > 1   if(stock_status >= 1) f <- frp   # If stock status is between brp and alpha   if(stock_status > alpha && stock_status < 1) f <- frp * (stock_status - alpha) / (1 - alpha)   # If stock status is less than alpha   if(stock_status < alpha) f <- 0   return(f) } rep <- obj$report(obj$env$last.par.best) # need to have an RTMB object first # Setup necessary inputs n_sims <- 1000 t_spawn <- 0 sexratio <- 0.5 n_proj_yrs <- 15 n_regions <- 1 n_ages <- length(data$ages) n_sexes <- data$n_sexes n_fish_fleets <- 2 do_recruits_move <- 0 terminal_NAA <- array(obj$rep$NAA[,length(data$years),,], dim = c(n_regions, n_ages, n_sexes)) WAA <- array(rep(data$WAA[,length(data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # weight at age WAA_fish <- array(rep(data$WAA_fish[,length(data$years),,,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # weight at age for fishery MatAA <- array(rep(data$MatAA[,length(data$years),,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) # maturity at age fish_sel <- array(rep(obj$rep$fish_sel[,length(data$years),,,], each = n_proj_yrs), dim = c(n_regions, n_proj_yrs, n_ages, n_sexes, n_fish_fleets)) # selectivity Movement <- array(rep(obj$rep$Movement[,,length(data$years),,], each = n_proj_yrs), dim = c(n_regions, n_regions, n_proj_yrs, n_ages, n_sexes)) terminal_F <- array(obj$rep$Fmort[,length(data$years),], dim = c(n_regions, n_fish_fleets)) natmort <- array(obj$rep$natmort[,length(data$years),,], dim = c(n_regions, n_proj_yrs, n_ages, n_sexes)) recruitment <- array(obj$rep$Rec[,20:(length(data$years) - 2)], dim = c(n_regions, length(20:length(data$years) - 2)))  # Define reference points spr_35 <- Get_Reference_Points(data = data,                                rep = rep,                                SPR_x = 0.35, t_spwn = 0, sex_ratio_f = 0.5,                                calc_rec_st_yr = 20, rec_age = 2)  spr_40 <- Get_Reference_Points(data = data,                                rep = rep,                                SPR_x = 0.4, t_spwn = 0, sex_ratio_f = 0.5,                                calc_rec_st_yr = 20, rec_age = 2)  spr_60 <- Get_Reference_Points(data = data,                                rep = rep,                                SPR_x = 0.6, t_spwn = 0, sex_ratio_f = 0.5,                                calc_rec_st_yr = 20, rec_age = 2)  # Extract reference points b40 <- spr_40$b_ref_pt b60 <- spr_60$b_ref_pt f40 <- spr_40$f_ref_pt f35 <- spr_35$f_ref_pt f60 <- spr_60$f_ref_pt # Define the F used for each scenario (Based on BSAI Intro Report) proj_inputs <- list(   # Scenario 1 - Using HCR to adjust maxFABC   list(f_ref_pt = array(f40, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(b40, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ),   # Scenario 2 - Using HCR to adjust maxFABC based on last year's value (constant fraction - author specified F)   list(f_ref_pt = array(f40 * (f40 / 0.086), dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(b40, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ),   # Scenario 3 - Using an F input of last 5 years average F, and   list(f_ref_pt = array(mean(rowSums(sabie_rtmb_model$rep$Fmort[1, 60:64, ])), dim = c(n_regions, n_proj_yrs)),        b_ref_pt = NULL,        fmort_opt = 'Input'   ),   # Scenario 4 - Using HCR to adjust F60   list(f_ref_pt = array(f60, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(b40, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ),   # Scenario 5 - F is set at 0   list(f_ref_pt = array(0, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = NULL,        fmort_opt = 'Input'   ),   # Scenario 6 - Using HCR to adjust FOFL   list(f_ref_pt = array(f35, dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(b40, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ),   # Scenario 7 - Using HCR to adjust FABC in first 2 projection years, and then later years are adjusting FOFL   list(f_ref_pt = array(c(rep(f40, 2), rep(f35, n_proj_yrs - 2)), dim = c(n_regions, n_proj_yrs)),        b_ref_pt = array(b40, dim = c(n_regions, n_proj_yrs)),        fmort_opt = 'HCR'   ) )  # store outputs all_scenarios_f <- array(0, dim = c(n_regions, n_proj_yrs, n_sims, length(proj_inputs))) all_scenarios_ssb <- array(0, dim = c(n_regions, n_proj_yrs, n_sims, length(proj_inputs))) all_scenarios_catch <- array(0, dim = c(n_regions, n_proj_yrs, n_fish_fleets, n_sims, length(proj_inputs)))  for (i in seq_along(proj_inputs)) {   for (sim in 1:n_sims) {      # do population projection     out <- Do_Population_Projection(n_proj_yrs = n_proj_yrs,                                     n_regions = n_regions,                                     n_ages = n_ages,                                     n_sexes = n_sexes,                                     sexratio = sexratio,                                     n_fish_fleets = n_fish_fleets,                                     do_recruits_move = do_recruits_move,                                     recruitment = recruitment,                                     terminal_NAA = terminal_NAA,                                     terminal_F = terminal_F,                                     natmort = natmort,                                     WAA = WAA,                                     WAA_fish = WAA_fish,                                     MatAA = MatAA,                                     fish_sel = fish_sel,                                     Movement = Movement,                                     f_ref_pt = proj_inputs[[i]]$f_ref_pt,                                     b_ref_pt = proj_inputs[[i]]$b_ref_pt,                                     HCR_function = HCR_function,                                     recruitment_opt = \"inv_gauss\",                                     fmort_opt = proj_inputs[[i]]$fmort_opt,                                     t_spawn = t_spawn     )      all_scenarios_ssb[,,sim,i] <- out$proj_SSB     all_scenarios_catch[,,,sim,i] <- out$proj_Catch     all_scenarios_f[,,sim,i] <- out$proj_F[,-(n_proj_yrs+1)] # remove last year, since it's not used   } # end sim loop   print(i) } # end i loop  # If users were to specify \"bh_rec\" for recruitment_opt, a list of specifications for projecting deterministic recruitment is required. An example # of this is provided below: bh_rec_opt <- list(   recruitment_dd = 1,   rec_lag = 1,   R0 = rep$R0,   h = rep$h_trans,   Rec_Prop = 1,   WAA = array(data$WAA[,1,,], dim = c(1, n_ages, n_sexes)),   MatAA = array(data$MatAA[,1,,], dim = c(1, n_ages, n_sexes)),   natmort = array(data$Fixed_natmort[,1,,], dim = c(1, n_ages, n_sexes)),   SSB = rep$SSB ) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_3d_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor algorithin for correlations within ages, years, and cohort (Work in Progress) — Get_3d_precision","title":"Constructor algorithin for correlations within ages, years, and cohort (Work in Progress) — Get_3d_precision","text":"Constructor algorithin correlations within ages, years, cohort (Work Progress)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_3d_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor algorithin for correlations within ages, years, and cohort (Work in Progress) — Get_3d_precision","text":"","code":"Get_3d_precision(   n_ages,   n_yrs,   pcorr_age,   pcorr_year,   pcorr_cohort,   ln_var_value,   Var_Type )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_3d_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor algorithin for correlations within ages, years, and cohort (Work in Progress) — Get_3d_precision","text":"n_ages Number ages n_yrs Number years pcorr_age correlations age pcorr_year correaltions year pcorr_cohort correlaitons cohort ln_var_value log space variance Var_Type variance type == 0, marginal (stationary slower run time), == 1 conditional (non-statationary, faster run time)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_3d_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor algorithin for correlations within ages, years, and cohort (Work in Progress) — Get_3d_precision","text":"Sparse precision matrix dimensioned n_ages * n_years, n_ages * n_years","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Comp_Likelihoods.html","id":null,"dir":"Reference","previous_headings":"","what":"Gives negative log liklelihood values for composition data for a given year and a given fleet (fishery or survey) — Get_Comp_Likelihoods","title":"Gives negative log liklelihood values for composition data for a given year and a given fleet (fishery or survey) — Get_Comp_Likelihoods","text":"Gives negative log liklelihood values composition data given year given fleet (fishery survey)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Comp_Likelihoods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gives negative log liklelihood values for composition data for a given year and a given fleet (fishery or survey) — Get_Comp_Likelihoods","text":"","code":"Get_Comp_Likelihoods(   Exp,   Obs,   ISS,   Wt_Mltnml,   ln_theta_agg,   ln_theta,   LN_corr_pars = 0,   LN_corr_pars_agg = 0,   Comp_Type,   Likelihood_Type,   n_regions,   n_model_bins,   n_obs_bins,   n_sexes,   age_or_len,   AgeingError,   use,   comp_agg_type,   addtocomp )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Comp_Likelihoods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gives negative log liklelihood values for composition data for a given year and a given fleet (fishery or survey) — Get_Comp_Likelihoods","text":"Exp Expected values (catch age survey index age) indexed given year fleet (structured matrix age sex) Obs Observed values (catch age survey index age) indexed given year fleet (structured matrix age sex) ISS Input sample size indexed given year fleet (structured vector w/ sexes) Wt_Mltnml Mutlinomial weight () given fleet (structured vector w/ sexes) ln_theta_agg Log overdispersion parameter comp_type == 0, want estsimate either dirichlet multinomial ln_theta Log theta overdispersion Dirichlet mutlinomial (scalar vector depending 'Split' 'Joint') LN_corr_pars Logistic normal correlation parameters (dimensioned n_regions, n_sexes, 3 parameters) LN_corr_pars_agg Logistic normal correlation parameters comps aggregated (just dimensioned length 1 value) Comp_Type Composition Parameterization Type (== 0, aggregated comps sex, == 1, split comps sex region (implicit sex region ratio information), == 2, joint comps across sexes split region (implicit sex ratio information, region information)) Likelihood_Type Composition Likelihood Type (== 0, Multinomial, == 1 Dirichlet Multinomial) n_regions number regions modeled n_model_bins Number bins used model n_obs_bins Number observed composition bins n_sexes Number sexes modeled age_or_len Age length comps (== 0, Age, == 1, Length) AgeingError Ageing Error matrix use Vector 0s 1s corresponding regions (==0, obs dont' use, ==1, obs use) comp_agg_type aggregate data (aggregating) addtocomp Small constant add composition data","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Comp_Likelihoods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gives negative log liklelihood values for composition data for a given year and a given fleet (fishery or survey) — Get_Comp_Likelihoods","text":"Returns negative log likelihood composition data (age /length)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Det_Recruitment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Deterministic Recruitment — Get_Det_Recruitment","title":"Get Deterministic Recruitment — Get_Det_Recruitment","text":"Get Deterministic Recruitment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Det_Recruitment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Deterministic Recruitment — Get_Det_Recruitment","text":"","code":"Get_Det_Recruitment(   recruitment_model,   recruitment_dd,   y,   rec_lag,   R0,   Rec_Prop,   h,   n_regions,   n_ages,   WAA,   MatAA,   natmort,   SSB_vals )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Det_Recruitment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Deterministic Recruitment — Get_Det_Recruitment","text":"recruitment_model == 0, mean recruitment, == 1 beverton holt recruitment steepness recruitment_dd Recruitment density dependence (0 == local, 1 == global) y year rec_lag recruitment lag indexing SSB year R0 virgin mean recruitment (global) Rec_Prop Recruitment proportions allocate global R0 local density dependence h Vector steepness values n_regions n_regions Number regions n_ages number ages WAA Weight age region age MatAA Maturity region age natmort Natural moratliaty region age SSB_vals SSB matrix regiona year","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Det_Recruitment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Deterministic Recruitment — Get_Det_Recruitment","text":"Vector n_regions deterministic recruitment values mean recruitment beverton holt","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Feedback_Data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that obtains data for a simulation with a feedback loop — Get_Feedback_Data","title":"Helper function that obtains data for a simulation with a feedback loop — Get_Feedback_Data","text":"Helper function obtains data simulation feedback loop","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Feedback_Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that obtains data for a simulation with a feedback loop — Get_Feedback_Data","text":"","code":"Get_Feedback_Data(   sim_env,   sim_list,   y,   sim,   skeleton_data,   skeleton_parameters,   skeleton_mapping )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Feedback_Data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that obtains data for a simulation with a feedback loop — Get_Feedback_Data","text":"sim_env Simulation environment defined using Simulate_Pop_Feedback sim_list Simulation list defines operating model options y y index used annual cycle sim sim index used annual cycle skeleton_data Skeleton data list estimation method (SPoRC) dimensions defined using total number simulation years skeleton_parameters Skeleton parameters list estimation method (SPoRC) dimensions defined using total number simulation years skeleton_mapping Skeleton mapping list estimation method (SPoRC) dimensions defined using total number simulation years","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Feedback_Data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that obtains data for a simulation with a feedback loop — Get_Feedback_Data","text":"Returns data, parameters, mapping list truncated match feedback year","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Reference_Points.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to get reference points — Get_Reference_Points","title":"Wrapper function to get reference points — Get_Reference_Points","text":"Wrapper function get reference points","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Reference_Points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to get reference points — Get_Reference_Points","text":"","code":"Get_Reference_Points(   data,   rep,   SPR_x = NULL,   t_spwn = 0,   sex_ratio_f = 0.5,   calc_rec_st_yr = 1,   rec_age = 1,   type,   what )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Reference_Points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to get reference points — Get_Reference_Points","text":"data Data list RTMB rep Report list RTMB SPR_x SPR percentage target t_spwn specified mortality time spawning sex_ratio_f Sex ratio females used compute biological reference points calc_rec_st_yr first year mean recruitment computed rec_age Actual recruitment age value type Whether \"single_region\" reference point \"multi_region\" kind reference point use: SPR Spawning Potential Ratio single region model independent_SPR Spawning Potential Ratio multi region model, without movement global_SPR Global Spawning Potential Ratio multi region model, movement BH_MSY MSY reference points derived Beverton-Holt single region model independent_BH_MSY MSY reference points derived Beverton-Holt, without movement global_BH_MSY MSY reference points derived Beverton-Holt, movement","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Reference_Points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to get reference points — Get_Reference_Points","text":"list object fishing biological reference points","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Reference_Points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function to get reference points — Get_Reference_Points","text":"","code":"if (FALSE) { # \\dontrun{ f_40 <- Get_Reference_Points(data = data, rep = rep, SPR_x = 0.4, t_spwn = 0, type = \"single_region\", what = \"SPR\") f_40$F_x # estimated reference point } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Selex.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Selectivity — Get_Selex","title":"Calculate Selectivity — Get_Selex","text":"Computes selectivity using one several parametric semi-parametric models. Supports constant time-varying selectivity, including random effects GMRF-based deviations.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Selex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Selectivity — Get_Selex","text":"","code":"Get_Selex(   Selex_Model,   TimeVary_Model,   ln_Pars,   ln_seldevs,   Region,   Year,   Bin,   Sex )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Selex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Selectivity — Get_Selex","text":"Selex_Model Integer specifying selectivity model: 0 Logistic selectivity: uses b50 slope parameters 1 Gamma-shaped (dome) selectivity: uses bin--peak delta parameters 2 Power function selectivity: decreasing selectivity bin 3 Logistic selectivity using b50 b95 4 Double-normal (dome-shaped) selectivity plateau flexible tails TimeVary_Model Integer specifying time variation structure: 0 time variation (constant blocked) 1 IID deviations 2 Random walk time 3 3D AR1-GMRF marginal 4 3D AR1-GMRF conditional 5 2D AR1-GMRF ln_Pars Vector log-transformed selectivity parameters. Interpretation depends `Selex_Model`. ln_seldevs Array selectivity deviations (may log-scale), dimensioned : [n_regions, n_years, n_bins, n_sexes, 1]. Used time-varying semi-parametric selectivity. Region Integer index region Year Integer index year Bin Numeric vector bins compute selectivity Sex Integer index sex","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Selex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Selectivity — Get_Selex","text":"numeric vector selectivity values corresponding bins specified model.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Selex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Selectivity — Get_Selex","text":"Selectivity parameters transformed internally (typically using `exp()` logistic transformations) ensure remain valid ranges. Deviations (`ln_seldevs`) apply multiplicatively transformed parameters time-varying models used. semi-parametric models (TimeVary_Model 3–5), deviations applied directly resulting selectivity curve.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Tagging_Mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values for total tag mortality and tag fishing mortality — Get_Tagging_Mortality","title":"Get values for total tag mortality and tag fishing mortality — Get_Tagging_Mortality","text":"Get values total tag mortality tag fishing mortality","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Tagging_Mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values for total tag mortality and tag fishing mortality — Get_Tagging_Mortality","text":"","code":"Get_Tagging_Mortality(   tag_selex,   tag_natmort,   Fmort,   natmort,   Tag_Shed,   fish_sel,   n_regions,   n_ages,   n_sexes,   n_fish_fleets,   y,   what )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Tagging_Mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values for total tag mortality and tag fishing mortality — Get_Tagging_Mortality","text":"tag_selex Tag selectivity options, == 0 (uniform, F fleet 1 (dominant fleet)), == 1 (sex-averaged selectivity, F fleet 1 (dominant fleet)), == 2 (sex-specific selectivity, F fleet 1 (dominant fleet)), 3 (uniform F summed across fleets), 4 (sex averaged F summed across fleets, weighted sum), 5 (sex-specific F summed across fleets, weighted sum) tag_natmort Tag natural mortality options == 0 (averaged across sexes ages), == 1 (averaged across sexes, unique ages), == 2 (sex-specific, averaged across ages), == 3 (sex-age-specific) Fmort Array fishing mortality, dimensioned n_region, n_years, n_fish_fleets natmort Array fishing mortality, dimensioned n_region, n_years, n_ages, n_sexes Tag_Shed Scalar chronic tag shedding rate fish_sel Array fishery selectivity, dimensioned n_region, n_years, n_ages, n_sexes, n_fish_fleetss n_regions Number regions n_ages Number ages n_sexes Number sexes n_fish_fleets Number fishery fleets y Year index Whether return Z F (total fishing mortality)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_Tagging_Mortality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values for total tag mortality and tag fishing mortality — Get_Tagging_Mortality","text":"Z F values tagging specifications","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_move_PE_loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get Movement Process Error Likelihoods — Get_move_PE_loglik","title":"Title Get Movement Process Error Likelihoods — Get_move_PE_loglik","text":"Title Get Movement Process Error Likelihoods","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_move_PE_loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get Movement Process Error Likelihoods — Get_move_PE_loglik","text":"","code":"Get_move_PE_loglik(   PE_model,   PE_pars,   logit_devs,   map_move_devs,   do_recruits_move )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_move_PE_loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Get Movement Process Error Likelihoods — Get_move_PE_loglik","text":"PE_model Process error model values PE_pars Process error parameters logit_devs Deviations map_move_devs movement deviations share do_recruits_move Whether recruits move (0, move, 1 move)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_move_PE_loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Get Movement Process Error Likelihoods — Get_move_PE_loglik","text":"numeric value log likelihood (positive space)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_sel_PE_loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Get selectivity process error log likelihoods (positive) — Get_sel_PE_loglik","title":"Get selectivity process error log likelihoods (positive) — Get_sel_PE_loglik","text":"Get selectivity process error log likelihoods (positive)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_sel_PE_loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get selectivity process error log likelihoods (positive) — Get_sel_PE_loglik","text":"","code":"Get_sel_PE_loglik(PE_model, PE_pars, ln_devs, map_sel_devs, sel_vals)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_sel_PE_loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get selectivity process error log likelihoods (positive) — Get_sel_PE_loglik","text":"PE_model Process error model values (1, 2, 3, 4, 5) (iid, random walk, 3d marginal, 3d conditional, 2dar1) PE_pars Process error parameters ln_devs Deviations map_sel_devs selectivity deviations share sel_vals Selectivity values (either length age based)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Get_sel_PE_loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get selectivity process error log likelihoods (positive) — Get_sel_PE_loglik","text":"numeric value log likelihood (positive space)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Restrc_Comps.html","id":null,"dir":"Reference","previous_headings":"","what":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","title":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","text":"Restructure composition values, used within variety functions either Francis reweighting get observed expected composition values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Restrc_Comps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","text":"","code":"Restrc_Comps(Exp, Obs, Comp_Type, age_or_len, AgeingError, comp_agg_type)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Restrc_Comps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","text":"Exp Expected values (catch age survey index age) indexed given year fleet (structured matrix age sex) Obs Observed values (catch age survey index age) indexed given year fleet (structured matrix age sex) Comp_Type Composition Parameterization Type (== 0, aggregated comps sex, == 1, split comps sex (implicit sex ratio information), == 2, joint comps across sexes (implicit sex ratio information) age_or_len Age length comps (== 0, Age, == 1, Length) AgeingError Ageing Error matrix comp_agg_type Composition aggregation type mimic sablefish ADMB assessment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Restrc_Comps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","text":"Returns list array observed expected values given year fleet","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Restrc_Comps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restructure composition values, used within a variety of functions to either do Francis reweighting or get observed and expected composition values — Restrc_Comps","text":"","code":"if (FALSE) { # \\dontrun{ comps <- Restrc_Comps(Exp, Obs, Comp_Type, age_or_len, AgeingError) comps$Exp; comps$Obs } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/SPoRC_rtmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized RTMB model — SPoRC_rtmb","title":"Generalized RTMB model — SPoRC_rtmb","text":"Generalized RTMB model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/SPoRC_rtmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized RTMB model — SPoRC_rtmb","text":"","code":"SPoRC_rtmb(pars, data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/SPoRC_rtmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized RTMB model — SPoRC_rtmb","text":"pars Parameter List data Data List","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Biologicals.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup biological inputs for estimation model — Setup_Mod_Biologicals","title":"Setup biological inputs for estimation model — Setup_Mod_Biologicals","text":"Setup biological inputs estimation model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Biologicals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup biological inputs for estimation model — Setup_Mod_Biologicals","text":"","code":"Setup_Mod_Biologicals(   input_list,   WAA,   WAA_fish = NULL,   WAA_srv = NULL,   MatAA,   addtocomp = 0.001,   AgeingError = NULL,   Use_M_prior = 0,   M_prior = NA,   fit_lengths = 0,   SizeAgeTrans = NA,   Selex_Type = \"age\",   M_spec = NULL,   Fixed_natmort = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Biologicals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup biological inputs for estimation model — Setup_Mod_Biologicals","text":"input_list List containing data, parameter, map lists model. WAA Numeric array weight--age (spawning), dimensioned [n_regions, n_years, n_ages, n_sexes]. WAA_fish Numeric array weight--age (fishery), dimensioned [n_regions, n_years, n_ages, n_sexes, n_fish_fleets]. WAA_srv Numeric array weight--age (survey), dimensioned [n_regions, n_years, n_ages, n_sexes, n_srv_fleets]. MatAA Numeric array maturity--age, dimensioned [n_regions, n_years, n_ages, n_sexes]. addtocomp Numeric value constant add composition data. Default 1e-3. AgeingError Numeric matrix representing ageing error transition matrix, dimensioned [number modeled ages, number observed composition ages]. Defaults identity matrix specified (ageing error). Use_M_prior Integer flag indicating whether apply natural mortality prior (0 = , 1 = yes). M_prior Numeric vector length two giving mean (normal space) standard deviation natural mortality prior. fit_lengths Integer flag indicating whether fit length data (0 = , 1 = yes). SizeAgeTrans Numeric array size--age transition probabilities, dimensioned [n_regions, n_years, n_lens, n_ages, n_sexes]. Selex_Type Character string specifying whether selectivity age length-based. Default age-based \"length\": Length-based selectivity. \"age\": Age-based selectivity M_spec Character string specifying natural mortality estimation approach. Defaults NULL, estimates mortality sex independently. options: \"est_shared_s\": Estimate single natural mortality rate shared across sexes (n_sexes == 2). \"fix\": Fix natural mortality parameters using provided array. Fixed_natmort Numeric array fixed natural mortality values, dimensioned [n_regions, n_years, n_ages, n_sexes]. Required M_spec = \"fix\". ... Additional arguments starting values ln_M M_offset. ignored M_spec = \"fix\".","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Catch_and_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup fishing mortality and catch observations — Setup_Mod_Catch_and_F","title":"Setup fishing mortality and catch observations — Setup_Mod_Catch_and_F","text":"Setup fishing mortality catch observations","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Catch_and_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup fishing mortality and catch observations — Setup_Mod_Catch_and_F","text":"","code":"Setup_Mod_Catch_and_F(   input_list,   ObsCatch,   Catch_Type,   UseCatch,   Use_F_pen = 1,   est_all_regional_F = 1,   Catch_Constant = NULL,   sigmaC_spec = \"fix\",   sigmaF_spec = \"fix\",   sigmaF_agg_spec = \"fix\",   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Catch_and_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup fishing mortality and catch observations — Setup_Mod_Catch_and_F","text":"input_list list containing data, parameters, map lists used model. ObsCatch Numeric array observed catches, dimensioned [n_regions, n_years, n_fish_fleets]. Catch_Type Integer matrix dimensions [n_years, n_fish_fleets], specifying catch data types: 0: Use aggregated catch data year. 1: Use region-specific catch data year. UseCatch Indicator array [n_regions, n_years, n_fish_fleets] specifying whether include catch data fit: 0: use catch data. 1: Use catch data fit. Use_F_pen Integer flag indicating whether apply fishing mortality penalty: 0: apply penalty. 1: Apply penalty. est_all_regional_F Integer flag indicating whether regional fishing mortality deviations estimated: 0: fishing mortality deviations aggregated across regions. 1: fishing mortality deviations regional. Catch_Constant Numeric vector length n_fish_fleets specifying constants add catch observations. sigmaC_spec Character string specifying observation error structure catch data. Default behavior fixes sigmaC starting value 1e-3 (log-scale ln_sigmaC = log(1e-3)) regions fleets. options include: \"est_shared_f\": Estimate sigmaC shared across fishery fleets. \"est_shared_r\": Estimate sigmaC shared across regions unique fleet. \"est_shared_r_f\": Estimate sigmaC shared across regions fleets. \"fix\": Fix sigmaC starting value. \"est_all\": Estimate separate sigmaC region fleet. sigmaF_spec Character string specifying process error structure fishing mortality. Default fixes sigmaF 1 log scale (.e., ln_sigmaF = 0). options include: \"est_shared_f\": Estimate sigmaF shared across fishery fleets. \"est_shared_r\": Estimate sigmaF shared across regions unique fleet. \"est_shared_r_f\": Estimate sigmaF shared across regions fleets. \"fix\": Fix sigmaF starting value. \"est_all\": Estimate separate sigmaF region fleet. sigmaF_agg_spec Character string specifying process error structure aggregated fishing mortality. Default fixes sigmaF_agg starting value (log-scale ln_sigmaF_agg). options include: \"est_shared_f\": Estimate sigmaF_agg shared across fishery fleets. \"fix\": Fix starting value. \"est_all\": Estimate separate parameters fishery fleet. ... Additional arguments specifying starting values ln_sigmaC, ln_sigmaF, ln_sigmaF_agg.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up model dimensions — Setup_Mod_Dim","title":"Set up model dimensions — Setup_Mod_Dim","text":"Set model dimensions","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up model dimensions — Setup_Mod_Dim","text":"","code":"Setup_Mod_Dim(   years,   ages,   lens,   n_regions,   n_sexes,   n_fish_fleets,   n_srv_fleets,   verbose = FALSE )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up model dimensions — Setup_Mod_Dim","text":"years Numeric vector years. ages Numeric vector age classes. lens Numeric vector length bins; can set 1 length data modeled. n_regions Integer specifying number spatial regions. n_sexes Integer specifying number sexes. n_fish_fleets Integer specifying number fishery fleets. n_srv_fleets Integer specifying number survey fleets. verbose Logical flag indicating whether print progress messages (default FALSE).","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up model dimensions — Setup_Mod_Dim","text":"list containing three named elements: data List data inputs dimensioned model dimensions. parameters List model parameters initialized according dimensions. map List parameter mappings model fitting.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_FishIdx_and_Comps.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup observed fishery indices and composition data (age and length comps) — Setup_Mod_FishIdx_and_Comps","title":"Setup observed fishery indices and composition data (age and length comps) — Setup_Mod_FishIdx_and_Comps","text":"Setup observed fishery indices composition data (age length comps)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_FishIdx_and_Comps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup observed fishery indices and composition data (age and length comps) — Setup_Mod_FishIdx_and_Comps","text":"","code":"Setup_Mod_FishIdx_and_Comps(   input_list,   ObsFishIdx,   ObsFishIdx_SE,   fish_idx_type,   UseFishIdx,   ObsFishAgeComps,   UseFishAgeComps,   ISS_FishAgeComps = NULL,   ObsFishLenComps,   UseFishLenComps,   ISS_FishLenComps = NULL,   FishAgeComps_LikeType,   FishLenComps_LikeType,   FishAgeComps_Type,   FishLenComps_Type,   FishAge_comp_agg_type = NULL,   FishLen_comp_agg_type = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_FishIdx_and_Comps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup observed fishery indices and composition data (age and length comps) — Setup_Mod_FishIdx_and_Comps","text":"input_list List containing data list, parameter list, map list ObsFishIdx Observed fishery index data numeric array dimensions [n_regions, n_years, n_fish_fleets]. ObsFishIdx_SE Standard errors associated ObsFishIdx, also dimensioned [n_regions, n_years, n_fish_fleets]. fish_idx_type Character vector length n_fish_fleets specifying type index data. Options \"abd\" abundance, \"biom\" biomass, \"none\" index available. UseFishIdx Logical binary indicator array ([n_regions, n_years, n_fish_fleets]) specifying whether include fishery index likelihood (1) ignore (0). ObsFishAgeComps Observed fishery age composition data numeric array dimensions [n_regions, n_years, n_ages, n_sexes, n_fish_fleets]. Values reflect counts proportions (required sum 1, comparable scale). UseFishAgeComps Indicator array ([n_regions, n_years, n_fish_fleets]) specifying whether fit fishery age composition data (1) ignore (0). ISS_FishAgeComps Input sample size age compositions, array dimensioned [n_regions, n_years, n_sexes, n_fish_fleets]. Required observed age comps normalized (.e., sum 1), correctly scale contribution likelihood. ObsFishLenComps Observed fishery length composition data numeric array dimensions [n_regions, n_years, n_lens, n_sexes, n_fish_fleets]. Values reflect counts proportions. UseFishLenComps Indicator array ([n_regions, n_years, n_fish_fleets]) specifying whether fit fishery length composition data (1) ignore (0). ISS_FishLenComps ISS_FishAgeComps, length compositions. FishAgeComps_LikeType Character vector length n_fish_fleets specifying likelihood type used fishery age composition data. Options include \"Multinomial\", \"Dirichlet-Multinomial\", \"iid-Logistic-Normal\". Use \"none\" omit likelihood. FishLenComps_LikeType FishAgeComps_LikeType, fishery length composition data. FishAgeComps_Type Character vector specifying age compositions structured fleet year range. Options include: \"agg\": Aggregated across regions sexes. \"spltRspltS\": Split region sex (compositions sum 1 within region-sex group). \"spltRjntS\": Split region summed jointly across sexes. \"none\": composition data used. Format element \"<type>_Year_<start>-<end>_Fleet_<fleet number>\" (e.g., \"agg_Year_1-10_Fleet_1\"). FishLenComps_Type FishAgeComps_Type, length compositions. FishAge_comp_agg_type Optional integer vector length n_fish_fleets specifying order operations aggregating age compositions FishAgeComps_Type == \"agg\". 0: Normalize, aggregate, apply ageing error, normalize . 1: Aggregate first, normalize, apply ageing error. Default NULL. FishLen_comp_agg_type Optional integer vector length n_fish_fleets specifying order operations aggregating length compositions. 0: normalize applying size–age transition. 1: Normalize applying size–age transition. Default NULL. ... Additional arguments specifying starting values overdispersion parameters (e.g., ln_FishAge_theta, ln_FishLen_theta, ln_FishAge_theta_agg, ln_FishLen_theta_agg).","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Fishsel_and_Q.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup fishery selectivity and catchability specifications — Setup_Mod_Fishsel_and_Q","title":"Setup fishery selectivity and catchability specifications — Setup_Mod_Fishsel_and_Q","text":"Setup fishery selectivity catchability specifications","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Fishsel_and_Q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup fishery selectivity and catchability specifications — Setup_Mod_Fishsel_and_Q","text":"","code":"Setup_Mod_Fishsel_and_Q(   input_list,   cont_tv_fish_sel,   fish_sel_blocks,   fish_sel_model,   Use_fish_q_prior = 0,   fish_q_prior = NA,   fish_q_blocks,   fishsel_pe_pars_spec = NULL,   fish_fixed_sel_pars_spec = NULL,   fish_q_spec = NULL,   fish_sel_devs_spec = NULL,   corr_opt_semipar = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Fishsel_and_Q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup fishery selectivity and catchability specifications — Setup_Mod_Fishsel_and_Q","text":"input_list List containing data list, parameter list, map list cont_tv_fish_sel Character vector specifying form continuous time-varying selectivity fishery fleet. vector must length n_fish_fleets, element must follow structure: \"<time variation type>_Fleet_<fleet number>\". Valid time variation types include: \"none\": continuous time variation. \"iid\": Independent identically distributed deviations across years. \"rw\": Random walk time. \"3dmarg\": 3D marginal time-varying selectivity. \"3dcond\": 3D conditional time-varying selectivity. \"2dar1\": Two-dimensional AR1 process. example: \"iid_Fleet_1\" applies iid time-varying structure Fleet 1. \"none_Fleet_2\" means time variation used Fleet 2. Note: time-block-based selectivity (via fish_sel_blocks) specified fleet, corresponding entry must \"none_Fleet_<fleet number>\". fish_sel_blocks Character vector specifying fishery selectivity blocks region fleet. element must follow structure: `\"Block_<block number>_Year_<start>-<end>_Fleet_<fleet number>\"` `\"none_Fleet_<fleet number>\"`. allows users define time-varying selectivity blocks specific fleets within region. example: \"Block_1_Year_1-35_Fleet_1\" defines selectivity block 1 Fleet 1 covering years 1 35. \"Block_2_Year_36-56_Fleet_1\" defines block 2 Fleet 1 years 36 56. \"Block_3_Year_57-terminal_Fleet_1\" assigns block 3 year 57 terminal year Fleet 1. \"none_Fleet_2\" indicates fishery selectivity blocks used Fleet 2. blocks must non-overlapping sequential time within fleet, block numbers must unique within fleet. fish_sel_model Character vector specifying fishery selectivity model fleet. vector must length n_fish_fleets, element must follow structure: \"<selectivity model>_Fleet_<fleet number>\". Available selectivity model types include: \"logist1\": Logistic function parameters a50 k. \"logist2\": Logistic function parameters a50 a95. \"gamma\": Dome-shaped gamma function parameters amax delta. \"exponential\": Exponential function power parameter. \"dbnrml\": Double normal function 6 parameters. example: \"logist1_Fleet_1\" uses logistic (a50, k) model Fleet 1. \"gamma_Fleet_2\" uses gamma dome-shaped model Fleet 2. models applied region year defined overall model array structure (n_regions x n_years x n_fish_fleets), though vector defines functional form fleet. mathematical definitions implementation details selectivity form, refer model equations vignette. Use_fish_q_prior Integer specifying whether use fishery q prior (0 dont use) (1 use) fish_q_prior Fishery q priors normal space, dimensioned region, block,  fishery fleet, 2 (mean, sd 4 dimension array) fish_q_blocks Character vector specifying fishery catchability (q) blocks fleet. element must follow structure: \"Block_<block number>_Year_<start>-<end>_Fleet_<fleet number>\" \"none_Fleet_<fleet number>\". allows users define time-varying catchability blocks independently selectivity blocks. blocks must non-overlapping sequential time within fleet. example: \"Block_1_Year_1-35_Fleet_1\" assigns block 1 Fleet 1 years 1–35. \"Block_2_Year_36-56_Fleet_1\" continues block 2 years 36–56. \"Block_3_Year_57-terminal_Fleet_1\" assigns block 3 year 57 terminal year Fleet 1. \"none_Fleet_2\" indicates catchability blocks used Fleet 2. Internally, specifications converted [n_regions, n_years, n_fish_fleets] array, block mapped appropriate years fleets. fishsel_pe_pars_spec Character string specifying process error parameters fishery selectivity estimated across regions sexes. relevant cont_tv_fish_sel set \"none\"; otherwise, process error parameters treated fixed. Available options include: \"est_all\": Estimates separate process error parameters region sex. \"est_shared_r\": Shares process error parameters across regions (sex-specific parameters still estimated). \"est_shared_s\": Shares process error parameters across sexes (region-specific parameters still estimated). \"est_shared_r_s\": Shares process error parameters across regions sexes, estimating single set parameters. \"fix\" \"none\": estimate process error parameters; treated fixed. fish_fixed_sel_pars_spec Character string specifying structure estimating fixed-effect parameters fishery selectivity model (e.g., a50, k, amax). controls whether selectivity parameters estimated separately shared across regions sexes. Available options include: \"est_all\": Estimates separate fixed-effect selectivity parameters region sex. \"est_shared_r\": Shares parameters across regions (sex-specific parameters still estimated). \"est_shared_s\": Shares parameters across sexes (region-specific parameters still estimated). \"est_shared_r_s\": Shares parameters across regions sexes, estimating single set fixed-effect parameters. fish_q_spec Character string specifying structure fishery catchability (q) estimation across regions. controls whether separate shared parameters used. Available options include: \"est_all\": Estimates separate catchability parameters region. \"est_shared_r\": Estimates single catchability parameter shared across regions. fish_sel_devs_spec Character string specifying structure process error deviations time-varying fishery selectivity dimensioned number fishery fleets. determines deviations estimated across regions sexes. Available options include: \"est_all\": Estimates separate deviation time series region sex. \"est_shared_r\": Shares deviations across regions (sex-specific deviations still estimated). \"est_shared_s\": Shares deviations across sexes (region-specific deviations still estimated). \"est_shared_r_s\": Shares deviations across regions sexes, estimating single deviation time series. argument used continuous time-varying selectivity form specified (e.g., via cont_tv_fish_sel). corr_opt_semipar Character string specifying correlation structures suppress   using semi-parametric time-varying selectivity models. used cont_tv_sel   set one \"3dmarg\", \"3dcond\", \"2dar1\". option allows users turn estimation specific correlation components   time-varying selectivity model. can improve stability enforce assumptions   independence temporal age structure. Available options: \"corr_zero_y\": Sets year (temporal) correlations 0. \"corr_zero_a\": Sets age correlations 0. \"corr_zero_y_a\": Sets year age correlations 0. \"corr_zero_c\": Sets cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_y_c\": Sets year cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_a_c\": Sets age cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_y_a_c\": Sets correlations (year, age, cohort) 0.       valid cont_tv_sel = \"3dmarg\" \"3dcond\"; equivalent iid structure. correlation-suppression flags ignored cont_tv_sel set value. ... Additional arguments specifying starting values fishery selectivity catchability parameters (fishsel_pe_pars, ln_fishsel_devs, ln_fish_fixed_sel_pars, ln_fish_q)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Movement.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Movement Processes for SPoRC — Setup_Mod_Movement","title":"Setup Movement Processes for SPoRC — Setup_Mod_Movement","text":"Setup Movement Processes SPoRC","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Movement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Movement Processes for SPoRC — Setup_Mod_Movement","text":"","code":"Setup_Mod_Movement(   input_list,   do_recruits_move = 0,   use_fixed_movement = 0,   Fixed_Movement = NA,   Use_Movement_Prior = 0,   Movement_prior = NULL,   Movement_ageblk_spec = NULL,   Movement_yearblk_spec = NULL,   Movement_sexblk_spec = NULL,   cont_vary_movement = \"none\",   Movement_cont_pe_pars_spec = \"none\",   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Movement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Movement Processes for SPoRC — Setup_Mod_Movement","text":"input_list List containing data, parameter, map lists model. do_recruits_move Integer flag (0 1) indicating whether recruits move. Default 0 (move). use_fixed_movement Integer flag (0 1) indicating whether use fixed movement matrix (1) estimate movement parameters (0). Default 0. Fixed_Movement Numeric array fixed movement matrix dimensioned [n_regions, n_regions, n_years, n_ages, n_sexes]. Default array ones. Use_Movement_Prior Integer flag (0 1) indicating whether use movement priors. Default 0 (priors). Movement_prior Numeric vector array specifying prior values movement parameters. vector, constant prior applied across dimensions. Movement_ageblk_spec Either: Character string \"constant\" age-invariant movement, list numeric vectors specifying age blocks sharing parameters. example, list(c(1:6), c(7:10), c(11:n_ages)) defines three age blocks : ages 1 6 share parameters, ages 7 10 share parameters, ages 11 n_ages share parameters. specify age-invariant movement, use either \"constant\" list(c(1:n_ages)). Movement_yearblk_spec Either: Character string \"constant\" time-invariant movement, list numeric vectors specifying year blocks sharing movement parameters. Movement_sexblk_spec Either: Character string \"constant\" sex-invariant movement, list numeric vectors specifying sex blocks sharing movement parameters. cont_vary_movement Character string specifying continuous varying movement type. Available options: \"none\" \"iid_y\" (iid deviations year) \"iid_a\" (iid deviations age) \"iid_y_a\" (iid deviations year age) \"iid_y_s\" (iid deviations year sex) \"iid_a_s\" (iid deviations age sex) \"iid_y_a_s\" (iid deviations year, age, sex) Default \"none\". Movement_cont_pe_pars_spec Character string specifying process error parameter sharing. Available options: \"est_shared_r\" \"est_shared_a\" \"est_shared_s\" \"est_shared_r_a\" \"est_shared_a_s\" \"est_shared_r_s\" \"est_shared_r_a_s\" \"est_all\" \"fix\" \"none\" Default \"none\". ... Additional parameters starting values move_pars, logit_move_devs, move_pe_pars.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup model objects for specifying recruitment module and associated processes — Setup_Mod_Rec","title":"Setup model objects for specifying recruitment module and associated processes — Setup_Mod_Rec","text":"Setup model objects specifying recruitment module associated processes","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup model objects for specifying recruitment module and associated processes — Setup_Mod_Rec","text":"","code":"Setup_Mod_Rec(   input_list,   rec_model,   rec_dd = NULL,   rec_lag = 1,   Use_h_prior = 0,   h_mu = NA,   h_sd = NA,   do_rec_bias_ramp = 0,   bias_year = NA,   max_bias_ramp_fct = 1,   sigmaR_switch = 1,   dont_est_recdev_last = 0,   sexratio = 1,   init_age_strc = 0,   equil_init_age_strc = 1,   init_F_prop = 0,   sigmaR_spec = NULL,   InitDevs_spec = NULL,   RecDevs_spec = NULL,   h_spec = NULL,   t_spawn = 0,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup model objects for specifying recruitment module and associated processes — Setup_Mod_Rec","text":"input_list List containing data, parameters, map lists used model. rec_model Character string specifying recruitment model. Options : \"mean_rec\": Recruitment fixed mean value. \"bh_rec\": Beverton-Holt recruitment steepness parameter. rec_dd Character string specifying recruitment density dependence, options: \"local\", \"global\", NULL. rec_lag Integer specifying recruitment lag duration relative spawning stock biomass (SSB). Use_h_prior Integer flag (0 1) indicating whether apply prior steepness h. h_mu Numeric vector (length n_regions) specifying mean steepness prior values used. h_sd Numeric vector (length n_regions) specifying standard deviation steepness priors used. do_rec_bias_ramp Integer flag (0 1) indicating whether apply recruitment bias correction ramp. bias_year Numeric vector length 4 defining recruitment bias ramp periods: Element 1: End year bias correction period. Element 2: End year ascending bias ramp period. Element 3: End year full bias correction period. Element 4: Start year final bias correction period. example, 65 years total, c(21, 31, 60, 64) means: Years 1–21: bias correction. Years 22–31: Ascending bias correction. Years 32–60: Full bias correction. Years 61–63: Descending bias ramp. Years 64–65: bias correction. max_bias_ramp_fct Numeric specifying maximum bias correction apply recruitment bias ramp (0 1) sigmaR_switch Integer year indicating sigmaR switches early late values (0 disables switching). dont_est_recdev_last Integer specifying many recent recruitment deviations estimate. Default 0. sexratio Numeric vector specifying recruitment sex ratio, dimensioned number sexes. init_age_strc Integer flag specifying initialization initial age structure: 0: Initialize iteration. 1: Initialize using geometric series. equil_init_age_strc Integer flag specifying initial age structure deviations initialized. Default stochastic ages except recruitment age plus group. 0: Equilibrium initial age structure. 1: Stochastic initial age structure ages, except plus group, follows equilibrium calculations (geometric series) 2: Stochastic initial age structure ages init_F_prop Numeric value specifying initial fishing mortality proportion relative mean fishing mortality initializing age structure. sigmaR_spec Character string specifying estimation recruitment variability (sigmaR): NULL: Estimate separate sigmaR early late periods. \"est_shared\": Estimate one sigmaR shared across periods. \"fix\": Fix sigmaR values. \"fix_early_est_late\": Fix early sigmaR, estimate late sigmaR. InitDevs_spec Character string specifying estimation initial age deviations: NULL: Estimate deviations ages regions. \"est_shared_r\": Estimate deviations shared across regions. \"fix\": Fix deviations. RecDevs_spec Character string specifying recruitment deviation estimation: NULL: Estimate deviations regions years. \"est_shared_r\": Estimate deviations shared across regions (global recruitment deviations). \"fix\": Fix recruitment deviations. h_spec Character string specifying steepness estimation: NULL: Estimate steepness regions rec_model == \"bh_rec\". \"est_shared_r\": Estimate steepness shared across regions. \"fix\": Fix steepness values. rec_model == \"mean_rec\", steepness fixed. t_spawn Numeric fraction specifying spawning timing within year. ... Additional arguments specifying starting values recruitment parameters ln_global_R0, Rec_prop, h, ln_InitDevs, ln_RecDevs, ln_sigmaR.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_SrvIdx_and_Comps.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup observed survey indices and composition data (age and length comps) — Setup_Mod_SrvIdx_and_Comps","title":"Setup observed survey indices and composition data (age and length comps) — Setup_Mod_SrvIdx_and_Comps","text":"Setup observed survey indices composition data (age length comps)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_SrvIdx_and_Comps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup observed survey indices and composition data (age and length comps) — Setup_Mod_SrvIdx_and_Comps","text":"","code":"Setup_Mod_SrvIdx_and_Comps(   input_list,   ObsSrvIdx,   ObsSrvIdx_SE,   UseSrvIdx,   srv_idx_type,   ObsSrvAgeComps,   UseSrvAgeComps,   ObsSrvLenComps,   UseSrvLenComps,   ISS_SrvAgeComps = NULL,   ISS_SrvLenComps = NULL,   SrvAgeComps_LikeType,   SrvLenComps_LikeType,   SrvAgeComps_Type,   SrvLenComps_Type,   SrvAge_comp_agg_type = NULL,   SrvLen_comp_agg_type = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_SrvIdx_and_Comps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup observed survey indices and composition data (age and length comps) — Setup_Mod_SrvIdx_and_Comps","text":"input_list List containing data list, parameter list, map list ObsSrvIdx Observed survey index data numeric array dimensions [n_regions, n_years, n_srv_fleets]. ObsSrvIdx_SE Standard errors associated ObsSrvIdx, also dimensioned [n_regions, n_years, n_srv_fleets]. UseSrvIdx Logical binary indicator array ([n_regions, n_years, n_srv_fleets]) specifying whether include survey index likelihood (1) ignore (0). srv_idx_type Character vector length n_srv_fleets specifying type index data. Options \"abd\" abundance, \"biom\" biomass, \"none\" index available. ObsSrvAgeComps Observed survey age composition data numeric array dimensions [n_regions, n_years, n_ages, n_sexes, n_srv_fleets]. Values reflect counts proportions (required sum 1, comparable scale). UseSrvAgeComps Indicator array ([n_regions, n_years, n_srv_fleets]) specifying whether fit survey age composition data (1) ignore (0). ObsSrvLenComps Observed survey length composition data numeric array dimensions [n_regions, n_years, n_lens, n_sexes, n_srv_fleets]. Values reflect counts proportions. UseSrvLenComps Indicator array ([n_regions, n_years, n_srv_fleets]) specifying whether fit survey length composition data (1) ignore (0). ISS_SrvAgeComps Input sample size age compositions, array dimensioned [n_regions, n_years, n_sexes, n_srv_fleets]. Required observed age comps normalized (.e., sum 1), correctly scale contribution likelihood. ISS_SrvLenComps ISS_SrvAgeComps, length compositions. SrvAgeComps_LikeType Character vector length n_srv_fleets specifying likelihood type used survey age composition data. Options include \"Multinomial\", \"Dirichlet-Multinomial\", \"iid-Logistic-Normal\". Use \"none\" omit likelihood. SrvLenComps_LikeType SrvAgeComps_LikeType, survey length composition data. SrvAgeComps_Type Character vector specifying age compositions structured fleet year range. Options include: \"agg\": Aggregated across regions sexes. \"spltRspltS\": Split region sex (compositions sum 1 within region-sex group). \"spltRjntS\": Split region summed jointly across sexes. \"none\": composition data used. Format element \"<type>_Year_<start>-<end>_Fleet_<fleet number>\" (e.g., \"agg_Year_1-10_Fleet_1\"). SrvLenComps_Type SrvAgeComps_Type, length compositions. SrvAge_comp_agg_type Optional integer vector length n_srv_fleets specifying order operations aggregating age compositions SrvAgeComps_Type == \"agg\". 0: Normalize, aggregate, apply ageing error, normalize . 1: Aggregate first, normalize, apply ageing error. Default NULL. SrvLen_comp_agg_type Optional integer vector length n_srv_fleets specifying order operations aggregating length compositions. 0: normalize applying size–age transition. 1: Normalize applying size–age transition. Default NULL. ... Additional arguments specifying starting values overdispersion parameters (e.g., ln_SrvAge_theta, ln_SrvLen_theta, ln_SrvAge_theta_agg, ln_SrvLen_theta_agg).","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Srvsel_and_Q.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup survey selectivity and catchability specifications — Setup_Mod_Srvsel_and_Q","title":"Setup survey selectivity and catchability specifications — Setup_Mod_Srvsel_and_Q","text":"Setup survey selectivity catchability specifications","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Srvsel_and_Q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup survey selectivity and catchability specifications — Setup_Mod_Srvsel_and_Q","text":"","code":"Setup_Mod_Srvsel_and_Q(   input_list,   cont_tv_srv_sel,   srv_sel_blocks,   srv_sel_model,   Use_srv_q_prior = 0,   srv_q_prior = NA,   srv_q_blocks,   srvsel_pe_pars_spec = NULL,   srv_fixed_sel_pars_spec,   srv_q_spec = NULL,   srv_sel_devs_spec = NULL,   corr_opt_semipar = NULL,   srv_q_formula = NULL,   srv_q_cov_dat = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Srvsel_and_Q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup survey selectivity and catchability specifications — Setup_Mod_Srvsel_and_Q","text":"input_list List containing data list, parameter list, map list cont_tv_srv_sel Character vector specifying form continuous time-varying selectivity survey fleet. vector must length n_srv_fleets, element must follow structure: \"<time variation type>_Fleet_<fleet number>\". Valid time variation types include: \"none\": continuous time variation. \"iid\": Independent identically distributed deviations across years. \"rw\": Random walk time. \"3dmarg\": 3D marginal time-varying selectivity. \"3dcond\": 3D conditional time-varying selectivity. \"2dar1\": Two-dimensional AR1 process. example: \"iid_Fleet_1\" applies iid time-varying structure Fleet 1. \"none_Fleet_2\" means time variation used Fleet 2. Note: time-block-based selectivity (via srv_sel_blocks) specified fleet, corresponding entry must \"none_Fleet_<fleet number>\". srv_sel_blocks Character vector specifying survey selectivity blocks region fleet. element must follow structure: `\"Block_<block number>_Year_<start>-<end>_Fleet_<fleet number>\"` `\"none_Fleet_<fleet number>\"`. allows users define time-varying selectivity blocks specific fleets within region. example: \"Block_1_Year_1-35_Fleet_1\" defines selectivity block 1 Fleet 1 covering years 1 35. \"Block_2_Year_36-56_Fleet_1\" defines block 2 Fleet 1 years 36 56. \"Block_3_Year_57-terminal_Fleet_1\" assigns block 3 year 57 terminal year Fleet 1. \"none_Fleet_2\" indicates survey selectivity blocks used Fleet 2. blocks must non-overlapping sequential time within fleet, block numbers must unique within fleet. srv_sel_model Character vector specifying survey selectivity model fleet. vector must length n_srv_fleets, element must follow structure: \"<selectivity model>_Fleet_<fleet number>\". Available selectivity model types include: \"logist1\": Logistic function parameters a50 k. \"logist2\": Logistic function parameters a50 a95. \"gamma\": Dome-shaped gamma function parameters amax delta. \"exponential\": Exponential function power parameter. \"dbnrml\": Double normal function 6 parameters. example: \"logist1_Fleet_1\" uses logistic (a50, k) model Fleet 1. \"gamma_Fleet_2\" uses gamma dome-shaped model Fleet 2. models applied region year defined overall model array structure (n_regions x n_years x n_srv_fleets), though vector defines functional form fleet. mathematical definitions implementation details selectivity form, refer model equations vignette. Use_srv_q_prior Integer specifying whether use survey q prior (0 dont use) (1 use) srv_q_prior Survey q priors normal space, dimensioned region, block,  survey fleet, 2 (mean, sd 4 dimension array) srv_q_blocks Character vector specifying survey catchability (q) blocks fleet. element must follow structure: \"Block_<block number>_Year_<start>-<end>_Fleet_<fleet number>\" \"none_Fleet_<fleet number>\". allows users define time-varying catchability blocks independently selectivity blocks. blocks must non-overlapping sequential time within fleet. example: \"Block_1_Year_1-35_Fleet_1\" assigns block 1 Fleet 1 years 1–35. \"Block_2_Year_36-56_Fleet_1\" continues block 2 years 36–56. \"Block_3_Year_57-terminal_Fleet_1\" assigns block 3 year 57 terminal year Fleet 1. \"none_Fleet_2\" indicates catchability blocks used Fleet 2. Internally, specifications converted [n_regions, n_years, n_srv_fleets] array, block mapped appropriate years fleets. srvsel_pe_pars_spec Character string specifying process error parameters survey selectivity estimated across regions sexes. relevant cont_tv_srv_sel set \"none\"; otherwise, process error parameters treated fixed. Available options include: \"est_all\": Estimates separate process error parameters region sex. \"est_shared_r\": Shares process error parameters across regions (sex-specific parameters still estimated). \"est_shared_s\": Shares process error parameters across sexes (region-specific parameters still estimated). \"est_shared_r_s\": Shares process error parameters across regions sexes, estimating single set parameters. \"fix\" \"none\": estimate process error parameters; treated fixed. srv_fixed_sel_pars_spec Character string specifying structure estimating fixed-effect parameters survey selectivity model (e.g., a50, k, amax). controls whether selectivity parameters estimated separately shared across regions sexes. Available options include: \"est_all\": Estimates separate fixed-effect selectivity parameters region sex. \"est_shared_r\": Shares parameters across regions (sex-specific parameters still estimated). \"est_shared_s\": Shares parameters across sexes (region-specific parameters still estimated). \"est_shared_r_s\": Shares parameters across regions sexes, estimating single set fixed-effect parameters. srv_q_spec Character string specifying structure survey catchability (q) estimation across regions. controls whether separate shared parameters used. Available options include: \"est_all\": Estimates separate catchability parameters region. \"est_shared_r\": Estimates single catchability parameter shared across regions. srv_sel_devs_spec Character string specifying structure process error deviations time-varying survey selectivity dimensioned number survey fleets. determines deviations estimated across regions sexes. Available options include: \"est_all\": Estimates separate deviation time series region sex. \"est_shared_r\": Shares deviations across regions (sex-specific deviations still estimated). \"est_shared_s\": Shares deviations across sexes (region-specific deviations still estimated). \"est_shared_r_s\": Shares deviations across regions sexes, estimating single deviation time series. argument used continuous time-varying selectivity form specified (e.g., via cont_tv_srv_sel). corr_opt_semipar Character string specifying correlation structures suppress   using semi-parametric time-varying selectivity models. used cont_tv_sel   set one \"3dmarg\", \"3dcond\", \"2dar1\". option allows users turn estimation specific correlation components   time-varying selectivity model. can improve stability enforce assumptions   independence temporal age structure. Available options: \"corr_zero_y\": Sets year (temporal) correlations 0. \"corr_zero_a\": Sets age correlations 0. \"corr_zero_y_a\": Sets year age correlations 0. \"corr_zero_c\": Sets cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_y_c\": Sets year cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_a_c\": Sets age cohort correlations 0. valid cont_tv_sel = \"3dmarg\" \"3dcond\". \"corr_zero_y_a_c\": Sets correlations (year, age, cohort) 0.       valid cont_tv_sel = \"3dmarg\" \"3dcond\"; equivalent iid structure. correlation-suppression flags ignored cont_tv_sel set value. srv_q_formula named list formulas specifying environmental covariate relationships region survey fleet. element named using convention `\"Region_<region>_Fleet_<fleet>\"` contain formula object using covariate names present `srv_q_cov_dat`. formula determines environmental covariates influence survey catchability. `NULL`, environmental covariate effects included. srv_q_cov_dat named list containing time series vectors (typically year) environmental covariates used `srv_q_formula`. entry numeric vector length equal number years, names must match variable names used formulas. `NULL`, survey catchability assumed time-invariant (.e., influenced environmental variables). ... Additional arguments specifying starting values survey selectivity catchability parameters (srvsel_pe_pars, ln_srvsel_devs, ln_srv_fixed_sel_pars, ln_srv_q, srv_q_coeff)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Srvsel_and_Q.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup survey selectivity and catchability specifications — Setup_Mod_Srvsel_and_Q","text":"`srv_q_formula` `srv_q_cov_dat` non-`NULL`, model constructs time-varying design matrices region fleet based provided formulas environmental covariates. coefficient array (`srv_q_coeff`) mapping array (`map_srv_q_coeff`) created estimate track associated regression coefficients. design matrix stored `srv_q_env`, 4D array indexed [region, year, fleet, covariate]. either argument `NULL`, environmental covariate effects excluded survey catchability treated constant time. Important: covariate time series `srv_q_cov_dat` must: numeric vectors length equal number years model. Align years across covariates. Contain missing values; users must impute interpolate missing covariate values prior use. years index used, values can set 0. Covariates defined used formula can filled zeros (e.g., rep(0, n_yrs)). avoids issues list structure affect design matrix model results. Example formulas: \"Region_1_Fleet_1\" = ~ 0 + poly(env1_r1_f1, 3) + env2_r1_f1 uses 3rd-degree         polynomial env1_r1_f1 linear term env2_r1_f1. \"Region_2_Fleet_1\" = ~ 0 + env1_r2_f1 + env2_r2_f1 includes additive effects         two covariates. \"Region_3_Fleet_2\" = ~ NULL disables environmental covariates fleet-region.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Tagging.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup tagging processes and parameters — Setup_Mod_Tagging","title":"Setup tagging processes and parameters — Setup_Mod_Tagging","text":"Setup tagging processes parameters","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Tagging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup tagging processes and parameters — Setup_Mod_Tagging","text":"","code":"Setup_Mod_Tagging(   input_list,   UseTagging = 0,   tag_release_indicator = NULL,   max_tag_liberty = 0,   Tagged_Fish = NA,   Obs_Tag_Recap = NA,   Tag_LikeType = NA,   mixing_period = 1,   t_tagging = 0,   tag_selex = NA,   tag_natmort = NA,   Use_TagRep_Prior = 0,   TagRep_PriorType = NA,   TagRep_mu = NA,   TagRep_sd = NA,   move_age_tag_pool = NA,   move_sex_tag_pool = NA,   Init_Tag_Mort_spec = NULL,   Tag_Shed_spec = NULL,   TagRep_spec = NULL,   Tag_Reporting_blocks = NULL,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Tagging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup tagging processes and parameters — Setup_Mod_Tagging","text":"input_list List containing data list, parameter list, map list UseTagging Numeric (0 1) indicating whether use tagging data (1) (0) tag_release_indicator Matrix [n_tag_cohorts x 2], columns release region release year max_tag_liberty Maximum number years track tagged cohort Tagged_Fish Array [n_tag_cohorts x n_ages x n_sexes] describing tagged fish releases Obs_Tag_Recap Array [max_tag_liberty x n_tag_cohorts x n_regions x n_ages x n_sexes] observed tag recaptures Tag_LikeType Character string specifying tag likelihood type. One : \"Poisson\" \"NegBin\" \"Multinomial_Release\" \"Multinomial_Recapture\" \"Dirichlet-Multinomial_Release\" \"Dirichlet-Multinomial_Recapture\" Example: Tag_LikeType = \"NegBin\" mixing_period Numeric indicating minimum years post-release include fitting t_tagging Fractional year tagging occurs (e.g., 0.5 mid-year) tag_selex Character string specifying tag recovery selectivity. One : \"Uniform_DomFleet\" \"SexAgg_DomFleet\" \"SexSp_DomFleet\" \"Uniform_AllFleet\" \"SexAgg_AllFleet\" \"SexSp_AllFleet\" Example: tag_selex = \"SexSp_AllFleet\" tag_natmort Character string specifying tag natural mortality parameterization. One : \"AgeAgg_SexAgg\" \"AgeSp_SexAgg\" \"AgeAgg_SexSp\" \"AgeSp_SexSp\" Example: tag_natmort = \"AgeSp_SexSp\" Use_TagRep_Prior Numeric (0 1) whether use tag reporting rate prior TagRep_PriorType Numeric indicating prior type tag reporting: 0: Symmetric beta 1: Regular beta TagRep_mu Numeric mean tag reporting prior (normal space); NA symmetric beta used TagRep_sd Numeric standard deviation tag reporting prior (normal space) move_age_tag_pool List character specifying pooling tagging data age groups. Examples: list(c(1:6), c(7:15), c(16:30)) pools ages 1–6, 7–15, 16–30 \"\" pools ages together one group (internally converted list(1:n_ages)) list(1, 2, 3, ..., n_ages) fits age separately move_sex_tag_pool List character specifying pooling tagging data sex groups. Examples: list(1:2) pools sexes together \"\" pools sexes together (internally converted list(1:n_sexes)) list(1, 2) fits sex separately Init_Tag_Mort_spec Character string \"fix\" \"est\" specifying initial tag mortality fixed estimated Tag_Shed_spec Character string \"fix\" \"est\" specifying chronic tag shedding fixed estimated TagRep_spec Character string specifying tag reporting rate estimation scheme: \"est_all\" estimates rates blocks regions independently \"est_shared_r\" estimates rates shared across regions varying block \"fix\" fixes reporting rates (estimation) Tag_Reporting_blocks Character vector specifying blocks years regions tag reporting rates. Format examples: \"Block_1_Year_1-15_Region_1\" \"Block_2_Year_16-terminal_Region_2\" \"none_Region_3\" (means block, constant region) ... Additional starting values tagging parameters ln_Init_Tag_Mort, ln_Tag_Shed, ln_tag_theta, Tag_Reporting_Pars","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up SPoRC model weighting — Setup_Mod_Weighting","title":"Set up SPoRC model weighting — Setup_Mod_Weighting","text":"Set SPoRC model weighting","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up SPoRC model weighting — Setup_Mod_Weighting","text":"","code":"Setup_Mod_Weighting(   input_list,   sablefish_ADMB,   likelihoods,   Wt_Catch = 1,   Wt_FishIdx = 1,   Wt_SrvIdx = 1,   Wt_Rec = 1,   Wt_F = 1,   Wt_Tagging = 1,   Wt_FishAgeComps,   Wt_SrvAgeComps,   Wt_FishLenComps,   Wt_SrvLenComps )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Mod_Weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up SPoRC model weighting — Setup_Mod_Weighting","text":"input_list List containing data, parameter, map lists. sablefish_ADMB Numeric flag mimic calculations sablefish ADMB model: 1 mimic sablefish ADMB calculations 0 otherwise likelihoods Numeric flag indicating likelihood implementation use: 0 ADMB likelihoods 1 TMB likelihoods Wt_Catch Either numeric scalar (lambda) applied overall catch dataset array lambdas (.e., weights can change year fleet) dimensioned n_regions, n_years, n_fish_fleets. Wt_FishIdx Either numeric scalar (lambda) applied overall fishery index dataset  array lambdas (.e., weights can change year fleet) dimensioned n_regions, n_years, n_fish_fleets. Wt_SrvIdx Either numeric scalar (lambda) applied overall survey index dataset array lambdas (.e., weights can change year fleet) dimensioned n_regions, n_years, n_srv_fleets. Wt_Rec Numeric weight (lambda) applied recruitment penalty. Wt_F Numeric weight (lambda) applied fishing mortality penalty. Wt_Tagging Numeric weight (lambda) applied tagging data. Wt_FishAgeComps Numeric weight (lambda) applied fishery age composition data. Wt_SrvAgeComps Numeric weight (lambda) applied survey age composition data. Wt_FishLenComps Numeric weight (lambda) applied fishery length composition data. Wt_SrvLenComps Numeric weight (lambda) applied survey length composition data.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Biologicals.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up simulation stuff for biologicals — Setup_Sim_Biologicals","title":"Set up simulation stuff for biologicals — Setup_Sim_Biologicals","text":"Set simulation stuff biologicals","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Biologicals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up simulation stuff for biologicals — Setup_Sim_Biologicals","text":"","code":"Setup_Sim_Biologicals(   base_M_value,   M_pattern,   base_WAA_values,   base_WAA_fish_values,   WAA_pattern,   base_Maturity_AA_values,   Maturity_AA_pattern,   sim_list )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Biologicals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up simulation stuff for biologicals — Setup_Sim_Biologicals","text":"base_M_value Base natural mortality value dimensioned regions, ages, sexes M_pattern Natural mortality pattern. Options include: constant base_WAA_values Base weight--age values dimensioned regions, ages, sexes base_WAA_fish_values Base weight--age values fishery dimensioned regions, ages, sexes, fishery fleets WAA_pattern Weight--age pattern. Options include: constant base_Maturity_AA_values Base maturity values dimensioned regions, ages, sexes Maturity_AA_pattern Maturity pattern. Options include: constant sim_list Simulation list objects","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Containers.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup containers for simulation and output into global environment — Setup_Sim_Containers","title":"Setup containers for simulation and output into global environment — Setup_Sim_Containers","text":"Setup containers simulation output global environment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Containers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup containers for simulation and output into global environment — Setup_Sim_Containers","text":"","code":"Setup_Sim_Containers(sim_list)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Containers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup containers for simulation and output into global environment — Setup_Sim_Containers","text":"sim_list List object containing simulation components (n_regions, n_ages, n_sexes, n_sims, sim_list$n_fish_fleets, sim_list$n_srv_fleets)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up simulation dimensions — Setup_Sim_Dim","title":"Set up simulation dimensions — Setup_Sim_Dim","text":"Set simulation dimensions","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up simulation dimensions — Setup_Sim_Dim","text":"","code":"Setup_Sim_Dim(   n_sims,   n_yrs,   n_regions,   n_ages,   n_sexes,   n_fish_fleets,   n_srv_fleets,   run_feedback,   feedback_start_yr )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up simulation dimensions — Setup_Sim_Dim","text":"n_sims Number simulations n_yrs Number years n_regions Number regions n_ages Number ages n_sexes Number sexes n_fish_fleets Number fishery fleets n_srv_fleets Number survey fleets run_feedback Boolean whether run run feedback management loop feedback_start_yr MSE run, first year feedback starts","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishMort.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup values and dimensions of fishing mortality — Setup_Sim_FishMort","title":"Setup values and dimensions of fishing mortality — Setup_Sim_FishMort","text":"Setup values dimensions fishing mortality","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishMort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup values and dimensions of fishing mortality — Setup_Sim_FishMort","text":"","code":"Setup_Sim_FishMort(   sim_list,   sigmaC,   init_F_vals,   Fmort_pattern,   Fmort_start,   Fmort_fct,   proc_error,   proc_error_sd )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishMort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup values and dimensions of fishing mortality — Setup_Sim_FishMort","text":"sim_list Simulation list objects sigmaC Observation error catch init_F_vals Initial F values dimensioend region fleet Fmort_pattern Fishing mortality pattern matrix dimensioned region fleet (constant, linear, one-way, two-way) Fmort_start Fishing mortality start values matrix dimensioned region fleet Fmort_fct Fishing mortality values factor increases decreases matrix dimensioned region fleet proc_error want add process error fishing mortality proc_error_sd value logrnomal sd process error fishing mortality","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishSel.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup fishery selectivity — Setup_Sim_FishSel","title":"Setup fishery selectivity — Setup_Sim_FishSel","text":"Setup fishery selectivity","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishSel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup fishery selectivity — Setup_Sim_FishSel","text":"","code":"Setup_Sim_FishSel(sim_list, sel_model, fixed_fish_sel_pars)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_FishSel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup fishery selectivity — Setup_Sim_FishSel","text":"sim_list Simulation list sel_model Fishery selectivity model dimensioned region fleet. Options include: logistic fixed_fish_sel_pars Fixed parameters fishery selectivity, dimensioned region, sex, fishery fleet, max number parameters needed defined fishery selectivity functional form defined functional forms fishery","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Observation_Proc.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up simulation observation processes — Setup_Sim_Observation_Proc","title":"Set up simulation observation processes — Setup_Sim_Observation_Proc","text":"Set simulation observation processes","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Observation_Proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up simulation observation processes — Setup_Sim_Observation_Proc","text":"","code":"Setup_Sim_Observation_Proc(   Comp_Structure,   Comp_Srv_Like,   base_ISS_SrvAge,   Srv_Like_Pars,   Comp_Fish_Like,   base_ISS_FishAge,   ISS_FishAge_Pattern,   Tag_Like,   Tag_Like_Pars,   SrvAgeTheta,   FishAgeTheta,   sim_list )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Observation_Proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up simulation observation processes — Setup_Sim_Observation_Proc","text":"Comp_Structure Composition Structure (spltR_spltS, spltR_jntS) Comp_Srv_Like Survey Composition Likelihoods (Multinomial, Dirichlet-Multinomial, iid-Logistic-Normal) base_ISS_SrvAge Input sample size survey ages Srv_Like_Pars Parameters Survey Composition Likelihoods Comp_Fish_Like Fishery Composition Likelihoods (Multinomial, Dirichlet-Multinomial, iid-Logistic-Normal) base_ISS_FishAge Base Input sample size fishery ages ISS_FishAge_Pattern Input sample size pattern fishery ages. Either \"constant\" follows f pattern (\"F_pattern\") Tag_Like Tag Likelihoods (Poisson, NegBin, Multinomial_Release, Multinomial_Recapture) Tag_Like_Pars Tag Likelihood Parameters SrvAgeTheta Survey Age Composition Overdispersion Parameter FishAgeTheta Fishery Age Composition Overdispersion Parameter sim_list Simulation list","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up recruitment dynamics for simulation — Setup_Sim_Rec","title":"Set up recruitment dynamics for simulation — Setup_Sim_Rec","text":"Set recruitment dynamics simulation","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up recruitment dynamics for simulation — Setup_Sim_Rec","text":"","code":"Setup_Sim_Rec(   do_recruits_move,   base_rec_sexratio,   rec_sexratio_vary,   base_r0,   r0_vary,   base_h,   init_sigmaR,   sigmaR,   recruitment_opt,   rec_dd,   init_dd,   sim_list,   rec_lag )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up recruitment dynamics for simulation — Setup_Sim_Rec","text":"do_recruits_move whether recruits move. Character string either specified 'dont_move', 'move' base_rec_sexratio base recruitment sex-ratio value rec_sexratio_vary whether recruitment sex-ratio varies. Options include: constant base_r0 base R0 mean recruitment value r0_vary whether r0 mean recruitment varies. Options include: constant base_h base steepness value init_sigmaR Sigma R initial devs sigmaR Sigma R everything else recruitment_opt character string either \"mean_rec\" \"bh_rec\" rec_dd recruitment density dependence; character string either \"global\" \"local\" init_dd initial age density dependence; character string either \"global\" \"local\" sim_list Simulation list rec_lag Numeric, recruitment lag value","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup values for survey parameterization — Setup_Sim_Survey","title":"Setup values for survey parameterization — Setup_Sim_Survey","text":"Setup values survey parameterization","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup values for survey parameterization — Setup_Sim_Survey","text":"","code":"Setup_Sim_Survey(   sigmaSrvIdx,   base_srv_q,   srv_q_pattern,   sel_model,   fixed_srv_sel_pars,   sim_list )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup values for survey parameterization — Setup_Sim_Survey","text":"sigmaSrvIdx Survey index observation error, dimensioned region fleet base_srv_q Base survey catchability value, dimensioned region fleet srv_q_pattern Survey catchability pattern, dimensioned region fleet. Options include: constant sel_model Survey selectivity model dimensioned region fleet. Options include: logistic fixed_srv_sel_pars Fixed parameters survey selectivity, dimensioned region, sex, survey fleet, max number parameters needed defined survey selectivity functional form defined functional forms survey. sim_list Simulation list object","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Tagging.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up simulated tagging dynamics — Setup_Sim_Tagging","title":"Set up simulated tagging dynamics — Setup_Sim_Tagging","text":"Set simulated tagging dynamics","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Tagging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up simulated tagging dynamics — Setup_Sim_Tagging","text":"","code":"Setup_Sim_Tagging(   n_tags,   max_liberty,   tag_years,   t_tagging,   base_Tag_Reporting,   Tag_Reporting_pattern,   Tag_Ind_Mort,   Tag_Shed,   sim_list )"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_Sim_Tagging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up simulated tagging dynamics — Setup_Sim_Tagging","text":"n_tags Number tags release given year max_liberty Maximum liberty track cohorts tag_years Years release tags t_tagging Time tagging (e.g., start year == 0, mid year == 0.5) base_Tag_Reporting Base tag reporting rate region Tag_Reporting_pattern Tag reporting pattern. Options include: constant Tag_Ind_Mort Initial tag induced mortality Tag_Shed Chronic tag shedding rate sim_list Simulation list","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_sim_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","title":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","text":"Constructs simulation objects new simulation environment use simulation functions","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_sim_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","text":"","code":"Setup_sim_env(sim_list)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_sim_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","text":"sim_list Simulation list objects","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_sim_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","text":"new simulation environment objects sim_list","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Setup_sim_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructs simulation objects in a new simulation environment for use in simulation functions — Setup_sim_env","text":"","code":"if (FALSE) { # \\dontrun{ sim_env <- Setup_sim_env(sim_list) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/Simulate_Pop_Static.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","title":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","text":"Simulates static spatial, sex, age-structured population (feedback loop)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Simulate_Pop_Static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","text":"","code":"Simulate_Pop_Static(sim_list, output_path)"},{"path":"https://chengmatt.github.io/SPoRC/reference/Simulate_Pop_Static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","text":"sim_list Simulation list objects output_path path output simulation objects","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Simulate_Pop_Static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","text":"list object bunch simulated values outputs","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/Simulate_Pop_Static.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates a static spatial, sex, and age-structured population (no feedback loop) — Simulate_Pop_Static","text":"","code":"if (FALSE) { # \\dontrun{   # Set up model dimensions  sim_list <- Setup_Sim_Dim(n_sims = 100,                            n_yrs = 10,                            n_regions = 2,                            n_ages = 8,                            n_sexes = 1,                            n_fish_fleets = 1,                            n_srv_fleets = 1  )   # set up containers  sim_list <- Setup_Sim_Containers(sim_list)   # Setup fishing mortality  sim_list <- Setup_Sim_FishMort(sim_list = sim_list,                                 sigmaC = 1e-3,                                 init_F = matrix(0, nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets),                                 Fmort_pattern = matrix(c('two-way', \"two-way\"), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets),                                 Fmort_start = matrix(c(0.01, 0.01), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets),                                 Fmort_fct = matrix(c(15, 15), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets),                                 proc_error = TRUE,                                 proc_error_sd = 0.1)   # Setup fishery selectivity  sim_list <- Setup_Sim_FishSel(sel_model = matrix(c('logistic', \"logistic\"), nrow = sim_list$n_regions, ncol = sim_list$n_fish_fleets),                                # a50, k for logistic shared across regions                                fixed_fish_sel_pars = array(c(3,3,1,1), dim = c(sim_list$n_regions, sim_list$n_sexes, sim_list$n_fish_fleets, 2)),                                sim_list = sim_list  )   # Setup survey catchability and selectivity  sim_list <- Setup_Sim_Survey(    sim_list = sim_list,    sigmaSrvIdx = array(0.2, dim = c(sim_list$n_regions, sim_list$n_srv_fleets)), # survey observation error    base_srv_q = array(1, dim = c(sim_list$n_regions, sim_list$n_srv_fleets)), # base survey catchability value    srv_q_pattern = matrix(c('constant', \"constant\"), nrow = sim_list$n_regions, ncol = sim_list$n_srv_fleets), # catchability pattern    sel_model = matrix(c('logistic', \"logistic\"), nrow = sim_list$n_regions, ncol = sim_list$n_srv_fleets), # selectivity model    # a50, k, for logistic shared across regions    fixed_srv_sel_pars = array(c(3,3,1,1), dim = c(sim_list$n_regions, sim_list$n_sexes, sim_list$n_srv_fleets, 2))  )   # Setup recruitment stuff  sim_list <- Setup_Sim_Rec(    sim_list = sim_list,    do_recruits_move = \"dont_move\", # == 0, recruits don't move , == 1 recruits move    base_rec_sexratio = 1, # single sex    rec_sexratio_vary = \"constant\",    base_r0 = c(50, 50),    r0_vary = \"constant\",    base_h = c(0.8, 0.8),    init_sigmaR = 0.5,    sigmaR = 0.5,    recruitment_opt = \"bh_rec\",    rec_dd = \"global\",    init_dd = \"global\",    rec_lag = 1  )   # Setup biologicals  sim_list <- Setup_Sim_Biologicals(    sim_list = sim_list,    base_M_value = array(0.5, dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sims)),    M_pattern = \"constant\",    base_WAA_values = array(rep(5 * (1 - exp(-0.1 * 1:sim_list$n_ages)), each = sim_list$n_regions * sim_list$n_sexes),                            dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes)),    base_WAA_fish_values = array(rep(5 * (1 - exp(-0.1 * 1:sim_list$n_ages)), each = sim_list$n_regions * sim_list$n_sexes),                                 dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes, sim_list$n_fish_fleets)),    WAA_pattern = \"constant\",    base_Maturity_AA_values = array(rep(1 / (1 + exp(-0.3 * 1:sim_list$n_ages)), each = sim_list$n_regions * sim_list$n_sexes),                                    dim = c(sim_list$n_regions, sim_list$n_ages, sim_list$n_sexes)),    Maturity_AA_pattern = \"constant\"  )   # Setup tagging stuff  sim_list <- Setup_Sim_Tagging(    sim_list = sim_list,    n_tags = 5000,    max_liberty = 30,    tag_years = seq(1, sim_list$n_yrs, 3),    t_tagging = 0.5,    base_Tag_Reporting = c(0.2, 0.2),    Tag_Reporting_pattern = \"constant\",    Tag_Ind_Mort = 0,    Tag_Shed = 0  )   # Setup observation processes  sim_list <- Setup_Sim_Observation_Proc(    sim_list = sim_list,    Comp_Structure = \"spltR_jntS\",    Comp_Srv_Like = \"Multinomial\",    Comp_Fish_Like = \"Multinomial\",    ISS_FishAge_Pattern = 'F_pattern',    FishAgeTheta = 3,    SrvAgeTheta = 2,    Srv_Like_Pars = NA,    base_ISS_FishAge = 200,    base_ISS_SrvAge = 200,    Tag_Like = \"Poisson\",    Tag_Like_Pars = NA  )   # IID Movement Matrix across years and ages  ref <- 1  movement_matrix <- array(0, dim = c(sim_list$n_regions, sim_list$n_regions, sim_list$n_yrs, sim_list$n_ages, sim_list$n_sexes, sim_list$n_sims)) # From, To  base <- matrix(0, sim_list$n_regions, sim_list$n_regions)   # Plug in movement process error  for(sim in 1:sim_list$n_sims) {    for(a in 1:sim_list$n_ages) {      for(s in 1:sim_list$n_sexes) {        for(y in 1:sim_list$n_yrs) {          for(r in 1:sim_list$n_regions) {            if(a > 1) pe_err <- rnorm(length(tmp_move[-ref]), 0, 0.4) # logit proces error            else pe_err <- 0            tmp_move <- base[r,]            tmp_move[-ref] <- tmp_move[-ref] + pe_err            movement_matrix[r,,y,a,s,sim] <- exp(tmp_move) / sum(exp(tmp_move))          }        } # end y loop      } # end s loop    } # end a loop  } # end sim loop   sim_list$movement_matrix <- movement_matrix   # Run Simulation ----------------------------------------------------------  Simulate_Pop_Static(sim_list = sim_list, output_path = here(\"sim_out.RDS\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/bisection_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Go from TAC to Fishing Mortality using bisection — bisection_F","title":"Go from TAC to Fishing Mortality using bisection — bisection_F","text":"Go TAC Fishing Mortality using bisection","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/bisection_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Go from TAC to Fishing Mortality using bisection — bisection_F","text":"","code":"bisection_F(   f_guess,   catch,   NAA,   WAA,   natmort,   fish_sel,   n.iter = 20,   lb = 0,   ub = 2 )"},{"path":"https://chengmatt.github.io/SPoRC/reference/bisection_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Go from TAC to Fishing Mortality using bisection — bisection_F","text":"f_guess Initial guess F catch Provided catch values NAA Numbers, dimensioned ages, sexes WAA Weight, dimensioned ages sexes natmort Natural mortality dimensioned ages sex fish_sel Fishery selectivity, dimesnioned ages sex n.iter Number iterations bisection lb Lower bound F ub Upper bound F","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/bisection_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Go from TAC to Fishing Mortality using bisection — bisection_F","text":"Fishing mortality values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/check_data_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function used to check data dimensions to ensure they are correct — check_data_dimensions","title":"Helper function used to check data dimensions to ensure they are correct — check_data_dimensions","text":"Helper function used check data dimensions ensure correct","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/check_data_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function used to check data dimensions to ensure they are correct — check_data_dimensions","text":"","code":"check_data_dimensions(   x,   n_regions = NULL,   n_years = NULL,   n_ages = NULL,   n_lens = NULL,   n_sexes = NULL,   n_fish_fleets = NULL,   n_srv_fleets = NULL,   what )"},{"path":"https://chengmatt.github.io/SPoRC/reference/check_data_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function used to check data dimensions to ensure they are correct — check_data_dimensions","text":"x Object evaluate n_regions Number regions n_years Number years n_ages Number ages n_lens Number lengths n_sexes Number sexes n_fish_fleets Number fishery fleets n_srv_fleets Number survey fleets charcter specifying evaluated","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/cmb.html","id":null,"dir":"Reference","previous_headings":"","what":"For combining a parameter and data list in RTMB so a data object can be explicitly defined — cmb","title":"For combining a parameter and data list in RTMB so a data object can be explicitly defined — cmb","text":"combining parameter data list RTMB data object can explicitly defined","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/cmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For combining a parameter and data list in RTMB so a data object can be explicitly defined — cmb","text":"","code":"cmb(f, d)"},{"path":"https://chengmatt.github.io/SPoRC/reference/cmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For combining a parameter and data list in RTMB so a data object can be explicitly defined — cmb","text":"f Parameter list d Data list","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/cmb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For combining a parameter and data list in RTMB so a data object can be explicitly defined — cmb","text":"","code":"if (FALSE) { # \\dontrun{   obj <- RTMB::MakeADFun(cmb(sabie_RTMB, data), parameters = parameters, map = mapping, random = random, silent = TRUE) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/collect_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to collect messages — collect_message","title":"Helper function to collect messages — collect_message","text":"Helper function collect messages","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/collect_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to collect messages — collect_message","text":"","code":"collect_message(...)"},{"path":"https://chengmatt.github.io/SPoRC/reference/collect_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to collect messages — collect_message","text":"... character vector messages","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dbeta_symmetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric Beta Function — dbeta_symmetric","title":"Symmetric Beta Function — dbeta_symmetric","text":"Symmetric Beta Function","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dbeta_symmetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric Beta Function — dbeta_symmetric","text":"","code":"dbeta_symmetric(p_val, p_ub, p_lb, p_prsd, log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/dbeta_symmetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric Beta Function — dbeta_symmetric","text":"p_val Parameter value p_ub Upper Bound Parameter p_lb Lower Bound Parameter p_prsd SD parameter, higher values stronger penalty bounds, lower values difuse penalty bounds log whether return log likelihood","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dbeta_symmetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetric Beta Function — dbeta_symmetric","text":"Returns likelihood values symmetric beta","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet Likelihood — ddirichlet","title":"Dirichlet Likelihood — ddirichlet","text":"Dirichlet Likelihood","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet Likelihood — ddirichlet","text":"","code":"ddirichlet(x, alpha, log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet Likelihood — ddirichlet","text":"x vector values alpha Expected values w/ concentration sum(alpha) log Whether give log ","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet Likelihood — ddirichlet","text":"Returns likelihood values form dirichlet","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirmult.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet Mutlinomial Likelihood From https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp — ddirmult","title":"Dirichlet Mutlinomial Likelihood From https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp — ddirmult","text":"Dirichlet Mutlinomial Likelihood https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirmult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet Mutlinomial Likelihood From https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp — ddirmult","text":"","code":"ddirmult(obs, pred, Ntotal, ln_theta, give_log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirmult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet Mutlinomial Likelihood From https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp — ddirmult","text":"obs Vector observed values proportions pred Vector predicted values proportions Ntotal Input sample size scalar ln_theta Weighting parameter log space give_log Whether likelihood log space","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/ddirmult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet Mutlinomial Likelihood From https://github.com/James-Thorson/CCSRA/blob/main/inst/executables/CCSRA_v9.cpp — ddirmult","text":"returns likelihood values dirihclet multinomial","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dlogistnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Normal Likelihood — dlogistnormal","title":"Logistic Normal Likelihood — dlogistnormal","text":"Logistic Normal Likelihood","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dlogistnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Normal Likelihood — dlogistnormal","text":"","code":"dlogistnormal(obs, pred, Sigma, give_log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/dlogistnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Normal Likelihood — dlogistnormal","text":"obs Vector observed values numbers (can integers non-integers - vector length n_bins) pred Vector predicted values proportions (vector length n_bins) Sigma Covariance matrix give_log whether use log space likelihood","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dlogistnormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic Normal Likelihood — dlogistnormal","text":"Returns likelihood values logistic normal","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dnbinom_robust_noint.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative binomial that can take non-integer values — dnbinom_robust_noint","title":"Negative binomial that can take non-integer values — dnbinom_robust_noint","text":"Negative binomial can take non-integer values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dnbinom_robust_noint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative binomial that can take non-integer values — dnbinom_robust_noint","text":"","code":"dnbinom_robust_noint(x, log_mu, log_var_minus_mu, give_log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/dnbinom_robust_noint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative binomial that can take non-integer values — dnbinom_robust_noint","text":"x observations log_mu log mu log_var_minus_mu log var minus mu - reparameterize negbin give_log whether give log","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dnbinom_robust_noint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative binomial that can take non-integer values — dnbinom_robust_noint","text":"Returns likelihood values robust negative binomial","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_francis_reweighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Francis Reweighting — do_francis_reweighting","title":"Run Francis Reweighting — do_francis_reweighting","text":"Run Francis Reweighting","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_francis_reweighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Francis Reweighting — do_francis_reweighting","text":"","code":"do_francis_reweighting(data, rep, age_labels, len_labels, year_labels)"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_francis_reweighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Francis Reweighting — do_francis_reweighting","text":"data List data inputs rep Report file list age_labels Age labels len_labels Length labels year_labels Year labels","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_francis_reweighting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Francis Reweighting — do_francis_reweighting","text":"list object francis weights (note NAs , using jnt composition approaches - .e., uses one dimension)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_francis_reweighting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Francis Reweighting — do_francis_reweighting","text":"","code":"if (FALSE) { # \\dontrun{ for(j in 1:5) {    if(j == 1) { # reset weights at 1     data$Wt_FishAgeComps[] <- 1     data$Wt_FishLenComps[] <- 1     data$Wt_SrvAgeComps[] <- 1     data$Wt_SrvLenComps[] <- 1   } else {     data$Wt_FishAgeComps[] <- wts$new_fish_age_wts     data$Wt_FishLenComps[] <- wts$new_fish_len_wts     data$Wt_SrvAgeComps[] <- wts$new_srv_age_wts     data$Wt_SrvLenComps[] <- wts$new_srv_len_wts   }    sabie_rtmb_model <- fit_model(data,                                 parameters,                                 mapping,                                 random = NULL,                                 newton_loops = 3,                                 silent = TRUE   )    rep <- sabie_rtmb_model$report(sabie_rtmb_model$env$last.par.best) # Get report   wts <- do_francis_reweighting(data = data, rep = rep, age_labels = 2:31,                                 len_labels = seq(41, 99, 2), year_labels = 1960:2021) } } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Jitter Analysis — do_jitter","title":"Run Jitter Analysis — do_jitter","text":"Run Jitter Analysis","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_jitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Jitter Analysis — do_jitter","text":"","code":"do_jitter(   data,   parameters,   mapping,   random = NULL,   sd,   n_jitter,   n_newton_loops,   do_par,   n_cores )"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_jitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Jitter Analysis — do_jitter","text":"data Data list make obj parameters Parameter list make obj mapping Mapping list make obj random Character random effects sd sd jitter (additive) n_jitter Number jitters n_newton_loops Number newton loops do_par Whether paralleizaiton (boolean) n_cores Number cores use","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_jitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Jitter Analysis — do_jitter","text":"Dataframe jitter values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_jitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Jitter Analysis — do_jitter","text":"","code":"if (FALSE) { # \\dontrun{    library(ggplot2)    # get jitter values    jit <- do_jitter(data = data,                  parameters = parameters,                  mapping = mapping,                  random = NULL,                  sd = 0.1,                  n_jitter = 100,                  n_newton_loops = 3,                  do_par = TRUE,                  n_cores = 8)     # get proportion converged    prop_converged <- jit %>%    filter(Year == 1, Type == 'Recruitment') %>%      summarize(prop_conv = sum(Hessian) / length(Hessian))     # get final model results    final_mod <- reshape2::melt(sabie_rtmb_model$rep$SSB) %>% rename(Region = Var1, Year = Var2) %>%    mutate(Type = 'SSB') %>%      bind_rows(reshape2::melt(sabie_rtmb_model$rep$Rec) %>%      rename(Region = Var1, Year = Var2) %>% mutate(Type = 'Recruitment'))     # comparison of SSB and recruitment   ggplot() +     geom_line(jit, mapping = aes(x = Year + 1959, y = value, group = jitter, color = Hessian), lwd = 1) +     geom_line(final_mod, mapping = aes(x = Year + 1959, y = value), color = \"black\", lwd = 1.3 , lty = 2) +     facet_grid(Type~Region, scales = 'free',                labeller = labeller(Region = function(x) paste0(\"Region \", x),                                    Type = c(\"Recruitment\" = \"Age 2 Recruitment (millions)\", \"SSB\" = 'SSB (kt)'))) +     labs(x = \"Year\", y = \"Value\") +     theme_bw(base_size = 20) +     scale_color_manual(values = c(\"red\", 'grey')) +     geom_text(data = jit %>% filter(Type == 'SSB', Year == 1, jitter == 1),               aes(x = Inf, y = Inf, label = paste(\"Proportion Converged: \", round(prop_converged$prop_conv, 3))),               hjust = 1.1, vjust = 1.9, size = 6, color = \"black\")     # compare jitter of max gradient and hessian PD    ggplot(jit, aes(x = jitter, y = jnLL, color = Max_Gradient, shape = Hessian)) +      geom_point(size = 5, alpha = 0.3) +      geom_hline(yintercept = min(sabie_rtmb_model$rep$jnLL), lty = 2, size = 2, color = \"blue\") +      facet_wrap(~Hessian, labeller = labeller(        Hessian = c(\"FALSE\" = \"non-PD Hessian\", \"TRUE\" = 'PD Hessian')      )) +      scale_color_viridis_c() +      theme_bw(base_size = 20) +      theme(legend.position = \"bottom\") +      guides(color = guide_colorbar(barwidth = 15, barheight = 0.5)) +      labs(x = 'Jitter') +      geom_text(data = jit %>% filter(Hessian == TRUE, Year == 1, jitter == 1),                aes(x = Inf, y = Inf, label = paste(\"Proportion Converged: \", round(prop_converged$prop_conv, 3))),                hjust = 1.1, vjust = 1.9, size = 6, color = \"black\") } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_likelihood_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Likelihood Profile — do_likelihood_profile","title":"Run Likelihood Profile — do_likelihood_profile","text":"Run Likelihood Profile","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_likelihood_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Likelihood Profile — do_likelihood_profile","text":"","code":"do_likelihood_profile(   data,   parameters,   mapping,   random = NULL,   what,   idx = NULL,   min_val,   max_val,   inc = 0.05 )"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_likelihood_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Likelihood Profile — do_likelihood_profile","text":"data data list model parameters parameter list model mapping mapping list model random character vector random effects estimate parameter name want profile idx Index parameter array, pointing value want map (index relative flattened array) min_val minimum value profile max_val maximum value profile inc increment value min max value","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_likelihood_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Likelihood Profile — do_likelihood_profile","text":"Returns list likelihood profiled values data component respective dimensions (e.g., likelihood profiles fleet, region, year, etc.) well likelihood profiles data component, aggregated across respective dimensions.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC using rtmbstan — do_mcmc","title":"Run MCMC using rtmbstan — do_mcmc","text":"Run MCMC using rtmbstan","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC using rtmbstan — do_mcmc","text":"","code":"do_mcmc(obj, chains, cores, iter, thin, bounds = Inf, laplace = FALSE, ...)"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC using rtmbstan — do_mcmc","text":"obj Object built ADFUN via RTMB chains Number chains run cores Number cores use iter Number MCMC iterations run thin Thinning rate bounds Uniform bounds constrain parameter bounds laplace Whether laplace approximation random effects MCMC fixed effects ... Additional arguments tmbstan (e.g., adapt_delta)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC using rtmbstan — do_mcmc","text":"MCMC list object rtmbstan","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_mcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run MCMC using rtmbstan — do_mcmc","text":"","code":"if (FALSE) { # \\dontrun{ obj <- RTMB::MakeADFun(cmb(SPoRC_rtmb, data), parameters = parameters, map = mapping) mcmc <- do_mcmc(obj = obj,                 chains = 4,                 cores = 4,                 iter = 10000,                 thin = 10,                 bounds = 1.5,                 laplace = FALSE,                 adapt_delta = 0.99) saveRDS(mcmc, here('output', 'MCMC_Model_23.5.rds')) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_retrospective.html","id":null,"dir":"Reference","previous_headings":"","what":"Run retrospective analyses — do_retrospective","title":"Run retrospective analyses — do_retrospective","text":"Run retrospective analyses","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_retrospective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run retrospective analyses — do_retrospective","text":"","code":"do_retrospective(   n_retro,   data,   parameters,   mapping,   random = NULL,   do_par,   n_cores,   do_francis,   n_francis_iter = NULL )"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_retrospective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run retrospective analyses — do_retrospective","text":"n_retro Number retrospective peels data Data list RTMB model parameters Parameter list RTMB model mapping Mapping list RTMB model random Random effects character vector - default NULL do_par Whether parrallelization, boolean n_cores Number cores use parrallelization do_francis Whether francis reweighitng within given retrospective peel, boolean n_francis_iter Number francis iterations ","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_retrospective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run retrospective analyses — do_retrospective","text":"Dataframe retrospective estiamtes SSB recruitment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_retrospective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run retrospective analyses — do_retrospective","text":"","code":"if (FALSE) { # \\dontrun{  # Do retrospective here  ret <- do_retrospective(n_retro = 7, data, parameters, mapping, random = NULL, do_par = TRUE, n_cores = 7, do_francis = TRUE, n_francis_iter = 5)  ggplot(ret, aes(x = Year + 1959, y = value, group = peel, color = 2024 - peel)) +    geom_line(lwd = 1.3) +    facet_wrap(~Type) +    guides (color = guide_colourbar(barwidth = 10, barheight = 1.3)) +    labs(x = 'Year', y = 'Value', color = 'Retrospective Year') +    scale_color_viridis_c() +    theme_bw(base_size = 15) +    theme(legend.position = 'top')   ret %>%    dplyr::mutate(Year = Year + 1959, terminal = 2024 - peel, cohort = Year - 2, years_est = terminal-Year) %>%    filter(Type == 'Recruitment', cohort %in% c(2014:2022), terminal != Year) %>%    ggplot(aes(x = years_est - 1, y = value, group = Year, color = factor(cohort))) +    geom_line(lwd = 1.3) +    geom_point(size = 4) +    theme_bw(base_size = 15) +    labs(x = 'Years since cohort was last estimated', y = 'Recruitment (millions)', color = 'Cohort') } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_runs_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs test function taken from SS3 diags. — do_runs_test","title":"Runs test function taken from SS3 diags. — do_runs_test","text":"Runs test function taken SS3 diags.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_runs_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs test function taken from SS3 diags. — do_runs_test","text":"","code":"do_runs_test(x, type = NULL, mixing = \"two.sided\")"},{"path":"https://chengmatt.github.io/SPoRC/reference/do_runs_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs test function taken from SS3 diags. — do_runs_test","text":"x Vector residuals type Whether use mean 0 assumption mean residuals (default = use mean 0) mixing Type test , less = left tailed test detects positive autocorrelation, two.sided = two sided test tests whether positive /negative autocorrealtion. null , rejecting null (<0.05) indictes non-randomness.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_runs_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs test function taken from SS3 diags. — do_runs_test","text":"List object p value limits three-sigma limit - (potential data outlier, residual > 3 standard deviations away mean 0)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/do_runs_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs test function taken from SS3 diags. — do_runs_test","text":"","code":"if (FALSE) { # \\dontrun{  idx_fits <- get_idx_fits(data = data, rep = rep, year_labs = seq(1960, 2024, 1))   idx_fits <- idx_fits %>%     mutate(       Idx = case_when(         Type == \"Fishery\" & Year < 1995 ~ \"Japanese Fishery CPUE Index\",         Type == \"Fishery\" & Year >= 1995 ~ \"Domestic Fishery CPUE Index\",         Type == 'Survey' & Fleet == 1 ~ \"Domestic LL Survey Relative Population Numbers\",         Type == 'Survey' & Fleet == 2 ~ \"GOA Trawl Survey Biomass (kt)\",         Type == 'Survey' & Fleet == 3 ~ 'Japanese LL Survey Relative Population Numbers'       )     )    unique_idx <- unique(idx_fits$Idx)   runs_all <- data.frame()   for(i in 1:length(unique(idx_fits$Idx))) {     tmp <- idx_fits %>% filter(Idx == unique_idx[i])     runstest <- do_runs_test(x=as.numeric(tmp$resid),type=\"resid\", mixing = \"less\")     tmp_runs <- data.frame(p = runstest$p.runs, lwr = runstest$sig3lim[1], upr = runstest$sig3lim[2], Idx = unique_idx[i])     runs_all <- rbind(runs_all, tmp_runs)   } # end i    ggplot() +     geom_point(idx_fits, mapping = aes(x = Year, y = resid)) +     geom_segment(idx_fits, mapping = aes(x = Year, xend = Year, y = 0, yend = resid)) +     geom_smooth(idx_fits, mapping = aes(x = Year, y = resid), se = F) +     geom_hline(yintercept = 0, lty = 2) +     geom_hline(runs_all, mapping = aes(yintercept = upr), lty = 2) +     geom_hline(runs_all, mapping = aes(yintercept = lwr), lty = 2) +     geom_text(data = runs_all, aes(x = -Inf, y = Inf, label = paste(\"p = \", round(p, 3))), hjust = -0.5, vjust = 8.2, size = 7)+     labs(x = \"Year\", y = 'Residuals') +     theme_bw(base_size = 20) +     facet_wrap(~Idx, scales = 'free', ncol = 2) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/dpois_noint.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson that can take non-integer values — dpois_noint","title":"Poisson that can take non-integer values — dpois_noint","text":"Poisson can take non-integer values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dpois_noint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson that can take non-integer values — dpois_noint","text":"","code":"dpois_noint(x, pred, give_log = TRUE)"},{"path":"https://chengmatt.github.io/SPoRC/reference/dpois_noint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson that can take non-integer values — dpois_noint","text":"x observations pred predicted give_log giving log likelihood","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/dpois_noint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson that can take non-integer values — dpois_noint","text":"Returns likelihood values poisson","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run RTMB model — fit_model","title":"Run RTMB model — fit_model","text":"Run RTMB model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run RTMB model — fit_model","text":"","code":"fit_model(   data,   parameters,   mapping,   random = NULL,   newton_loops = 3,   silent = FALSE,   ... )"},{"path":"https://chengmatt.github.io/SPoRC/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run RTMB model — fit_model","text":"data Data list parameters Parameter list mapping Mapping list random Character random effects integrate newton_loops Number newton loops run get gradients silent Boolean whether model run silent ... additional arguments taken MakeADFUN","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run RTMB model — fit_model","text":"Returns list object optimized, results outputted RTMB model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run RTMB model — fit_model","text":"","code":"if (FALSE) { # \\dontrun{ model <- fit_model(data,                  parameters,                  mapping,                  random = NULL,                  newton_loops = 3) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_AR1_CorrMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","title":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","text":"Function fill n x n correlation AR(1) matrix","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_AR1_CorrMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","text":"","code":"get_AR1_CorrMat(n, rho)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_AR1_CorrMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","text":"n Number bins rho correaltion parameter","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_AR1_CorrMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","text":"correlation matrix ar1 process","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_AR1_CorrMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to fill in an n x n correlation AR(1) matrix — get_AR1_CorrMat","text":"","code":"if (FALSE) { # \\dontrun{ mat <- get_AR1_CorrMat(10, 0.5) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_Constant_CorrMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant correlation matrix — get_Constant_CorrMat","title":"Constant correlation matrix — get_Constant_CorrMat","text":"Constant correlation matrix","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_Constant_CorrMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant correlation matrix — get_Constant_CorrMat","text":"","code":"get_Constant_CorrMat(n, rho)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_Constant_CorrMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constant correlation matrix — get_Constant_CorrMat","text":"n Number bins rho correaltion parameter","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_Constant_CorrMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constant correlation matrix — get_Constant_CorrMat","text":"constant correlation matrix","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_Constant_CorrMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constant correlation matrix — get_Constant_CorrMat","text":"","code":"if (FALSE) { # \\dontrun{ mat <- get_Constant_CorrMat(10, 0.5) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_beta_scaled_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Get scaled alpha beta parameters for a scaled beta distribution (for steepness) from https://stackoverflow.com/questions/75165770/beta-distribution-with-bounds-at-0-1-0-5 — get_beta_scaled_pars","title":"Get scaled alpha beta parameters for a scaled beta distribution (for steepness) from https://stackoverflow.com/questions/75165770/beta-distribution-with-bounds-at-0-1-0-5 — get_beta_scaled_pars","text":"Get scaled alpha beta parameters scaled beta distribution (steepness) https://stackoverflow.com/questions/75165770/beta-distribution--bounds--0-1-0-5","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_beta_scaled_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get scaled alpha beta parameters for a scaled beta distribution (for steepness) from https://stackoverflow.com/questions/75165770/beta-distribution-with-bounds-at-0-1-0-5 — get_beta_scaled_pars","text":"","code":"get_beta_scaled_pars(low, high, mu, sigma)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_beta_scaled_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get scaled alpha beta parameters for a scaled beta distribution (for steepness) from https://stackoverflow.com/questions/75165770/beta-distribution-with-bounds-at-0-1-0-5 — get_beta_scaled_pars","text":"low lower bound high upper bound mu mean normal space sigma sigma normal space","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_beta_scaled_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get scaled alpha beta parameters for a scaled beta distribution (for steepness) from https://stackoverflow.com/questions/75165770/beta-distribution-with-bounds-at-0-1-0-5 — get_beta_scaled_pars","text":"Returns beta distribution parmeters bounds","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_biological_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Plots of Biological Quantities — get_biological_plot","title":"Get Plots of Biological Quantities — get_biological_plot","text":"Get Plots Biological Quantities","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_biological_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Plots of Biological Quantities — get_biological_plot","text":"","code":"get_biological_plot(data, rep, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_biological_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Plots of Biological Quantities — get_biological_plot","text":"data List n_models `SPoRC` data lists rep List n_models `SPoRC` report lists model_names Vector model names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_biological_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Plots of Biological Quantities — get_biological_plot","text":"list plots terminal year movement, natural mortality, weight--age, maturity age across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_biological_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Plots of Biological Quantities — get_biological_plot","text":"","code":"if (FALSE) { # \\dontrun{ get_biological_plot(list(data1, data2), list(rep1, rep2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_comp_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","title":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","text":"Gets composition data proportions normalized according assessment specifications RTMB","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_comp_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","text":"","code":"get_comp_prop(data, rep, age_labels, len_labels, year_labels)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_comp_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","text":"data list data inputs rep report file RTMB age_labels vector observed age labels assessment len_labels vector length labels assessment year_labels vector years","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_comp_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","text":"List fishery age, lengths, survey age, lengths dataframe well matrix form (dimensioned region, year, bin, sex, fleet)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_comp_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets composition data proportions normalized according to the assessment specifications from RTMB — get_comp_prop","text":"","code":"if (FALSE) { # \\dontrun{ comp_props <- get_comp_prop(data = data, rep = rep, age_labels = 2:31, len_labels = seq(41, 99, 2), year_labels = 1960:2024) comp_props$Fishery_Ages %>%   filter(Fleet == 1, Sex == 1) %>%   ggplot() +   geom_col(aes(x = Age, y = obs)) +   geom_line(aes(x = Age, y = pred)) +   facet_wrap(~Year, ncol = 3)    comp_props$Survey_Ages %>%     group_by(Region, Age, Sex, Fleet) %>%     summarize(lwr_obs = quantile(obs, 0.1),               upr_obs = quantile(obs, 0.9),               lwr_pred = quantile(pred, 0.1),               upr_pred = quantile(pred, 0.9),               obs = mean(obs),               pred = mean(pred)) %>%     ggplot() +     geom_line(mapping = aes(x = Age, y = obs, color = 'Obs', lty = 'Obs'), lwd = 1.3) +     geom_ribbon(mapping = aes(x = Age, y = obs, ymin = lwr_obs, ymax = upr_obs, fill = 'Obs'), alpha = 0.3) +     geom_line(mapping = aes(x = Age, y = pred, color = 'Pred', lty = 'Pred'), lwd = 1.3) +     geom_ribbon(mapping = aes(x = Age, y = pred, ymin = lwr_pred, ymax = upr_pred, fill = 'Pred'), alpha = 0.3) +     facet_grid(Region~Fleet, labeller = labeller(       Region = c('1' = \"Region 1\"),       Fleet = c('1' = 'Domestic LL Survey', '3' = 'JP LL Survey')     )) +     labs(x = 'Age', y = 'Proportion', color = '', linetype = '', fill = '') +     theme_bw(base_size = 20) +     theme(legend.position = 'top') } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_data_fitted_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data Fitted to Plot — get_data_fitted_plot","title":"Get Data Fitted to Plot — get_data_fitted_plot","text":"Get Data Fitted Plot","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_data_fitted_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data Fitted to Plot — get_data_fitted_plot","text":"","code":"get_data_fitted_plot(data, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_data_fitted_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data Fitted to Plot — get_data_fitted_plot","text":"data List n_models `SPoRC` data lists model_names Character vector model names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_data_fitted_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data Fitted to Plot — get_data_fitted_plot","text":"plot data fitted across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_data_fitted_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Data Fitted to Plot — get_data_fitted_plot","text":"","code":"if (FALSE) { # \\dontrun{ get_data_fitted_plot(list(data1, data2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_francis_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","title":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","text":"Computes Francis weights, used internally do_francis_reweighting","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_francis_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","text":"","code":"get_francis_weights(   n_regions,   n_sexes,   n_fleets,   Use,   ISS,   Pred_array,   Obs_array,   weights,   bins,   comp_type )"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_francis_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","text":"n_regions Number regions n_sexes Number sexes n_fleets Number fleets (fishery survey) Use Array data list specifies whether use data year ISS Input sample size array Pred_array Predicted values array dimensioned n_regions, n_years, n_ages, n_sexes, n_fleets Obs_array Observed values array dimensioned n_regions, n_years, n_ages, n_sexes, n_fleets weights Array francis weights (NAs) apply dimensioned n_regions, n_years, n_sexes, n_fleets bins Vector bins used (age length) comp_type Matrix composition structure types dimensioned year fleet","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_francis_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","text":"Value calculated francis weight","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_francis_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes Francis weights, which is used internally by do_francis_reweighting — get_francis_weights","text":"","code":"if (FALSE) { # \\dontrun{ # Function is used within do_francis_reweighting get_francis_weights(n_regions, n_sexes, n_fleets, Use, ISS, Pred_arry, Obs_array, weights, bins, comp_type) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets index fits results — get_idx_fits","title":"Gets index fits results — get_idx_fits","text":"Gets index fits results","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets index fits results — get_idx_fits","text":"","code":"get_idx_fits(data, rep, year_labs)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets index fits results — get_idx_fits","text":"data Data list fed RTMB rep Report list output RTMB year_labs Year labels use (vector)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets index fits results — get_idx_fits","text":"Fits indices dataframe","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets index fits results — get_idx_fits","text":"","code":"if (FALSE) { # \\dontrun{ idx_fits <- get_idx_fits(data = data, rep = rep, year_labs = seq(1960, 2024, 1))  idx_fits <- idx_fits %>%   mutate(     Idx = case_when(       Type == \"Fishery\" & Year < 1995 ~ \"Japanese Fishery CPUE Index\",       Type == \"Fishery\" & Year >= 1995 ~ \"Domestic Fishery CPUE Index\",       Type == 'Survey' & Fleet == 1 ~ \"Domestic LL Survey Relative Population Numbers\",       Type == 'Survey' & Fleet == 2 ~ \"GOA Trawl Survey Biomass (kt)\",       Type == 'Survey' & Fleet == 3 ~ 'Japanese LL Survey Relative Population Numbers'     )   ) ggplot() +   geom_line(idx_fits, mapping = aes(x = Year, y = value), lwd = 1.3, col = 'red') +   geom_pointrange(idx_fits, mapping = aes(x = Year, y = obs, ymin = lci, ymax = uci), color = 'blue', pch = 1) +   labs(x = \"Year\", y = 'Index') +   theme_bw(base_size = 20) +   facet_wrap(~Idx, scales = 'free', ncol = 2)  } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Index Fits Plot — get_idx_fits_plot","title":"Get Index Fits Plot — get_idx_fits_plot","text":"Get Index Fits Plot","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Index Fits Plot — get_idx_fits_plot","text":"","code":"get_idx_fits_plot(data, rep, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Index Fits Plot — get_idx_fits_plot","text":"data List n_models `SPoRC` data lists rep List n_models `SPoRC` report lists model_names Vector model names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Index Fits Plot — get_idx_fits_plot","text":"plot fitted values various indices across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_idx_fits_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Index Fits Plot — get_idx_fits_plot","text":"","code":"if (FALSE) { # \\dontrun{ get_idx_fits_plot(list(data1, data2), list(rep1, rep2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Key Projection Quantities and Table Plot — get_key_quants","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"Calculates biological fishery reference points performs population projections estimate terminal spawning biomass, catch advice, reference point values model region. Also returns formatted table plot key quantities.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"","code":"get_key_quants(data, rep, reference_points_opt, proj_model_opt, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"data list model input data objects, one model (.e., list SPoRC-formatted data lists). element contain information regions, years, ages, fleets, biological inputs (e.g., weight--age, maturity, mortality). rep list model output objects, one model (.e., list SPoRC-formatted report lists). element must include recruitment, selectivity, mortality, numbers--age. reference_points_opt named list specifying options reference point calculations. See Get_Reference_Points details. Must include: SPR_x Spawning potential ratio (e.g., 0.4) calculating F reference points. May NULL using bh_rec. t_spwn Fraction year spawning occurs (e.g., 0.5). sex_ratio_f Proportion recruits female. calc_rec_st_yr Start year averaging recruitment. rec_age Recruitment age. type Reference point calculation method (e.g., \"multi_region\"). Type output requested reference point function. proj_model_opt named list projection settings. See Do_Population_Projection details. Must include: n_proj_yrs Number years project forward. HCR_function Harvest control rule function use. recruitment_opt Recruitment assumption (e.g., \"mean_rec\", \"bh_rec\", \"inv_gauss\"). fmort_opt Fishing mortality assumption (e.g., \"input\", \"HCR\"). n_avg_yrs Number years average projection inputs. model_names character vector model identifiers (e.g., c(\"Base\", \"Alt1\", \"Alt2\")), one element data rep.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"list two elements: [[1]] data.frame key quantities model region, including terminal SSB, catch advice, reference points. [[2]] cowplot table plot (ggdraw object) key quantities.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"function checks input list completeness, calculates reference points using Get_Reference_Points(), performs population projections Do_Population_Projection(), assembles tabular visual summaries. recruitment_opt set \"inv_gauss\", warning issued since single simulation run. typically appropriate alternative assumption recommended.","code":""},{"path":[]},{"path":"https://chengmatt.github.io/SPoRC/reference/get_key_quants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Key Projection Quantities and Table Plot — get_key_quants","text":"","code":"if (FALSE) { # \\dontrun{ reference_points_opt <- list(SPR_x = 0.4,                              t_spwn = 0,                              sex_ratio_f = 0.5,                              calc_rec_st_yr = 20,                              rec_age = 2,                              type = \"multi_region\",                              what = \"global_SPR\")  proj_model_opt <- list(   n_proj_yrs = 2,   n_avg_yrs = 1,   HCR_function = function(x, frp, brp, alpha = 0.05) {     stock_status <- x / brp     if (stock_status >= 1) f <- frp     if (stock_status > alpha && stock_status < 1) f <- frp * (stock_status - alpha) / (1 - alpha)     if (stock_status < alpha) f <- 0     return(f)   },   recruitment_opt = \"mean_rec\",   fmort_opt = \"HCR\" )  out <- get_key_quants(list(mlt_rg_sable_data),                       list(mlt_rg_sable_rep),                       reference_points_opt,                       proj_model_opt,                       \"Model 1\") out[[1]]  # key quantities data.frame out[[2]]  # table plot } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_mcmc_ssb_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive SSB and Recruitment from MCMC using posterior samples — get_mcmc_ssb_rec","title":"Derive SSB and Recruitment from MCMC using posterior samples — get_mcmc_ssb_rec","text":"Derive SSB Recruitment MCMC using posterior samples","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_mcmc_ssb_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive SSB and Recruitment from MCMC using posterior samples — get_mcmc_ssb_rec","text":"","code":"get_mcmc_ssb_rec(mcmc_obj, tmb_obj)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_mcmc_ssb_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive SSB and Recruitment from MCMC using posterior samples — get_mcmc_ssb_rec","text":"mcmc_obj MCMC object tmbstan tmb_obj RTMB object MakeADFUN","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_mcmc_ssb_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive SSB and Recruitment from MCMC using posterior samples — get_mcmc_ssb_rec","text":"returns dataframe recruitment ssb posterior samples plot ssb recruitment mean, lwr 95 quantile, upr 95 quantile.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_nLL_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get plot of negative log likelihood values — get_nLL_plot","title":"Get plot of negative log likelihood values — get_nLL_plot","text":"Get plot negative log likelihood values","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_nLL_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get plot of negative log likelihood values — get_nLL_plot","text":"","code":"get_nLL_plot(rep, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_nLL_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get plot of negative log likelihood values — get_nLL_plot","text":"rep List n_models `SPoRC` report lists model_names Vector model names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_nLL_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get plot of negative log likelihood values — get_nLL_plot","text":"Plot tables negative log likelihood values across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_nLL_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get plot of negative log likelihood values — get_nLL_plot","text":"","code":"if (FALSE) { # \\dontrun{ get_nLL_plot(list(rep1, rep2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_osa.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","title":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","text":"Function format comp data get OSA residuals afscOSA (uses afscOSA compresid backend get OSA residuals)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_osa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","text":"","code":"get_osa(obs_mat, exp_mat, N, years, fleet, bins, comp_type, bin_label)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_osa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","text":"obs_mat Matrix observed values, can NAs - gets removed years arge (dimensioned region, year, age, sex, fleet) exp_mat Matrix expceted values, can NAs - gets removed years arg (dimensioned region, year, age, sex, fleet) N Input effective sample size. aggregated (comp_type == 0), vector n_years provided. split region, split sex (comp_type == 1), provide array dimensioned n_regions x n_years x n_sexes. joint sex, split region (comp_type == 2), provide matrix n_regions x n_years years Years want point filter fleet Fleet want filter bins Vector age length bins comp_type Composition type - whether aggregated == 0, split region sex == 1, split region joint sex = =2, joint region sex == 3 bin_label Bin label whether ages lengths","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_osa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","text":"OSA residuals","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_osa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to format comp data and get OSA residuals from afscOSA (uses afscOSA and compresid as backend to get OSA residuals) — get_osa","text":"","code":"if (FALSE) { # \\dontrun{ comp_props <- get_comp_prop(data = data, rep = rep, age_labels = 2:31, len_labels = seq(41, 99, 2), year_labels = 1960:2024) osa_results <- get_osa(obs_mat = comp_props$Obs_FishAge_mat,                       exp_mat = comp_props$Pred_FishAge_mat,                       N = 20 * data$Wt_FishAgeComps[1,1,1],                       years = 1999:2023,                       fleet = 1,                       bins = 2:31,                       comp_type = 0,                       bin_label = \"Age\") } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrospective Plot — get_retrospective_plot","title":"Get Retrospective Plot — get_retrospective_plot","text":"Get Retrospective Plot","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrospective Plot — get_retrospective_plot","text":"","code":"get_retrospective_plot(retro_output, Rec_Age)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Retrospective Plot — get_retrospective_plot","text":"retro_output Dataframe generated do_retrospective Rec_Age Age recruitment occurs","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrospective Plot — get_retrospective_plot","text":"retrospective plot recruitment SSB relative absolute scales, well retrospective plot recruitment cohort (squid plot)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrospective Plot — get_retrospective_plot","text":"","code":"if (FALSE) { # \\dontrun{ # do retrospective retro <- do_retrospective(n_retro = 7, # number of retro peels to run data = data, # rtmb data parameters = parameters, # rtmb parameters mapping = mapping, # rtmb mapping random = NULL, # if random effects are used do_par = TRUE, # whether or not to parralleize n_cores = 7, # if parallel, number of cores to use do_francis = F, # if we want tod o Francis n_francis_iter = NULL # Number of francis iterations to do ) get_retrospective_plot(retro, Rec_Age = 2) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_relative_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","title":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","text":"Derive relative difference terminal year retrospective analysis.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_relative_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","text":"","code":"get_retrospective_relative_difference(retro_data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_relative_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","text":"retro_data Dataframe outputted do_retrospective function","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_relative_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","text":"Returns data frame relative difference SSB recruitment terminal year","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_retrospective_relative_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive relative difference from terminal year from a retrospective analysis. — get_retrospective_relative_difference","text":"","code":"if (FALSE) { # \\dontrun{  ret <- do_retrospective(7, data, parameters, mapping, random = NULL, do_par = TRUE, n_cores = 7, do_francis = TRUE, n_francis_iter = 5)  ret_df <- get_retrospective_relative_difference(ret)  ggplot(ret_df %>% filter(Type == 'SSB'), aes(x = Year, y = rd, group = 2024- as.numeric(peel), color = 2024 - as.numeric(peel))) +  geom_hline(yintercept = 0, lty = 2, lwd = 1.3) +    coord_cartesian(ylim = c(-0.4, 0.4)) +    geom_line(lwd = 1.5) +    guides (color = guide_colourbar(barwidth = 15, barheight = 1.3)) +    labs(x = 'Year', y = 'Relative Difference from Terminal Year', color = 'Retrospective Year') +    scale_color_viridis_c() +    theme_bw(base_size = 15) +    theme(legend.position = 'top') } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_selex_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Fishery and Survey Selectivity Plots — get_selex_plot","title":"Get Fishery and Survey Selectivity Plots — get_selex_plot","text":"Get Fishery Survey Selectivity Plots","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_selex_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Fishery and Survey Selectivity Plots — get_selex_plot","text":"","code":"get_selex_plot(rep, model_names, Selex_Type = \"age\")"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_selex_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Fishery and Survey Selectivity Plots — get_selex_plot","text":"rep List n_models `SPoRC` report lists model_names Vector model names Selex_Type Character vector specifying whether output age length-based selectivity (age, length)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_selex_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Fishery and Survey Selectivity Plots — get_selex_plot","text":"Plots terminal year fishery survey selectivity fleet, region, sex across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_selex_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Fishery and Survey Selectivity Plots — get_selex_plot","text":"","code":"if (FALSE) { # \\dontrun{ get_selex_plot(list(rep1, rep2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_ts_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Series Plots — get_ts_plot","title":"Get Time Series Plots — get_ts_plot","text":"Get Time Series Plots","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_ts_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Series Plots — get_ts_plot","text":"","code":"get_ts_plot(rep, sd_rep, model_names)"},{"path":"https://chengmatt.github.io/SPoRC/reference/get_ts_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Series Plots — get_ts_plot","text":"rep List n_models `SPoRC` report lists sd_rep List n_models `SPoRC` sdreport lists model_names Vector model names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_ts_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Series Plots — get_ts_plot","text":"Plots spawning biomass, dynamic b0, total biomass, recruitment, fishing mortality time-series across models","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/get_ts_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Series Plots — get_ts_plot","text":"","code":"if (FALSE) { # \\dontrun{   get_ts_plot(list(rep1, rep2), list(sd_rep1, sd_rep2), c(\"Model1\", \"Model2\")) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/global_BH_Fmsy.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get Global FMSY from a Beverton-Holt (Spatial) — global_BH_Fmsy","title":"Title Get Global FMSY from a Beverton-Holt (Spatial) — global_BH_Fmsy","text":"Title Get Global FMSY Beverton-Holt (Spatial)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/global_BH_Fmsy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get Global FMSY from a Beverton-Holt (Spatial) — global_BH_Fmsy","text":"","code":"global_BH_Fmsy(pars, data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/global_BH_Fmsy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Get Global FMSY from a Beverton-Holt (Spatial) — global_BH_Fmsy","text":"pars Parameter List data Data List","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/global_BH_Fmsy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get Global FMSY from a Beverton-Holt (Spatial) — global_BH_Fmsy","text":"","code":"if (FALSE) { # \\dontrun{ rep <- obj$report(obj$env$last.par.best) # need to have an RTMB object first data_list <- list() # set up data list # Extract out relevant elements n_ages <- length(data$ages) # number of ages n_years <- length(data$years) # number of years data_list$F_fract_flt <- rep$Fmort[1,n_years,] / sum(rep$Fmort[1,n_years,]) # get fleet F fraction data_list$fish_sel <- array(rep$fish_sel[1,n_years,,1,], dim = c(n_ages, data$n_fish_fleets)) data_list$natmort <- rep$natmort[1,1,,1] data_list$t_spwn <- 0 data_list$WAA <- data$WAA[1,1,,1] data_list$MatAA <- data$MatAA[1,1,,1] data_list$h <- rep$h_trans data_list$R0 <- rep$R0  par_list <- list() par_list$log_Fmsy <- log(0.1)  obj <- RTMB::MakeADFun(cmb(single_region_BH_Fmsy, data_list), parameters = par_list, map = NULL, silent = TRUE) obj$optim <- stats::nlminb(obj$par, obj$fn, obj$gr, control = list(iter.max = 1e6, eval.max = 1e6, rel.tol = 1e-15)) obj$rep <- obj$report(obj$env$last.par.best) obj$sdrep <- sdreport(obj) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/global_SPR.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get Global SPR Reference Points (Spatial) — global_SPR","title":"Title Get Global SPR Reference Points (Spatial) — global_SPR","text":"Title Get Global SPR Reference Points (Spatial)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/global_SPR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get Global SPR Reference Points (Spatial) — global_SPR","text":"","code":"global_SPR(pars, data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/global_SPR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Get Global SPR Reference Points (Spatial) — global_SPR","text":"pars Parameter List RTMB data Data List RTMB","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/global_SPR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get Global SPR Reference Points (Spatial) — global_SPR","text":"","code":"if (FALSE) { # \\dontrun{ SPR_x <- 0.4 # spr fraction rep <- obj$report(obj$env$last.par.best) # need to have an RTMB object first # Extract out relevant elements n_ages <- length(data$ages) # number of ages n_years <- length(data$years) # number of years data_list$F_fract_flt <- rep$Fmort[1,n_years,] / sum(rep$Fmort[1,n_years,]) # get fleet F fraction to derive population level selectivity data_list$fish_sel <- array(rep$fish_sel[1,n_years,,1,], dim = c(n_ages, data$n_fish_fleets)) # get female selectivity for all fleets data_list$natmort <- rep$natmort[1,1,,1] # get female natural mortality data_list$t_spwn <- t_spwn # specified mortality time up until spawning data_list$WAA <- data$WAA[1,1,,1] # weight-at-age for females data_list$MatAA <- data$MatAA[1,1,,1] # maturity at age for females data_list$Rec_Prop <- rep$Rec_trans_prop # unfished recruitment by region data_list$Movement <- array(rep$Movement[,,n_years,,1], dim = c(n_regions, n_regions, n_ages)) # Movement data_list$do_recruits_move <- data$do_recruits_move # whether recruits move data_list$SPR_x <- SPR_x # SPR fraction par_list <- list() # set up parameter list par_list$log_F_x <- log(0.1) # F_x starting value # Make adfun object obj <- RTMB::MakeADFun(cmb(global_SPR, data_list), parameters = par_list, map = NULL, silent = TRUE) obj$optim <- stats::nlminb(obj$par, obj$fn, obj$gr, control = list(iter.max = 1e6, eval.max = 1e6, rel.tol = 1e-15)) obj$rep <- obj$report(obj$env$last.par.best) # get report } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/is_package_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check package availbility — is_package_available","title":"Helper function to check package availbility — is_package_available","text":"Helper function check package availbility","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/is_package_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check package availbility — is_package_available","text":"","code":"is_package_available(pkg)"},{"path":"https://chengmatt.github.io/SPoRC/reference/is_package_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check package availbility — is_package_available","text":"pkg package name character","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Model diagnostics for MCMC — mcmc_diag","title":"Model diagnostics for MCMC — mcmc_diag","text":"Model diagnostics MCMC","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model diagnostics for MCMC — mcmc_diag","text":"","code":"mcmc_diag(mcmc_obj, tmb_sdrep, plot = TRUE, pars = NULL)"},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model diagnostics for MCMC — mcmc_diag","text":"mcmc_obj MCMC object tmbstan tmb_sdrep SD report fomr TMB plot Whether plot outputs pars Parameters want plot ","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model diagnostics for MCMC — mcmc_diag","text":"list plots traditional MCMC diagnostics","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_diag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model diagnostics for MCMC — mcmc_diag","text":"","code":"if (FALSE) { # \\dontrun{ diagnostic_plots <- mcmc_diag(mcmc_obj, tmb_sdrep, TRUE, pars = 'ln_M') } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_par_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets parameter names from mcmc object — mcmc_par_names","title":"Gets parameter names from mcmc object — mcmc_par_names","text":"Gets parameter names mcmc object","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_par_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets parameter names from mcmc object — mcmc_par_names","text":"","code":"mcmc_par_names(mcmc_obj)"},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_par_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets parameter names from mcmc object — mcmc_par_names","text":"mcmc_obj MCMC object rtmbstan","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_par_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets parameter names from mcmc object — mcmc_par_names","text":"Returns character vector parameter names","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mcmc_par_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets parameter names from mcmc object — mcmc_par_names","text":"","code":"if (FALSE) { # \\dontrun{ par_names <- mcmc_par_names(mcmc_obj) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sablefish data for multi region (5 area) case study — mlt_rg_sable_data","title":"Sablefish data for multi region (5 area) case study — mlt_rg_sable_data","text":"dataset containing necessary elements Alaska sablefish spatial case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sablefish data for multi region (5 area) case study — mlt_rg_sable_data","text":"","code":"mlt_rg_sable_data"},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sablefish data for multi region (5 area) case study — mlt_rg_sable_data","text":"list multiple components needed multi (5) region sablefish model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sablefish data for multi region (5 area) case study — mlt_rg_sable_data","text":"Cheng et al. 2025, Fish Fisheries; Panmictic Panacea? Demonstrating Good Practices Developing Spatial Stock Assessments Application Alaska Sablefish (Anoplopoma fimbria)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Sablefish report for 5 region case study — mlt_rg_sable_rep","title":"Sablefish report for 5 region case study — mlt_rg_sable_rep","text":"report containing results spatial Alaska sablefish case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sablefish report for 5 region case study — mlt_rg_sable_rep","text":"","code":"mlt_rg_sable_rep"},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_rep.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sablefish report for 5 region case study — mlt_rg_sable_rep","text":"Report file 5 region sablefish case study","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/mlt_rg_sable_rep.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sablefish report for 5 region case study — mlt_rg_sable_rep","text":"Cheng et al. 2025, Fish Fisheries; Panmictic Panacea? Demonstrating Good Practices Developing Spatial Stock Assessments Application Alaska Sablefish (Anoplopoma fimbria)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_all_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for all basic quantities — plot_all_basic","title":"Plotting function for all basic quantities — plot_all_basic","text":"Plotting function basic quantities","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_all_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for all basic quantities — plot_all_basic","text":"","code":"plot_all_basic(data, rep, sd_rep, model_names, out_path)"},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_all_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for all basic quantities — plot_all_basic","text":"data List n_models `SPoRC` data lists rep List n_models `SPoRC` report lists sd_rep List n_models sd report lists `SPoRC` model_names Character vector model names out_path Path output directory. Users need specify path.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_all_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for all basic quantities — plot_all_basic","text":"series plots compared across models outputted pdf specified directory","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_all_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function for all basic quantities — plot_all_basic","text":"","code":"if (FALSE) { # \\dontrun{ plot_all_basic(   data = list(data1, data2),   rep = list(rep1, rep2),   sd_rep = list(sd_rep1, sd_rep2),   model_names = c(\"Model1\", \"Model2\"),   out_path = here::here() ) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_resids.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","title":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","text":"Plots OSA residuals outputs get_osa. Much code taken afscOM package, modificaitons plot features.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_resids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","text":"","code":"plot_resids(osa_results)"},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_resids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","text":"osa_results List object obtained get_osa, contains dataframe residuals aggregated fits.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_resids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","text":"vareity plots OSA residuals (list)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/plot_resids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots OSA residuals from outputs from get_osa. Much of this code is taken from the afscOM package, but with modificaitons to plot features. — plot_resids","text":"","code":"if (FALSE) { # \\dontrun{ comp_props <- get_comp_prop(data = data, rep = rep, age_labels = 2:31, len_labels = seq(41, 99, 2), year_labels = 1960:2024) osa_results <- get_osa(obs_mat = comp_props$Obs_FishLen_mat,                        exp_mat = comp_props$Pred_FishLen_mat,                        N = 20 * data$Wt_FishAgeComps[1,1,1],                        years = 1999:2023,                        fleet = 1,                        bins = 2:31,                        comp_type = 1,                        bin_label = \"Age\")  osa_plot <- plot_resids(osa_results) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/post_optim_sanity_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Post Optimization Model Convergence Checks — post_optim_sanity_checks","title":"Post Optimization Model Convergence Checks — post_optim_sanity_checks","text":"Post Optimization Model Convergence Checks","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/post_optim_sanity_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post Optimization Model Convergence Checks — post_optim_sanity_checks","text":"","code":"post_optim_sanity_checks(   sd_rep,   rep,   gradient_tol = 0.001,   se_tol = 100,   corr_tol = 0.99 )"},{"path":"https://chengmatt.github.io/SPoRC/reference/post_optim_sanity_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post Optimization Model Convergence Checks — post_optim_sanity_checks","text":"sd_rep sd report list `SPoRC` model rep report list `SPoRC` model gradient_tol Value maximum gradient tolerance use se_tol Value maximum standard error tolerance use corr_tol Value maximum correlation tolerance use","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rdirM.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Simulate dirichlet multinomial draws — rdirM","title":"Title Simulate dirichlet multinomial draws — rdirM","text":"Title Simulate dirichlet multinomial draws","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rdirM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Simulate dirichlet multinomial draws — rdirM","text":"","code":"rdirM(n, N, alpha)"},{"path":"https://chengmatt.github.io/SPoRC/reference/rdirM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Simulate dirichlet multinomial draws — rdirM","text":"n Number sims N Sum observations alpha Concentration parameter","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rinvgauss_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Generate Recruitment Values based on Inverse Gaussian Distribution — rinvgauss_rec","title":"Title Generate Recruitment Values based on Inverse Gaussian Distribution — rinvgauss_rec","text":"Title Generate Recruitment Values based Inverse Gaussian Distribution","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rinvgauss_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Generate Recruitment Values based on Inverse Gaussian Distribution — rinvgauss_rec","text":"","code":"rinvgauss_rec(sims, recruitment)"},{"path":"https://chengmatt.github.io/SPoRC/reference/rinvgauss_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Generate Recruitment Values based on Inverse Gaussian Distribution — rinvgauss_rec","text":"sims Number Simulations recruitment Recruitment vector","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rinvgauss_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Generate Recruitment Values based on Inverse Gaussian Distribution — rinvgauss_rec","text":"Random variables following inverse gaussian","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rlogistnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate logistic normal variables — rlogistnormal","title":"Simulate logistic normal variables — rlogistnormal","text":"Simulate logistic normal variables","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/rlogistnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate logistic normal variables — rlogistnormal","text":"","code":"rlogistnormal(exp, pars, comp_like)"},{"path":"https://chengmatt.github.io/SPoRC/reference/rlogistnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate logistic normal variables — rlogistnormal","text":"exp Expected values pars Parameters logistic normal (iid == 1 parameter, AR1 == 2 parameters, 2D, age sex == 3 parameters, 3D, age, sex, region == 4 parameters) comp_like Likelihood structure (iid == 2, ar1 == 3, 2d == 4, 3d == 5)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/run_annual_cycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Annual Cycle in Simulation Environment — run_annual_cycle","title":"Run Annual Cycle in Simulation Environment — run_annual_cycle","text":"Run Annual Cycle Simulation Environment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/run_annual_cycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Annual Cycle in Simulation Environment — run_annual_cycle","text":"","code":"run_annual_cycle(y, sim, sim_env)"},{"path":"https://chengmatt.github.io/SPoRC/reference/run_annual_cycle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Annual Cycle in Simulation Environment — run_annual_cycle","text":"y Year index sim Simulation index sim_env Simulation environment necessary elements run annual cycle","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_ebswp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"EBS Walleye Pollock data for single region case study — sgl_rg_ebswp_data","title":"EBS Walleye Pollock data for single region case study — sgl_rg_ebswp_data","text":"dataset containing necessary elements EBS Walleye Pollock case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_ebswp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EBS Walleye Pollock data for single region case study — sgl_rg_ebswp_data","text":"","code":"sgl_rg_ebswp_data"},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_ebswp_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EBS Walleye Pollock data for single region case study — sgl_rg_ebswp_data","text":"list multiple components needed single region walleye pollock model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_ebswp_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EBS Walleye Pollock data for single region case study — sgl_rg_ebswp_data","text":"2024 Federal EBS Walleye Pollock Assessment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sablefish data for single region case study — sgl_rg_sable_data","title":"Sablefish data for single region case study — sgl_rg_sable_data","text":"dataset containing necessary elements Alaska sablefish case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sablefish data for single region case study — sgl_rg_sable_data","text":"","code":"sgl_rg_sable_data"},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sablefish data for single region case study — sgl_rg_sable_data","text":"list multiple components needed single region sablefish model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sablefish data for single region case study — sgl_rg_sable_data","text":"2024 Federal Alaska Sablefish Assessment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Sablefish report for single region case study — sgl_rg_sable_rep","title":"Sablefish report for single region case study — sgl_rg_sable_rep","text":"report containing results Alaska sablefish case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sablefish report for single region case study — sgl_rg_sable_rep","text":"","code":"sgl_rg_sable_rep"},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_rep.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sablefish report for single region case study — sgl_rg_sable_rep","text":"Report file single region sablefish case study","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/sgl_rg_sable_rep.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sablefish report for single region case study — sgl_rg_sable_rep","text":"2024 Federal Alaska Sablefish Assessment","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_BH_Fmsy.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Get FMSY from a Beverton-Holt function (Single Region) — single_region_BH_Fmsy","title":"Title Get FMSY from a Beverton-Holt function (Single Region) — single_region_BH_Fmsy","text":"Title Get FMSY Beverton-Holt function (Single Region)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_BH_Fmsy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Get FMSY from a Beverton-Holt function (Single Region) — single_region_BH_Fmsy","text":"","code":"single_region_BH_Fmsy(pars, data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_BH_Fmsy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Get FMSY from a Beverton-Holt function (Single Region) — single_region_BH_Fmsy","text":"pars Parameter List data Data List","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_BH_Fmsy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Get FMSY from a Beverton-Holt function (Single Region) — single_region_BH_Fmsy","text":"","code":"if (FALSE) { # \\dontrun{ rep <- obj$report(obj$env$last.par.best) # need to have an RTMB object first data_list <- list() # set up data list # Extract out relevant elements n_ages <- length(data$ages) # number of ages n_years <- length(data$years) # number of years data_list$F_fract_flt <- rep$Fmort[1,n_years,] / sum(rep$Fmort[1,n_years,]) # get fleet F fraction to derive population level selectivity data_list$fish_sel <- array(rep$fish_sel[1,n_years,,1,], dim = c(n_ages, data$n_fish_fleets)) # get female selectivity for all fleets data_list$natmort <- rep$natmort[1,1,,1] # get female natural mortality data_list$t_spwn <- 0 # specified mortality time up until spawning data_list$WAA <- data$WAA[1,1,,1] # weight-at-age for females data_list$MatAA <- data$MatAA[1,1,,1] # maturity at age for females data_list$h <- rep$h_trans # steepness data_list$R0 <- rep$R0 # unfished recruitment  par_list <- list() # set up parameter list par_list$log_Fmsy <- log(0.1) # Fmsy starting value  # Make adfun object obj <- RTMB::MakeADFun(cmb(single_region_BH_Fmsy, data_list), parameters = par_list, map = NULL, silent = TRUE) obj$optim <- stats::nlminb(obj$par, obj$fn, obj$gr, control = list(iter.max = 1e6, eval.max = 1e6, rel.tol = 1e-15)) obj$rep <- obj$report(obj$env$last.par.best) # get report obj$sdrep <- sdreport(obj) } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_SPR.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SPR reference points (Single Region) — single_region_SPR","title":"Get SPR reference points (Single Region) — single_region_SPR","text":"Get SPR reference points (Single Region)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_SPR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SPR reference points (Single Region) — single_region_SPR","text":"","code":"single_region_SPR(pars, data)"},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_SPR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SPR reference points (Single Region) — single_region_SPR","text":"pars Parameter List data Data List","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/single_region_SPR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SPR reference points (Single Region) — single_region_SPR","text":"","code":"if (FALSE) { # \\dontrun{ rep <- obj$report(obj$env$last.par.best) # need to have an RTMB object first # Extract out relevant elements n_ages <- length(data$ages) # number of ages n_years <- length(data$years) # number of years data_list$F_fract_flt <- rep$Fmort[1,n_years,] / sum(rep$Fmort[1,n_years,]) # get fleet F fraction to derive population level selectivity data_list$fish_sel <- array(rep$fish_sel[1,n_years,,1,], dim = c(n_ages, data$n_fish_fleets)) # get female selectivity for all fleets data_list$natmort <- rep$natmort[1,1,,1] # get female natural mortality data_list$t_spwn <- t_spwn # specified mortality time up until spawning data_list$WAA <- data$WAA[1,1,,1] # weight-at-age for females data_list$MatAA <- data$MatAA[1,1,,1] # maturity at age for females  data_list$SPR_x <- SPR_x # SPR fraction  par_list <- list() # set up parameter list par_list$log_F_x <- log(0.1) # F_x starting value  # Make adfun object obj <- RTMB::MakeADFun(cmb(single_region_SPR, data_list), parameters = par_list, map = NULL, silent = TRUE) obj$optim <- stats::nlminb(obj$par, obj$fn, obj$gr, control = list(iter.max = 1e6, eval.max = 1e6, rel.tol = 1e-15)) obj$rep <- obj$report(obj$env$last.par.best) # get report } # }"},{"path":"https://chengmatt.github.io/SPoRC/reference/theme_sablefish.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot theme for sablefish — theme_sablefish","title":"ggplot theme for sablefish — theme_sablefish","text":"ggplot theme sablefish","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/theme_sablefish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot theme for sablefish — theme_sablefish","text":"","code":"theme_sablefish()"},{"path":"https://chengmatt.github.io/SPoRC/reference/theme_sablefish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot theme for sablefish — theme_sablefish","text":"ggplot theme","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/three_rg_sable_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sablefish data for multi region (3 area) case study — three_rg_sable_data","title":"Sablefish data for multi region (3 area) case study — three_rg_sable_data","text":"dataset containing necessary elements Alaska sablefish spatial case study.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/three_rg_sable_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sablefish data for multi region (3 area) case study — three_rg_sable_data","text":"","code":"three_rg_sable_data"},{"path":"https://chengmatt.github.io/SPoRC/reference/three_rg_sable_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sablefish data for multi region (3 area) case study — three_rg_sable_data","text":"list multiple components needed multi (3) region sablefish model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/three_rg_sable_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sablefish data for multi region (3 area) case study — three_rg_sable_data","text":"Cheng et al. 2025, Fish Fisheries; Panmictic Panacea? Demonstrating Good Practices Developing Spatial Stock Assessments Application Alaska Sablefish (Anoplopoma fimbria)","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/truncate_yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","title":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","text":"Helper function truncate data years, parameters, mapping conduct retrospective diagnostics. Called within do_retrospective function.","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/truncate_yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","text":"","code":"truncate_yr(j, data, parameters, mapping)"},{"path":"https://chengmatt.github.io/SPoRC/reference/truncate_yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","text":"j years truncate terminal year data Data list used RTMB model parameters Parameter list used RTMB model mapping Mapping list used RTMB model","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/truncate_yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","text":"List data, parameters, mapping truncated dimensions original data, parameters, mapping list","code":""},{"path":"https://chengmatt.github.io/SPoRC/reference/truncate_yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to truncate data years, parameters, and mapping to conduct retrospective diagnostics. Called within do_retrospective function. — truncate_yr","text":"","code":"if (FALSE) { # \\dontrun{ retro_list <- retro_truncate_year(j = 0, data, parameters, mapping) # does not remove any data retro_list <- retro_truncate_year(j = 1, data, parameters, mapping) # removes last year of data } # }"}]
